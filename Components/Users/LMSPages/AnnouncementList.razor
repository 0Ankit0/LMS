@page "/user/lms/announcement-list"
@using LMS.Models.Communication
@using LMS.Models.User
@using LMS.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IAnnouncementService AnnouncementService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Announcements - LMS</PageTitle>

<div class="announcements-layout">
    <!-- Announcements Sidebar -->
    <div class="announcements-sidebar">
        <div class="sidebar-header">
            <h5 class="sidebar-title">Announcements</h5>
        </div>
        <div class="sidebar-content">
            <div class="announcements-nav">
                <div class="nav-item @(selectedFilter == "all" ? "active" : "")" @onclick='() => SelectFilter("all")'>
                    <div class="nav-icon">
                        <i class="bi bi-megaphone"></i>
                    </div>
                    <span class="nav-text">All Announcements</span>
                </div>
                <div class="nav-item @(selectedFilter == "high" ? "active" : "")" @onclick='() => SelectFilter("high")'>
                    <div class="nav-icon">
                        <i class="bi bi-exclamation-triangle"></i>
                    </div>
                    <span class="nav-text">High Priority</span>
                </div>
                <div class="nav-item @(selectedFilter == "medium" ? "active" : "")" @onclick='() => SelectFilter("medium")'>
                    <div class="nav-icon">
                        <i class="bi bi-info-circle"></i>
                    </div>
                    <span class="nav-text">Medium Priority</span>
                </div>
                <div class="nav-item @(selectedFilter == "low" ? "active" : "")" @onclick='() => SelectFilter("low")'>
                    <div class="nav-icon">
                        <i class="bi bi-bell"></i>
                    </div>
                    <span class="nav-text">Low Priority</span>
                </div>
                <div class="nav-item @(selectedFilter == "recent" ? "active" : "")" @onclick='() => SelectFilter("recent")'>
                    <div class="nav-icon">
                        <i class="bi bi-clock-history"></i>
                    </div>
                    <span class="nav-text">Recent</span>
                </div>
            </div>
            
            <div class="filters-section">
                <h6 class="filter-title">Date Range</h6>
                <div class="filter-group">
                    <div class="filter-options">
                        <label class="filter-option @(dateFilter == "today" ? "active" : "")" @onclick='() => SelectDateFilter("today")'>
                            <span>Today</span>
                        </label>
                        <label class="filter-option @(dateFilter == "week" ? "active" : "")" @onclick='() => SelectDateFilter("week")'>
                            <span>This Week</span>
                        </label>
                        <label class="filter-option @(dateFilter == "month" ? "active" : "")" @onclick='() => SelectDateFilter("month")'>
                            <span>This Month</span>
                        </label>
                        <label class="filter-option @(dateFilter == "all" ? "active" : "")" @onclick='() => SelectDateFilter("all")'>
                            <span>All Time</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Main Announcements Area -->
    <div class="announcements-main">
        <!-- Header -->
        <div class="announcements-header">
            <div class="header-info">
                <h3 class="page-title">Announcements</h3>
                <p class="page-subtitle">Stay updated with the latest news and information</p>
            </div>
            <div class="header-actions">
                <div class="search-container">
                    <i class="bi bi-search search-icon"></i>
                    <input type="text" class="search-input" placeholder="Search announcements..." 
                           @bind="searchQuery" @oninput="OnSearchInput">
                </div>
                <button class="btn btn-outline-primary refresh-btn" @onclick="RefreshAnnouncements">
                    <i class="bi bi-arrow-clockwise"></i>
                    <span>Refresh</span>
                </button>
            </div>
        </div>
        
        <!-- Announcements Content -->
        <div class="announcements-content">
            @if (isLoading)
            {
                <div class="loading-container">
                    <div class="spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading announcements...</span>
                        </div>
                    </div>
                    <p class="loading-text">Loading announcements...</p>
                </div>
            }
            else if (filteredAnnouncements?.Any() == true)
            {
                <div class="announcements-list">
                    @foreach (var announcement in filteredAnnouncements)
                    {
                        <div class="announcement-card @GetPriorityClass(announcement.Priority)" 
                             @onclick="() => ShowAnnouncement(announcement)">
                            <div class="announcement-priority">
                                <i class="@GetPriorityIcon(announcement.Priority)"></i>
                            </div>
                            <div class="announcement-content">
                                <div class="announcement-header">
                                    <h5 class="announcement-title">@announcement.Title</h5>
                                    <div class="announcement-meta">
                                        <span class="announcement-author">
                                            <i class="bi bi-person-circle"></i>
                                            @announcement.AuthorName
                                        </span>
                                        <span class="announcement-date">
                                            <i class="bi bi-calendar"></i>
                                            @FormatDate(announcement.PublishedAt)
                                        </span>
                                        <span class="priority-badge @GetPriorityClass(announcement.Priority)">
                                            @announcement.Priority
                                        </span>
                                    </div>
                                </div>
                                <p class="announcement-excerpt">@GetExcerpt(announcement.Content)</p>
                            </div>
                            <div class="announcement-actions">
                                <button class="btn btn-sm btn-outline-primary view-btn" 
                                        @onclick="() => ShowAnnouncement(announcement)"
                                        @onclick:stopPropagation="true">
                                    <i class="bi bi-eye"></i>
                                    View
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="bi bi-megaphone"></i>
                    <h5>No announcements found</h5>
                    <p>There are no announcements matching your current filters.</p>
                    <button class="btn btn-primary" @onclick="ClearFilters">Clear Filters</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Announcement Detail Modal -->
@if (showModal && selectedAnnouncement != null)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-megaphone me-2"></i>
                        @selectedAnnouncement.Title
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="announcement-detail-meta mb-3">
                        <div class="meta-item">
                            <i class="bi bi-person-circle text-primary"></i>
                            <span>@selectedAnnouncement.AuthorName</span>
                        </div>
                        <div class="meta-item">
                            <i class="bi bi-calendar-event text-primary"></i>
                            <span>@selectedAnnouncement.PublishedAt.ToString("MMM dd, yyyy HH:mm")</span>
                        </div>
                        <div class="meta-item">
                            <span class="priority-badge @GetPriorityClass(selectedAnnouncement.Priority)">
                                <i class="@GetPriorityIcon(selectedAnnouncement.Priority)"></i>
                                @selectedAnnouncement.Priority Priority
                            </span>
                        </div>
                    </div>
                    <div class="announcement-detail-content">
                        @selectedAnnouncement.Content
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Properties for filtering and search
    private string selectedFilter = "all";
    private string dateFilter = "all";
    private string searchQuery = "";
    private bool isLoading = true;
    private bool showModal = false;
    
    // Collections and selected items
    private List<AnnouncementModel> announcements = new();
    private List<AnnouncementModel> filteredAnnouncements = new();
    private AnnouncementModel? selectedAnnouncement;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;
        
        try
        {
            // Load announcements from service
            announcements = await AnnouncementService.GetAnnouncementsAsync();
            
            // If no announcements from service, use mock data
            if (!announcements.Any())
            {
                announcements = GetMockAnnouncements();
            }
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Log error and use mock data
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            announcements = GetMockAnnouncements();
            ApplyFilters();
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<AnnouncementModel> GetMockAnnouncements()
    {
        return new List<AnnouncementModel>
        {
            new AnnouncementModel
            {
                Id = 1,
                Title = "System Maintenance Scheduled",
                Content = "We will be performing routine system maintenance on Saturday, December 14th from 2:00 AM to 4:00 AM EST. During this time, the learning management system will be temporarily unavailable. We apologize for any inconvenience and appreciate your patience.",
                Priority = "high",
                AuthorName = "System Administrator",
                PublishedAt = DateTime.Now.AddDays(-1),
                IsActive = true
            },
            new AnnouncementModel
            {
                Id = 2,
                Title = "New Course Available: Advanced Web Development",
                Content = "We're excited to announce the launch of our new Advanced Web Development course! This comprehensive program covers modern frameworks, best practices, and hands-on projects. Enrollment is now open for all students.",
                Priority = "medium",
                AuthorName = "Dr. Sarah Johnson",
                PublishedAt = DateTime.Now.AddDays(-2),
                IsActive = true
            },
            new AnnouncementModel
            {
                Id = 3,
                Title = "Holiday Schedule Update",
                Content = "Please note that our support team will have modified hours during the holiday season. From December 20th to January 2nd, support will be available from 9:00 AM to 5:00 PM EST, Monday through Friday.",
                Priority = "low",
                AuthorName = "Support Team",
                PublishedAt = DateTime.Now.AddDays(-3),
                IsActive = true
            },
            new AnnouncementModel
            {
                Id = 4,
                Title = "Student Achievement Recognition",
                Content = "Congratulations to our outstanding students who completed their certifications this month! We're proud to celebrate their dedication and hard work. Keep up the excellent progress!",
                Priority = "low",
                AuthorName = "Academic Affairs",
                PublishedAt = DateTime.Now.AddDays(-5),
                IsActive = true
            },
            new AnnouncementModel
            {
                Id = 5,
                Title = "Security Update Required",
                Content = "As part of our ongoing commitment to security, we're implementing enhanced authentication measures. All users will need to update their passwords by December 20th. Please use the password reset feature if needed.",
                Priority = "high",
                AuthorName = "IT Security Team",
                PublishedAt = DateTime.Now.AddDays(-7),
                IsActive = true
            },
            new AnnouncementModel
            {
                Id = 6,
                Title = "New Mobile App Features",
                Content = "Our mobile app has been updated with new features including offline course access, push notifications, and improved performance. Update your app from the App Store or Google Play Store.",
                Priority = "medium",
                AuthorName = "Development Team",
                PublishedAt = DateTime.Now.AddDays(-10),
                IsActive = true
            }
        };
    }

    private void SelectFilter(string filter)
    {
        selectedFilter = filter;
        ApplyFilters();
    }

    private void SelectDateFilter(string filter)
    {
        dateFilter = filter;
        ApplyFilters();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredAnnouncements = announcements.Where(a => a.IsActive).ToList();

        // Apply priority filter
        if (selectedFilter != "all")
        {
            if (selectedFilter == "recent")
            {
                filteredAnnouncements = filteredAnnouncements
                    .Where(a => a.PublishedAt >= DateTime.Now.AddDays(-7))
                    .ToList();
            }
            else
            {
                filteredAnnouncements = filteredAnnouncements
                    .Where(a => a.Priority.Equals(selectedFilter, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
        }

        // Apply date filter
        if (dateFilter != "all")
        {
            var cutoffDate = dateFilter switch
            {
                "today" => DateTime.Today,
                "week" => DateTime.Now.AddDays(-7),
                "month" => DateTime.Now.AddDays(-30),
                _ => DateTime.MinValue
            };

            if (cutoffDate != DateTime.MinValue)
            {
                filteredAnnouncements = filteredAnnouncements
                    .Where(a => a.PublishedAt >= cutoffDate)
                    .ToList();
            }
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredAnnouncements = filteredAnnouncements
                .Where(a => a.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           a.Content.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           a.AuthorName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Sort by date (newest first)
        filteredAnnouncements = filteredAnnouncements
            .OrderByDescending(a => a.PublishedAt)
            .ToList();

        StateHasChanged();
    }

    private void ShowAnnouncement(AnnouncementModel announcement)
    {
        selectedAnnouncement = announcement;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedAnnouncement = null;
    }

    private async Task RefreshAnnouncements()
    {
        await LoadAnnouncements();
    }

    private void ClearFilters()
    {
        selectedFilter = "all";
        dateFilter = "all";
        searchQuery = "";
        ApplyFilters();
    }

    private string GetPriorityClass(string priority)
    {
        return priority.ToLower();
    }

    private string GetPriorityIcon(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "bi-exclamation-triangle",
            "medium" => "bi-info-circle",
            "low" => "bi-bell",
            _ => "bi-info-circle"
        };
    }

    private string FormatDate(DateTime date)
    {
        var timeSpan = DateTime.Now - date;
        
        if (timeSpan.Days > 0)
        {
            return $"{timeSpan.Days} day{(timeSpan.Days > 1 ? "s" : "")} ago";
        }
        else if (timeSpan.Hours > 0)
        {
            return $"{timeSpan.Hours} hour{(timeSpan.Hours > 1 ? "s" : "")} ago";
        }
        else if (timeSpan.Minutes > 0)
        {
            return $"{timeSpan.Minutes} minute{(timeSpan.Minutes > 1 ? "s" : "")} ago";
        }
        else
        {
            return "Just now";
        }
    }

    private string GetExcerpt(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "";

        const int maxLength = 150;
        if (content.Length <= maxLength)
            return content;

        return content.Substring(0, maxLength) + "...";
    }
}