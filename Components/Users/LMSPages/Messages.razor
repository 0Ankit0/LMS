@page "/user/lms/messages"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using LMS.Data
@using LMS.Models.Communication
@using LMS.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject IMessageService MessageService
@inject IUserService UserService
@inject IJSRuntime JSRuntime

<PageTitle>Messages - LMS</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2"><i class="fas fa-envelope me-2"></i>Messages</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <button type="button" class="btn btn-primary" @onclick="ShowComposeModal">
                <i class="fas fa-plus me-1"></i>Compose
            </button>
        </div>
    </div>

    <div class="row">
        <!-- Message List -->
        <div class="col-md-4 border-end">
            <div class="mb-3">
                <div class="btn-group w-100" role="group">
                    <button type="button" class="btn @(currentFolder == "inbox" ? "btn-primary" : "btn-outline-primary")" 
                            @onclick='() => SwitchFolder("inbox")'>
                        <i class="fas fa-inbox me-1"></i>Inbox (@unreadCount)
                    </button>
                    
                    <button type="button" class="btn @(currentFolder == "sent" ? "btn-primary" : "btn-outline-primary")" 
                            @onclick='() => SwitchFolder("sent")'>
                        <i class="fas fa-paper-plane me-1"></i>Sent
                    </button>
                </div>
            </div>

            @if (isLoadingMessages)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm text-primary"></div>
                </div>
            }
            else if (filteredMessages?.Any() == true)
            {
                <div class="list-group">
                    @foreach (var message in filteredMessages)
                    {
                        <a href="#" class="list-group-item list-group-item-action @(selectedMessage?.Id == message.Id ? "active" : "") @(!message.IsRead && currentFolder == "inbox" ? "border-primary" : "")"
                           @onclick="() => SelectMessage(message)" @onclick:preventDefault="true">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1 @(!message.IsRead && currentFolder == "inbox" ? "fw-bold" : "")">
                                    @if (currentFolder == "inbox")
                                    {
                                        @message.FromUserName
                                    }
                                    else
                                    {
                                        @message.ToUserName
                                    }
                                </h6>
                                <small class="@(!message.IsRead && currentFolder == "inbox" ? "fw-bold" : "")">
                                    @message.SentAt.ToString("MMM dd")
                                </small>
                            </div>
                            <p class="mb-1 @(!message.IsRead && currentFolder == "inbox" ? "fw-bold" : "")">@message.Subject</p>
                            <small class="text-muted">
                                @if (message.Content.Length > 60)
                                {
                                    @(message.Content.Substring(0, 60) + "...")
                                }
                                else
                                {
                                    @message.Content
                                }
                            </small>
                            @if (!message.IsRead && currentFolder == "inbox")
                            {
                                <span class="badge bg-primary rounded-pill ms-2">New</span>
                            }
                            @if (GetMessagePriorityIcon(message.Priority) != null)
                            {
                                <i class="@GetMessagePriorityIcon(message.Priority) ms-2"></i>
                            }
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                    <p class="text-muted">No messages in @currentFolder</p>
                </div>
            }
        </div>

        <!-- Message Content -->
        <div class="col-md-8">
            @if (selectedMessage != null)
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0">@selectedMessage.Subject</h5>
                            <small class="text-muted">
                                From: @selectedMessage.FromUserName â€¢ 
                                @selectedMessage.SentAt.ToString("MMMM dd, yyyy 'at' h:mm tt")
                            </small>
                        </div>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="ReplyToMessage">
                                <i class="fas fa-reply me-1"></i>Reply
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="DeleteMessage">
                                <i class="fas fa-trash me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="message-content">
                            @((MarkupString)selectedMessage.Content.Replace("\n", "<br>"))
                        </div>
                        
                        @if (selectedMessage.Attachments?.Any() == true)
                        {
                            <div class="mt-3">
                                <h6>Attachments:</h6>
                                @foreach (var attachment in selectedMessage.Attachments)
                                {
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="fas fa-paperclip me-2"></i>
                                        <a href="#" class="text-decoration-none">@attachment.FileName</a>
                                        <small class="text-muted ms-2">(@FormatFileSize(attachment.FileSize))</small>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Replies -->
                @if (selectedMessage.Replies?.Any() == true)
                {
                    <div class="mt-3">
                        <h6>Replies:</h6>
                        @foreach (var reply in selectedMessage.Replies)
                        {
                            <div class="card mb-2">
                                <div class="card-body py-2">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <small class="fw-bold">@reply.FromUserName</small>
                                        <small class="text-muted">@reply.SentAt.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                                    </div>
                                    <div>@((MarkupString)reply.Content.Replace("\n", "<br>"))</div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-envelope-open-text fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">Select a message</h4>
                    <p class="text-muted">Choose a message from the list to read its content</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Compose Message Modal -->
@if (showComposeModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (replyToMessage != null)
                        {
                            <span>Reply to: @replyToMessage.Subject</span>
                        }
                        else
                        {
                            <span>Compose Message</span>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideComposeModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newMessage" OnValidSubmit="@SendMessage">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />
                        
                        @if (replyToMessage == null)
                        {
                            <div class="mb-3">
                                <label for="toUser" class="form-label">To</label>
                                <InputText id="toUser" class="form-control" @bind-Value="toUserSearch" placeholder="Search for a user..." />
                                @if (searchedUsers?.Any() == true)
                                {
                                    <div class="dropdown-menu show">
                                        @foreach (var user in searchedUsers.Take(5))
                                        {
                                            <a class="dropdown-item" href="#" @onclick="() => SelectRecipient(user)" @onclick:preventDefault="true">
                                                @user.UserName (@user.Email)
                                            </a>
                                        }
                                    </div>
                                }
                            </div>
                        }
                        
                        <div class="mb-3">
                            <label for="subject" class="form-label">Subject</label>
                            <InputText id="subject" class="form-control" @bind-Value="newMessage.Subject" />
                            <ValidationMessage For="@(() => newMessage.Subject)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="priority" class="form-label">Priority</label>
                            <InputSelect id="priority" class="form-select" @bind-Value="newMessage.Priority">
                                <option value="1">Low</option>
                                <option value="2">Normal</option>
                                <option value="3">High</option>
                                <option value="4">Urgent</option>
                            </InputSelect>
                        </div>
                        
                        <div class="mb-3">
                            <label for="content" class="form-label">Message</label>
                            <InputTextArea id="content" class="form-control" rows="6" @bind-Value="newMessage.Content" />
                            <ValidationMessage For="@(() => newMessage.Content)" />
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideComposeModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSending">
                                @if (isSending)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Send Message
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool isLoadingMessages = true;
    private bool isSending = false;
    private bool showComposeModal = false;
    private string currentFolder = "inbox";
    private string? currentUserId;
    private string toUserSearch = "";
    
    private List<MessageModel>? inboxMessages;
    private List<MessageModel>? sentMessages;
    private List<MessageModel>? filteredMessages;
    private List<UserModel>? searchedUsers;
    private MessageModel? selectedMessage;
    private MessageModel? replyToMessage;
    
    private CreateMessageRequest newMessage = new();
    private int unreadCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        try
        {
            isLoadingMessages = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    currentUserId = user.Id;
                    
                    // Load inbox and sent messages
                    inboxMessages = await MessageService.GetInboxMessagesAsync(user.Id);
                    sentMessages = await MessageService.GetSentMessagesAsync(user.Id);
                    
                    unreadCount = inboxMessages?.Count(m => !m.IsRead) ?? 0;
                    
                    FilterMessages();
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading messages:", ex.Message);
        }
        finally
        {
            isLoadingMessages = false;
        }
    }

    private void FilterMessages()
    {
        filteredMessages = currentFolder switch
        {
            "sent" => sentMessages,
            _ => inboxMessages
        };
    }

    private void SwitchFolder(string folder)
    {
        currentFolder = folder;
        FilterMessages();
        selectedMessage = null;
    }

    private async Task SelectMessage(MessageModel message)
    {
        selectedMessage = message;
        
        // Mark as read if it's an inbox message and not already read
        if (currentFolder == "inbox" && !message.IsRead && currentUserId != null)
        {
            try
            {
                await MessageService.MarkMessageAsReadAsync(message.Id, currentUserId);
                message.ReadAt = DateTime.UtcNow;
                unreadCount = Math.Max(0, unreadCount - 1);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Error marking message as read:", ex.Message);
            }
        }
    }

    private void ShowComposeModal()
    {
        replyToMessage = null;
        newMessage = new CreateMessageRequest();
        showComposeModal = true;
    }

    private void ReplyToMessage()
    {
        if (selectedMessage == null) return;
        
        replyToMessage = selectedMessage;
        newMessage = new CreateMessageRequest
        {
            Subject = selectedMessage.Subject.StartsWith("Re: ") ? selectedMessage.Subject : $"Re: {selectedMessage.Subject}",
            ToUserId = selectedMessage.FromUserId,
            ParentMessageId = selectedMessage.Id,
            Priority = 2
        };
        showComposeModal = true;
    }

    private void HideComposeModal()
    {
        showComposeModal = false;
        replyToMessage = null;
        newMessage = new CreateMessageRequest();
        toUserSearch = "";
        searchedUsers = null;
    }

    private async Task SendMessage()
    {
        if (currentUserId == null) return;

        try
        {
            isSending = true;
            await MessageService.SendMessageAsync(newMessage, currentUserId);
            
            await JSRuntime.InvokeVoidAsync("showToast", "Message sent successfully!", "success");
            HideComposeModal();
            await LoadMessages();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error sending message: {ex.Message}", "error");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task DeleteMessage()
    {
        if (selectedMessage == null || currentUserId == null) return;

        try
        {
            var success = await MessageService.DeleteMessageAsync(selectedMessage.Id, currentUserId);
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Message deleted successfully!", "success");
                selectedMessage = null;
                await LoadMessages();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Failed to delete message", "error");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error deleting message: {ex.Message}", "error");
        }
    }

    private void SelectRecipient(UserModel user)
    {
        newMessage.ToUserId = user.Id;
        toUserSearch = user.UserName;
        searchedUsers = null;
    }

    private string? GetMessagePriorityIcon(string priority)
    {
        return priority switch
        {
            "High" => "fas fa-exclamation text-warning",
            "Urgent" => "fas fa-exclamation-triangle text-danger",
            _ => null
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}lms/messages"
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Messages</h1>
</div>

<div class="row">
    <div class="col-12">
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i>
            This is the Messages component. It will handle private messaging between users.
        </div>
    </div>
</div>
