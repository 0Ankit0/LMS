@page "/user/lms/announcements/create"
@using LMS.Models.Communication
@using LMS.Models.Course
@using LMS.Services
@using LMS.Data
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IAnnouncementService AnnouncementService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create Announcement</PageTitle>

<div class="container py-4">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-megaphone me-2"></i>
                        <h4 class="mb-0">Create New Announcement</h4>
                    </div>
                </div>
                <div class="card-body">
                    <EditForm Model="@announcement" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />

                        <!-- Title -->
                        <div class="mb-3">
                            <label for="title" class="form-label fw-semibold">
                                Title <span class="text-danger">*</span>
                            </label>
                            <InputText id="title" class="form-control" @bind-Value="announcement.Title"
                                placeholder="Enter announcement title" />
                            <ValidationMessage For="@(() => announcement.Title)" class="text-danger" />
                        </div>

                        <!-- Content -->
                        <div class="mb-3">
                            <label for="content" class="form-label fw-semibold">
                                Content <span class="text-danger">*</span>
                            </label>
                            <InputTextArea id="content" class="form-control" rows="8" @bind-Value="announcement.Content"
                                placeholder="Write your announcement content here..." />
                            <ValidationMessage For="@(() => announcement.Content)" class="text-danger" />
                            <div class="form-text">Use clear and concise language for better readability.</div>
                        </div>

                        <!-- Type -->
                        <div class="mb-3">
                            <label for="type" class="form-label fw-semibold">
                                Type <span class="text-danger">*</span>
                            </label>
                            <InputSelect id="type" class="form-select" @bind-Value="announcement.Type">
                                <option value="@AnnouncementType.General">General</option>
                                <option value="@AnnouncementType.Event">Event</option>
                                <option value="@AnnouncementType.Deadline">Deadline</option>
                                <option value="@AnnouncementType.Alert">Alert</option>
                            </InputSelect>
                            <div class="form-text">Select the type of announcement.</div>
                        </div>

                        <!-- Priority -->
                        <div class="mb-3">
                            <label for="priority" class="form-label fw-semibold">Priority</label>
                            <InputSelect id="priority" class="form-select" @bind-Value="announcement.Priority">
                                <option value="@AnnouncementPriority.Low">Low</option>
                                <option value="@AnnouncementPriority.Normal">Normal</option>
                                <option value="@AnnouncementPriority.High">High</option>
                                <option value="@AnnouncementPriority.Critical">Critical</option>
                            </InputSelect>
                            <div class="form-text">High and Critical priorities will be highlighted to users.</div>
                        </div>

                        <!-- Course Selection -->
                        <div class="mb-3">
                            <label for="course" class="form-label fw-semibold">Target Audience</label>
                            <InputSelect id="course" class="form-select" @bind-Value="announcement.CourseId">
                                <option value="">All Users (General Announcement)</option>
                                @foreach (var course in availableCourses)
                                {
                                    <option value="@course.Id">@course.Title</option>
                                }
                            </InputSelect>
                            <div class="form-text">Leave blank to send to all users, or select a specific course.</div>
                        </div>

                        <!-- Expiry Date -->
                        <div class="mb-3">
                            <label for="expiryDate" class="form-label fw-semibold">Expiry Date (Optional)</label>
                            <InputDate id="expiryDate" class="form-control" @bind-Value="announcement.ExpiresAt" />
                            <div class="form-text">Select when this announcement should expire and be hidden.</div>
                        </div>

                        <!-- Tags -->
                        <div class="mb-3">
                            <label for="tags" class="form-label fw-semibold">Tags</label>
                            <InputText id="tags" class="form-control" @bind-Value="tagsInput"
                                placeholder="Enter tags separated by commas (e.g., important, deadline, update)" />
                            <div class="form-text">Use tags to help users categorize and find announcements.</div>
                        </div>

                        <!-- Email Notification -->
                        <div class="mb-4">
                            <div class="form-check">
                                <InputCheckbox id="sendEmail" class="form-check-input"
                                    @bind-Value="announcement.SendEmail" />
                                <label class="form-check-label" for="sendEmail">
                                    Send email notification to users
                                </label>
                            </div>
                            <div class="form-text">Users will receive an email notification about this announcement.
                            </div>
                        </div>

                        <!-- Preview Section -->
                        @if (showPreview)
                        {
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Preview</h5>
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <h5 class="card-title mb-0">@announcement.Title</h5>
                                            <div>
                                                <span
                                                    class="badge bg-@GetPriorityBadgeColor(announcement.Priority) me-1">@announcement.Priority</span>
                                                <span class="badge bg-info">@announcement.Type</span>
                                            </div>
                                        </div>
                                        <h6 class="card-subtitle mb-2 text-muted">
                                            @authorName
                                            <span class="mx-2">|</span>
                                            <small>@publishDate.ToString("g")</small>
                                            @if (announcement.CourseId.HasValue)
                                            {
                                                <span class="mx-2">|</span>
                                                <span class="badge bg-info">@GetCourseName(announcement.CourseId.Value)</span>
                                            }
                                        </h6>
                                        <p class="card-text" style="white-space: pre-line;">@announcement.Content</p>
                                        @if (!string.IsNullOrWhiteSpace(tagsInput))
                                        {
                                            <div class="mt-2">
                                                @foreach (var tag in GetTagsList())
                                                {
                                                    <span class="badge bg-secondary me-1">#@tag.Trim()</span>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between">
                            <div>
                                <button type="button" class="btn btn-outline-secondary me-2" @onclick="TogglePreview">
                                    <i class="bi bi-eye me-1"></i>
                                    @(showPreview ? "Hide Preview" : "Show Preview")
                                </button>
                            </div>
                            <div>
                                <button type="button" class="btn btn-secondary me-2" @onclick="Cancel">
                                    <i class="bi bi-x-circle me-1"></i> Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-check-circle me-1"></i>
                                    }
                                    Create Announcement
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
@if (showSuccessModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-check-circle me-2"></i>
                        Announcement Created Successfully!
                    </h5>
                </div>
                <div class="modal-body text-center">
                    <p class="mb-3">Your announcement has been created and published successfully.</p>
                    @if (announcement.SendEmail)
                    {
                        <p class="text-muted small">Email notifications are being sent to users.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CreateAnother">Create Another</button>
                    <button type="button" class="btn btn-primary" @onclick="GoToAnnouncements">View Announcements</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private CreateAnnouncementRequest announcement = new();
    private List<CourseModel> availableCourses = new();
    private string tagsInput = string.Empty;
    private bool isSubmitting = false;
    private bool showPreview = false;
    private bool showSuccessModal = false;
    private string authorName = "Current User"; // Replace with actual user
    private DateTime publishDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        // Initialize announcement with default values
        announcement.Priority = AnnouncementPriority.Normal;
        announcement.Type = AnnouncementType.General;
        announcement.SendEmail = true;

        // Load available courses
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        // Mock data - replace with actual course loading
        await Task.Delay(1); // Remove this line when implementing real data loading

        availableCourses = new List<CourseModel>
{
new CourseModel { Id = 1, Title = "Blazor Fundamentals" },
new CourseModel { Id = 2, Title = "Advanced C#" },
new CourseModel { Id = 3, Title = "Entity Framework Core" },
new CourseModel { Id = 4, Title = "ASP.NET Core Web API" }
};
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;

        try
        {
            // Create announcement (no need to set priority/type as they're already set via binding)
            await AnnouncementService.CreateAnnouncementAsync(announcement);

            showSuccessModal = true;
        }
        catch (Exception ex)
        {
            // Handle error (you might want to show an error message)
            Console.WriteLine($"Error creating announcement: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void TogglePreview()
    {
        showPreview = !showPreview;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/announcements");
    }

    private void CreateAnother()
    {
        showSuccessModal = false;
        announcement = new CreateAnnouncementRequest
        {
            Priority = AnnouncementPriority.Normal,
            Type = AnnouncementType.General,
            SendEmail = true
        };
        tagsInput = string.Empty;
        showPreview = false;
        publishDate = DateTime.Now;
    }

    private void GoToAnnouncements()
    {
        NavigationManager.NavigateTo("/announcements");
    }

    private string GetPriorityBadgeColor(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Low => "secondary",
            AnnouncementPriority.Normal => "primary",
            AnnouncementPriority.High => "warning",
            AnnouncementPriority.Critical => "danger",
            _ => "primary"
        };
    }

    private string GetCourseName(int courseId)
    {
        return availableCourses.FirstOrDefault(c => c.Id == courseId)?.Title ?? "Unknown Course";
    }

    private List<string> GetTagsList()
    {
        if (string.IsNullOrWhiteSpace(tagsInput))
            return new List<string>();

        return tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
        .Select(tag => tag.Trim())
        .Where(tag => !string.IsNullOrWhiteSpace(tag))
        .ToList();
    }
}

<style>
    .form-label.fw-semibold {
        color: #495057;
    }

    .card-header.bg-primary {
        border-bottom: 1px solid rgba(255, 255, 255, 0.125);
    }

    .badge {
        font-size: 0.75em;
    }

    .form-text {
        font-size: 0.875em;
        color: #6c757d;
    }

    .preview-section {
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        padding: 1rem;
    }
</style>