@page "/user/lms/forums"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components
@using global::LMS.Models.Communication
@using global::LMS.Models.Course
@using global::LMS.Models.User
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Forums - LMS</PageTitle>

<div class="forums-layout">
    <!-- Course Group Sidebar -->
    <div class="course-group-sidebar">
        <div class="group-list">
            <!-- General Group -->
            <div class="group-item @(selectedGroup == "general" ? "active" : "")" 
                 @onclick='() => SelectGroup("general")'
                 title="General Discussion">
                <div class="group-icon general-icon">
                    <i class="bi bi-globe"></i>
                </div>
            </div>

            <!-- Course Groups -->
            @if (courseGroups != null)
            {
                @foreach (var courseGroup in courseGroups)
                {
                    <div class="group-item @(selectedGroup == courseGroup.CourseName ? "active" : "")" 
                         @onclick="() => SelectGroup(courseGroup.CourseName)"
                         title="@courseGroup.CourseName">
                        <div class="group-icon course-icon">
                            <span class="course-initial">@courseGroup.CourseName.FirstOrDefault()</span>
                        </div>
                    </div>
                }
            }
        </div>
        
        <!-- Add Forum Button -->
        <div class="group-item add-forum-button" @onclick="ShowCreateForumModal" title="Create New Forum">
            <div class="group-icon">
                <i class="bi bi-plus-lg"></i>
            </div>
        </div>
    </div>

    <!-- Forum List Sidebar -->
    <div class="forum-list-sidebar">
        @if (!string.IsNullOrEmpty(selectedGroup))
        {
            <div class="forum-header">
                <h4 class="forum-title">
                    @if (selectedGroup == "general")
                    {
                        <i class="bi bi-globe me-2"></i>
                        <span>General Discussion</span>
                    }
                    else
                    {
                        <i class="bi bi-mortarboard me-2"></i>
                        <span>@selectedGroup</span>
                    }
                </h4>
                <!-- Search Box -->
                <div class="forum-search-container">
                    <input type="text" class="forum-search-input" placeholder="Search forums & topics..." 
                           @bind="searchQuery" @oninput="OnSearchInput" />
                    <i class="bi bi-search search-icon"></i>
                </div>
            </div>
            
            <div class="forum-list">
                @if (selectedGroupForums != null)
                {
                    @foreach (var forum in selectedGroupForums)
                    {
                        <div class="forum-accordion">
                            <div class="forum-item @(selectedForumId == forum.Id ? "active" : "")" 
                                 @onclick="() => SelectForum(forum.Id)">
                                <div class="forum-info">
                                    <div class="forum-name">
                                        <i class="bi bi-hash me-2"></i>
                                        <span>@forum.Title</span>
                                    </div>
                                    <div class="forum-stats">
                                        <small class="text-muted">@forum.TopicCount topics</small>
                                    </div>
                                </div>
                                <div class="forum-actions">
                                    <button class="btn btn-sm btn-ghost add-topic-btn" 
                                            @onclick="(e) => ShowNewTopicModal(e, forum.Id)" 
                                            @onclick:stopPropagation="true"
                                            title="Add new topic">
                                        <i class="bi bi-plus-lg"></i>
                                    </button>
                                    <button class="btn btn-sm btn-ghost expand-btn" 
                                            @onclick="(e) => ToggleForumExpansion(e, forum.Id)"
                                            @onclick:stopPropagation="true">
                                        <i class="bi @(expandedForums.Contains(forum.Id) ? "bi-chevron-up" : "bi-chevron-down")"></i>
                                    </button>
                                </div>
                            </div>
                            
                            @if (expandedForums.Contains(forum.Id) && selectedForumTopics != null)
                            {
                                <div class="topics-dropdown">
                                    @foreach (var topic in selectedForumTopics.Where(t => t.ForumId == forum.Id))
                                    {
                                        <div class="topic-dropdown-item @(selectedTopicId == topic.Id ? "active" : "")" 
                                             @onclick="() => SelectTopic(topic.Id)">
                                            <div class="topic-info">
                                                <div class="topic-icon">
                                                    @if (topic.IsLocked)
                                                    {
                                                        <i class="bi bi-lock text-secondary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-chat-dots text-primary"></i>
                                                    }
                                                </div>
                                                <div class="topic-details">
                                                    <div class="topic-title">@topic.Title</div>
                                                    <div class="topic-meta">
                                                        <small class="text-muted">@topic.PostCount posts</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <div class="forum-placeholder">
                <i class="bi bi-chat-dots fa-3x text-muted mb-3"></i>
                <p class="text-muted">Select a group to view forums</p>
            </div>
        }
    </div>

    <!-- Main Discussion Area -->
    <div class="discussion-area">
        @if (selectedForumId.HasValue && selectedForum != null)
        {
            @if (selectedTopicId.HasValue && selectedTopic != null)
            {
                <!-- Topic View Header -->
                <div class="discussion-header">
                    <div class="discussion-title">
                        <button class="btn btn-sm btn-ghost me-2" @onclick="BackToForum" title="Back to Forum">
                            <i class="bi bi-arrow-left"></i>
                        </button>
                        @if (selectedTopic?.IsLocked == true)
                        {
                            <i class="bi bi-lock me-2 text-secondary"></i>
                        }
                        else
                        {
                            <i class="bi bi-chat-dots me-2"></i>
                        }
                        <span>@selectedTopic?.Title</span>
                    </div>
                    <div class="discussion-actions">
                        <div class="topic-stats me-3">
                            <small class="text-muted">
                                <i class="bi bi-chat-left me-1"></i>@selectedTopic?.PostCount posts
                                <span class="ms-2"><i class="bi bi-person me-1"></i>by @selectedTopic?.CreatedByUserName</span>
                            </small>
                        </div>
                        <button class="btn btn-sm btn-outline-secondary me-2" title="Search in Topic">
                            <i class="bi bi-search"></i>
                        </button>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#"><i class="bi bi-lock me-2"></i>Lock Topic</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="#"><i class="bi bi-trash me-2"></i>Delete Topic</a></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Topic Posts - Scrollable -->
                <div class="content-area" id="messagesArea">
                    @if (selectedTopicPosts != null)
                    {
                        @foreach (var post in selectedTopicPosts)
                        {
                            <div class="content-item topic-post">
                                <div class="user-avatar">
                                    <div class="avatar-circle">
                                        <span>@post.AuthorName?.FirstOrDefault()</span>
                                    </div>
                                </div>
                                <div class="content-body post-content">
                                    <div class="content-header">
                                        <span class="author-name">@(post.AuthorName ?? "Unknown")</span>
                                        <span class="post-time">@post.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                        @if (post.UpdatedAt.HasValue && post.UpdatedAt != post.CreatedAt)
                                        {
                                            <span class="text-muted small">(edited @post.UpdatedAt.Value.ToString("MMM dd, HH:mm"))</span>
                                        }
                                    </div>
                                    <div class="content-text post-text">
                                        @((MarkupString)post.Content.Replace("\n", "<br />"))
                                    </div>
                                    <div class="post-actions">
                                        <button class="btn btn-sm btn-ghost" title="Like">
                                            <i class="bi bi-heart me-1"></i>0
                                        </button>
                                        <button class="btn btn-sm btn-ghost" @onclick="() => QuotePost(post)" title="Quote">
                                            <i class="bi bi-quote me-1"></i>Quote
                                        </button>
                                        @if (currentUserId == post.AuthorId)
                                        {
                                            <button class="btn btn-sm btn-ghost" @onclick="() => EditPost(post)" title="Edit">
                                                <i class="bi bi-pencil me-1"></i>Edit
                                            </button>
                                            <button class="btn btn-sm btn-ghost text-danger" @onclick="() => DeletePost(post)" title="Delete">
                                                <i class="bi bi-trash me-1"></i>Delete
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                <!-- Quick Reply - Sticky Bottom -->
                @if (selectedTopic?.IsLocked != true)
                {
                    <div class="input-area">
                        @if (!string.IsNullOrEmpty(quotedText))
                        {
                            <div class="quoted-text">
                                <div class="quote-header">
                                    <span>Replying to @quotedAuthor:</span>
                                    <button class="btn btn-sm btn-ghost" @onclick="ClearQuote">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                                <div class="quote-content">@quotedText</div>
                            </div>
                        }
                        <div class="input-container">
                            <input type="text" class="message-input" placeholder="Reply to @selectedTopic?.Title..." 
                                   @bind="newTopicReply" @onkeypress="HandleTopicReplyKeyPress" />
                            <button class="send-button" @onclick="SendTopicReply" disabled="@string.IsNullOrWhiteSpace(newTopicReply)">
                                <i class="bi bi-send"></i>
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <!-- Forum Topics View -->
                <div class="discussion-header">
                    <div class="discussion-title">
                        <i class="bi bi-hash me-2"></i>
                        <span>@selectedForum.Title</span>
                    </div>
                    <div class="discussion-actions">
                        <div class="forum-stats me-3">
                            <small class="text-muted">
                                <i class="bi bi-list me-1"></i>@selectedForum.TopicCount topics
                                <span class="ms-2"><i class="bi bi-people me-1"></i>@(selectedForumTopics?.SelectMany(t => new[] { t.CreatedByUserId }).Distinct().Count() ?? 0) contributors</span>
                            </small>
                        </div>
                        <button class="btn btn-sm btn-outline-secondary me-2" title="Search Topics">
                            <i class="bi bi-search"></i>
                        </button>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-sort-down"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#"><i class="bi bi-calendar me-2"></i>Sort by Date</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-reply me-2"></i>Sort by Replies</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-person me-2"></i>Sort by Author</a></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Topics List -->
                <div class="content-area topics-area" id="topicsArea">
                    @if (selectedForumTopics != null && selectedForumTopics.Any())
                    {
                        @foreach (var topic in selectedForumTopics)
                        {
                            <div class="topic-item" @onclick="() => SelectTopic(topic.Id)">
                                <div class="topic-icon">
                                    @if (topic.IsLocked)
                                    {
                                        <i class="bi bi-lock text-secondary"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-chat-dots text-primary"></i>
                                    }
                                </div>
                                <div class="topic-content">
                                    <div class="topic-header">
                                        <h6 class="topic-title">@topic.Title</h6>
                                        <div class="topic-badges">
                                            @if (topic.IsLocked)
                                            {
                                                <span class="badge bg-secondary">Locked</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="topic-meta">
                                        <span class="topic-author">by <strong>@topic.CreatedByUserName</strong></span>
                                        <span class="topic-date">@topic.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        @if (topic.LastPostAt.HasValue)
                                        {
                                            <span class="topic-last-post">Last: @topic.LastPostAt.Value.ToString("MMM dd, HH:mm")</span>
                                        }
                                    </div>
                                </div>
                                <div class="topic-stats">
                                    <div class="post-count">
                                        <span class="count">@topic.PostCount</span>
                                        <small>posts</small>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="content-placeholder">
                            <i class="bi bi-chat-dots fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">No Topics Yet</h5>
                            <p class="text-muted">Be the first to start a discussion in this forum!</p>
                        </div>
                    }
                </div>
            }


        }
        else
        {
            <div class="chat-placeholder p-4">
                <i class="fas fa-comments fa-5x text-muted mb-4"></i>
                <h3 class="text-muted mb-2 ">Welcome to Forums</h3>
                <p class="text-muted">Select a forum from the sidebar to view topics and discussions</p>
            </div>
        }
    </div>
</div>

<!-- New Topic Modal -->
@if (showNewTopicModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-plus-circle me-2"></i>Create New Topic
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideNewTopicModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newTopic" OnValidSubmit="@CreateTopic">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="mb-3">
                            <label for="topicTitle" class="form-label fw-semibold">
                                <i class="fas fa-heading me-1"></i>Topic Title
                            </label>
                            <InputText id="topicTitle" class="form-control form-control-lg" @bind-Value="newTopic.Title" 
                                       placeholder="Enter an engaging topic title..." />
                            <ValidationMessage For="@(() => newTopic.Title)" />
                        </div>

                        <div class="mb-3">
                            <label for="topicContent" class="form-label fw-semibold">
                                <i class="bi bi-text-paragraph me-1"></i>Initial Post Content
                            </label>
                            <InputTextArea id="topicContent" class="form-control" rows="8" @bind-Value="newTopic.InitialPost" 
                                           placeholder="Start the discussion with your thoughts..." />
                            <ValidationMessage For="@(() => newTopic.InitialPost)" />
                            <div class="form-text">You can use basic formatting: **bold**, *italic*, `code`</div>
                        </div>

                        <div class="modal-footer border-0 px-0 mt-3">
                            <button type="button" class="btn btn-light" @onclick="HideNewTopicModal">
                                <i class="bi bi-x-lg me-1"></i>Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isCreatingTopic">
                                @if (isCreatingTopic)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Creating...</span>
                                }
                                else
                                {
                                    <i class="bi bi-plus-lg me-1"></i>
                                    <span>Create Topic</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- New Post Modal -->
@if (showNewPostModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-reply me-2"></i>Reply to: @selectedTopic?.Title
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideNewPostModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newPost" OnValidSubmit="@CreatePost">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        @if (!string.IsNullOrEmpty(quotedText))
                        {
                            <div class="quote-preview mb-3">
                                <div class="quote-header">
                                    <strong>@quotedAuthor wrote:</strong>
                                    <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="ClearQuote">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <div class="quote-body">@quotedText</div>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="postContent" class="form-label fw-semibold">
                                <i class="fas fa-align-left me-1"></i>Your Reply
                            </label>
                            <InputTextArea id="postContent" class="form-control" rows="8" @bind-Value="newPost.Content" 
                                           placeholder="Share your thoughts..." />
                            <ValidationMessage For="@(() => newPost.Content)" />
                            <div class="form-text">You can use basic formatting: **bold**, *italic*, `code`</div>
                        </div>

                        <div class="modal-footer border-0 px-0">
                            <button type="button" class="btn btn-light" @onclick="HideNewPostModal">
                                <i class="fas fa-times me-1"></i>Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isCreatingPost">
                                @if (isCreatingPost)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Posting...</span>
                                }
                                else
                                {
                                    <i class="fas fa-reply me-1"></i>
                                    <span>Post Reply</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Create Forum Modal -->
@if (showCreateModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-plus-circle me-2"></i>Create New Forum
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideCreateModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newForum" OnValidSubmit="@CreateForum">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label for="title" class="form-label fw-semibold">
                                        <i class="fas fa-heading me-1"></i>Forum Title
                                    </label>
                                    <InputText id="title" class="form-control form-control-lg" @bind-Value="newForum.Title" placeholder="Enter forum title..." />
                                    <ValidationMessage For="@(() => newForum.Title)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="courseId" class="form-label fw-semibold">
                                        <i class="fas fa-graduation-cap me-1"></i>Course
                                    </label>
                                    <InputSelect id="courseId" class="form-select form-select-lg" @bind-Value="newForum.CourseId">
                                        <option value="">General Forum</option>
                                        @if (availableCourses != null)
                                        {
                                            @foreach (var course in availableCourses)
                                            {
                                                <option value="@course.Id">@course.Title</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label fw-semibold">
                                <i class="fas fa-align-left me-1"></i>Description
                            </label>
                            <InputTextArea id="description" class="form-control" rows="4" @bind-Value="newForum.Description" placeholder="Describe what this forum is about..." />
                            <ValidationMessage For="@(() => newForum.Description)" />
                        </div>

                        <div class="modal-footer border-0 px-0">
                            <button type="button" class="btn btn-light" @onclick="HideCreateModal">
                                <i class="fas fa-times me-1"></i>Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isCreating">
                                @if (isCreating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>
                                        Creating...
                                    </span>
                                }
                                else
                                {
                                    <i class="fas fa-plus me-1"></i>
                                    <span>Create Forum</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = false;
    private bool isCreating = false;
    private bool showCreateModal = false;
    private string? currentUserId;
    private string newMessage = "";
    private string newTopicReply = "";
    private string searchQuery = "";

    // Enhanced forum features
    private bool showNewTopicModal = false;
    private bool showNewPostModal = false;
    private bool isCreatingTopic = false;
    private bool isCreatingPost = false;
    
    // Topic and post management
    private int? selectedTopicId;
    private ForumTopicModel? selectedTopic;
    private List<ForumTopicModel>? selectedForumTopics;
    private List<ForumPostModel>? selectedTopicPosts;
    private string quotedText = "";
    private string quotedAuthor = "";

    // Discord-like state management
    private string selectedGroup = "";
    private int? selectedForumId;
    private ForumModel? selectedForum;
    private List<ForumModel>? selectedGroupForums;
    private List<CourseGroup>? courseGroups;
    private List<ForumMessage>? forumMessages;
    private HashSet<int> expandedForums = new HashSet<int>();

    private List<ForumModel>? forums;
    private List<ForumTopicModel>? recentTopics;
    private List<CourseModel>? availableCourses;
    private CreateForumRequest newForum = new();
    private CreateForumTopicRequest newTopic = new();
    private CreateForumPostRequest newPost = new();

    // Supporting classes
    public class CourseGroup
    {
        public string CourseName { get; set; } = "";
        public int ForumCount { get; set; }
    }

    public class ForumMessage
    {
        public int Id { get; set; }
        public int ForumId { get; set; }
        public string UserId { get; set; } = "";
        public string UserName { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime CreatedAt { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadForumData();
    }

    private async Task LoadForumData()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                currentUserId = user?.Id;
            }

            // Load dummy data
            forums = GenerateDummyForums();
            courseGroups = GenerateDummyCourseGroups();
            recentTopics = GenerateDummyTopics();
            availableCourses = GenerateDummyCourses();

            // Select general by default
            SelectGroup("general");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error loading forum data: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        // Here you would implement search logic
        // For now, just update the searchQuery
    }

    private void ToggleForumExpansion(MouseEventArgs e, int forumId)
    {
        if (expandedForums.Contains(forumId))
        {
            expandedForums.Remove(forumId);
        }
        else
        {
            expandedForums.Add(forumId);
            // Load topics for this forum
            LoadTopicsForForum(forumId);
        }
    }

    private void LoadTopicsForForum(int forumId)
    {
        // Load topics for the specific forum
        selectedForumTopics = recentTopics?.Where(t => t.ForumId == forumId).ToList();
    }

    private void SelectGroup(string groupName)
    {
        selectedGroup = groupName;
        selectedForumId = null;
        selectedForum = null;
        selectedTopicId = null;
        selectedTopic = null;
        forumMessages = null;
        
        if (groupName == "general")
        {
            selectedGroupForums = forums?.Where(f => f.IsGeneral).ToList();
        }
        else
        {
            selectedGroupForums = forums?.Where(f => f.CourseName == groupName).ToList();
        }
    }

    private void SelectForum(int forumId)
    {
        selectedForumId = forumId;
        selectedForum = forums?.FirstOrDefault(f => f.Id == forumId);
        selectedTopicId = null;
        selectedTopic = null;
        
        if (selectedForum != null)
        {
            selectedForumTopics = recentTopics?.Where(t => t.ForumId == forumId).ToList();
            forumMessages = GenerateDummyMessages(forumId);
        }
    }

    private void SelectTopic(int topicId)
    {
        selectedTopicId = topicId;
        
        // Find the topic in all topics, not just the selected forum topics
        selectedTopic = recentTopics?.FirstOrDefault(t => t.Id == topicId);
        
        if (selectedTopic != null)
        {
            // Ensure the forum is selected if we're selecting a topic
            if (selectedForumId != selectedTopic.ForumId)
            {
                selectedForumId = selectedTopic.ForumId;
                selectedForum = forums?.FirstOrDefault(f => f.Id == selectedTopic.ForumId);
                selectedForumTopics = recentTopics?.Where(t => t.ForumId == selectedTopic.ForumId).ToList();
            }
            
            selectedTopicPosts = GenerateDummyTopicPosts(topicId);
        }
    }

    private void BackToForum()
    {
        selectedTopicId = null;
        selectedTopic = null;
        selectedTopicPosts = null;
    }

    private void ShowNewTopicModal()
    {
        if (selectedForumId.HasValue)
        {
            newTopic = new CreateForumTopicRequest { ForumId = selectedForumId.Value };
            showNewTopicModal = true;
        }
    }

    private void ShowNewTopicModal(MouseEventArgs e, int forumId)
    {
        newTopic = new CreateForumTopicRequest { ForumId = forumId };
        showNewTopicModal = true;
    }

    private void HideNewTopicModal()
    {
        showNewTopicModal = false;
        newTopic = new CreateForumTopicRequest();
    }

    private void ShowNewPostModal()
    {
        if (selectedTopicId.HasValue)
        {
            newPost = new CreateForumPostRequest { TopicId = selectedTopicId.Value };
            showNewPostModal = true;
        }
    }

    private void HideNewPostModal()
    {
        showNewPostModal = false;
        newPost = new CreateForumPostRequest();
    }

    private void QuotePost(ForumPostModel post)
    {
        quotedText = post.Content;
        quotedAuthor = post.AuthorName;
    }

    private void ClearQuote()
    {
        quotedText = "";
        quotedAuthor = "";
    }

    private async Task EditPost(ForumPostModel post)
    {
        // Implement edit functionality
        await JSRuntime.InvokeVoidAsync("showToast", "Edit functionality not implemented yet", "info");
    }

    private async Task DeletePost(ForumPostModel post)
    {
        // Implement delete functionality
        await JSRuntime.InvokeVoidAsync("showToast", "Delete functionality not implemented yet", "info");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || !selectedForumId.HasValue) return;

        try
        {
            // Simulate sending message
            await Task.Delay(500);
            
            var message = new ForumMessage
            {
                Id = (forumMessages?.Count ?? 0) + 1,
                ForumId = selectedForumId.Value,
                Content = newMessage,
                UserName = "Current User",
                CreatedAt = DateTime.Now
            };

            forumMessages?.Add(message);
            newMessage = "";
            
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "messagesArea");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error sending message: {ex.Message}", "error");
        }
    }

    private async Task SendTopicReply()
    {
        if (string.IsNullOrWhiteSpace(newTopicReply) || !selectedTopicId.HasValue) return;

        try
        {
            // Simulate sending reply
            await Task.Delay(500);
            
            var reply = new ForumPostModel
            {
                Id = (selectedTopicPosts?.Count ?? 0) + 1,
                TopicId = selectedTopicId.Value,
                Content = !string.IsNullOrEmpty(quotedText) ? $"[Quote from {quotedAuthor}]: {quotedText}\n\n{newTopicReply}" : newTopicReply,
                AuthorId = currentUserId ?? "",
                AuthorName = "Current User",
                CreatedAt = DateTime.Now
            };

            selectedTopicPosts?.Add(reply);
            newTopicReply = "";
            ClearQuote();
            
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "messagesArea");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error sending reply: {ex.Message}", "error");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task HandleTopicReplyKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendTopicReply();
        }
    }

    private async Task CreateTopic()
    {
        if (currentUserId == null) return;

        try
        {
            isCreatingTopic = true;

            // Simulate API call delay
            await Task.Delay(1000);

            // Create new topic with dummy data
            var newTopicModel = new ForumTopicModel
            {
                Id = (recentTopics?.Count ?? 0) + 1,
                Title = newTopic.Title,
                ForumId = newTopic.ForumId,
                ForumTitle = selectedForum?.Title ?? "",
                CreatedByUserId = currentUserId,
                CreatedByUserName = "Current User",
                IsLocked = false,
                CreatedAt = DateTime.Now,
                LastPostAt = DateTime.Now,
                PostCount = 1
            };

            recentTopics?.Add(newTopicModel);
            selectedForumTopics?.Add(newTopicModel);

            await JSRuntime.InvokeVoidAsync("showToast", "Topic created successfully!", "success");
            HideNewTopicModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error creating topic: {ex.Message}", "error");
        }
        finally
        {
            isCreatingTopic = false;
        }
    }

    private async Task CreatePost()
    {
        if (currentUserId == null) return;

        try
        {
            isCreatingPost = true;

            // Simulate API call delay
            await Task.Delay(1000);

            // Create new post with dummy data
            var newPostModel = new ForumPostModel
            {
                Id = (selectedTopicPosts?.Count ?? 0) + 1,
                TopicId = newPost.TopicId,
                Content = newPost.Content,
                AuthorId = currentUserId,
                AuthorName = "Current User",
                CreatedAt = DateTime.Now
            };

            selectedTopicPosts?.Add(newPostModel);

            await JSRuntime.InvokeVoidAsync("showToast", "Post created successfully!", "success");
            HideNewPostModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error creating post: {ex.Message}", "error");
        }
        finally
        {
            isCreatingPost = false;
        }
    }

    private List<ForumPostModel> GenerateDummyTopicPosts(int topicId)
    {
        return new List<ForumPostModel>
        {
            new ForumPostModel
            {
                Id = 1,
                TopicId = topicId,
                Content = "Welcome to this discussion! I'm excited to hear everyone's thoughts on this topic. Please feel free to share your experiences and ask questions.",
                AuthorId = "instructor1",
                AuthorName = "John Instructor",
                CreatedAt = DateTime.Now.AddDays(-2)
            },
            new ForumPostModel
            {
                Id = 2,
                TopicId = topicId,
                Content = "Thank you for starting this discussion! I have some thoughts I'd like to share. **This is really important** for understanding the core concepts.",
                AuthorId = "student1",
                AuthorName = "Sarah Martinez",
                CreatedAt = DateTime.Now.AddDays(-1)
            },
            new ForumPostModel
            {
                Id = 3,
                TopicId = topicId,
                Content = "I agree with the previous points. Here's my perspective on this matter...\n\nI think we should also consider the practical applications of what we're learning.",
                AuthorId = "student2",
                AuthorName = "Mike Johnson",
                CreatedAt = DateTime.Now.AddHours(-4),
                UpdatedAt = DateTime.Now.AddHours(-2)
            }
        };
    }

    private List<ForumModel> GenerateDummyForums()
    {
        return new List<ForumModel>
        {
            // General Forums
            new ForumModel
            {
                Id = 1,
                Title = "General Discussion",
                Description = "Welcome to our general discussion forum!",
                IsGeneral = true,
                IsActive = true,
                CreatedAt = DateTime.Now.AddDays(-30),
                TopicCount = 45,
                LastPostAt = DateTime.Now.AddHours(-2)
            },
            new ForumModel
            {
                Id = 2,
                Title = "Study Groups & Collaboration",
                Description = "Find study partners and collaborate on projects.",
                IsGeneral = true,
                IsActive = true,
                CreatedAt = DateTime.Now.AddDays(-25),
                TopicCount = 23,
                LastPostAt = DateTime.Now.AddHours(-1)
            },
            // Course-specific Forums
            new ForumModel
            {
                Id = 5,
                Title = "Course Discussion",
                Description = "General discussion about Blazor Fundamentals course content.",
                CourseId = 1,
                CourseName = "Blazor Fundamentals",
                IsGeneral = false,
                IsActive = true,
                CreatedAt = DateTime.Now.AddDays(-28),
                TopicCount = 89,
                LastPostAt = DateTime.Now.AddMinutes(-15)
            },
            new ForumModel
            {
                Id = 6,
                Title = "Assignment Help",
                Description = "Get help with assignments and course projects.",
                CourseId = 1,
                CourseName = "Blazor Fundamentals",
                IsGeneral = false,
                IsActive = true,
                CreatedAt = DateTime.Now.AddDays(-28),
                TopicCount = 156,
                LastPostAt = DateTime.Now.AddMinutes(-45)
            }
        };
    }

    private List<CourseGroup> GenerateDummyCourseGroups()
    {
        return new List<CourseGroup>
        {
            new CourseGroup { CourseName = "Blazor Fundamentals", ForumCount = 3 },
            new CourseGroup { CourseName = "Advanced C# Programming", ForumCount = 2 },
            new CourseGroup { CourseName = "Web Development Masterclass", ForumCount = 4 }
        };
    }

    private List<ForumTopicModel> GenerateDummyTopics()
    {
        return new List<ForumTopicModel>
        {
            new ForumTopicModel
            {
                Id = 1,
                Title = "Welcome to Blazor Development",
                ForumId = 5,
                ForumTitle = "Course Discussion",
                CreatedByUserId = "instructor1",
                CreatedByUserName = "John Instructor",
                IsLocked = false,
                CreatedAt = DateTime.Now.AddDays(-5),
                LastPostAt = DateTime.Now.AddHours(-2),
                PostCount = 34
            },
            new ForumTopicModel
            {
                Id = 2,
                Title = "Help with Component Data Binding",
                ForumId = 6,
                ForumTitle = "Assignment Help",
                CreatedByUserId = "user2",
                CreatedByUserName = "Sarah Martinez",
                IsLocked = false,
                CreatedAt = DateTime.Now.AddHours(-3),
                LastPostAt = DateTime.Now.AddMinutes(-45),
                PostCount = 12
            }
        };
    }

    private List<CourseModel> GenerateDummyCourses()
    {
        return new List<CourseModel>
        {
            new CourseModel
            {
                Id = 1,
                Title = "Blazor Fundamentals",
                Description = "Learn the basics of Blazor development"
            },
            new CourseModel
            {
                Id = 2,
                Title = "Advanced C# Programming",
                Description = "Deep dive into advanced C# concepts"
            }
        };
    }

    private List<ForumMessage> GenerateDummyMessages(int forumId)
    {
        var messages = new List<ForumMessage>();
        var userNames = new[] { "John Instructor", "Sarah Martinez", "Mike Johnson", "Emma Wilson" };
        var random = new Random();

        for (int i = 1; i <= 10; i++)
        {
            var user = userNames[random.Next(userNames.Length)];
            messages.Add(new ForumMessage
            {
                Id = i,
                ForumId = forumId,
                UserId = $"user{i}",
                UserName = user,
                Content = $"This is message {i} in the forum discussion.",
                CreatedAt = DateTime.Now.AddDays(-random.Next(1, 10)).AddHours(-random.Next(0, 24))
            });
        }

        return messages.OrderBy(m => m.CreatedAt).ToList();
    }

    private void ShowCreateForumModal()
    {
        if (availableCourses == null)
        {
            availableCourses = GenerateDummyCourses();
        }
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
        newForum = new CreateForumRequest();
    }

    private async Task CreateForum()
    {
        if (currentUserId == null) return;

        try
        {
            isCreating = true;
            await Task.Delay(1000);

            var newForumModel = new ForumModel
            {
                Id = forums?.Count + 1 ?? 1,
                Title = newForum.Title,
                Description = newForum.Description,
                CourseId = newForum.CourseId,
                CourseName = newForum.CourseId.HasValue ? availableCourses?.FirstOrDefault(c => c.Id == newForum.CourseId)?.Title : null,
                IsGeneral = !newForum.CourseId.HasValue,
                IsActive = true,
                CreatedAt = DateTime.Now,
                TopicCount = 0,
                LastPostAt = null
            };

            forums?.Add(newForumModel);
            await JSRuntime.InvokeVoidAsync("showToast", "Forum created successfully!", "success");
            HideCreateModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error creating forum: {ex.Message}", "error");
        }
        finally
        {
            isCreating = false;
        }
    }

    // ...existing code...
}

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>