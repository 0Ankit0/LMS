@page "/user/lms/achievements"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@using LMS.Data
@using LMS.Models.User
@using LMS.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject IAchievementService AchievementService
@inject ILeaderboardService LeaderboardService
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2"><i class="fas fa-trophy me-2"></i>Achievements</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <div class="btn-group me-2" role="group">
                <button type="button" class="btn @(currentTab == "earned" ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="@(() => SwitchTab("earned"))">
                    <i class="fas fa-medal me-1"></i>Earned (@earnedCount)
                </button>
                <button type="button" class="btn @(currentTab == "available" ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="@(() => SwitchTab("available"))">
                    <i class="fas fa-target me-1"></i>Available (@availableCount)
                </button>
                <button type="button" class="btn @(currentTab == "leaderboard" ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="@(() => SwitchTab("leaderboard"))">
                    <i class="fas fa-chart-line me-1"></i>Leaderboard
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading achievements...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-3 mb-3">
                <div class="card bg-primary text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-trophy fa-2x mb-2"></i>
                        <h4>@earnedCount</h4>
                        <p class="mb-0">Earned</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card bg-success text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-star fa-2x mb-2"></i>
                        <h4>@totalPoints</h4>
                        <p class="mb-0">Total Points</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-target fa-2x mb-2"></i>
                        <h4>@availableCount</h4>
                        <p class="mb-0">Available</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card bg-warning text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-chart-line fa-2x mb-2"></i>
                        <h4>#@userRank</h4>
                        <p class="mb-0">Rank</p>
                    </div>
                </div>
            </div>
        </div>

        @if (currentTab == "earned")
        {
            <div class="row">
                @if (earnedAchievements?.Any() == true)
                {
                    @foreach (var achievement in earnedAchievements)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 border-success">
                                <div class="card-body text-center">
                                    <div class="achievement-icon mb-3" style="background-color: @achievement.BadgeColor">
                                        @if (!string.IsNullOrEmpty(achievement.AchievementIconUrl))
                                        {
                                            <img src="@achievement.AchievementIconUrl" alt="@achievement.AchievementName" class="img-fluid">
                                        }
                                        else
                                        {
                                            <i class="fas fa-trophy fa-2x text-white"></i>
                                        }
                                    </div>
                                    <h5 class="card-title">@achievement.AchievementName</h5>
                                    <p class="card-text text-muted">@achievement.AchievementDescription</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="badge bg-success">@achievement.Points pts</span>
                                        <small class="text-muted">Earned @achievement.EarnedAt ?? @achievement.EarnedAt.ToString("MMM dd, yyyy") : "Not found"</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <div class="text-center py-5">
                            <i class="fas fa-medal fa-4x text-muted mb-3"></i>
                            <h4 class="text-muted">No achievements earned yet</h4>
                            <p class="text-muted">Complete courses and activities to earn your first achievement!</p>
                        </div>
                    </div>
                }
            </div>
        }
        else if (currentTab == "available")
        {
            <div class="row">
                @if (availableAchievements?.Any() == true)
                {
                    @foreach (var achievement in availableAchievements)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-body text-center">
                                    <div class="achievement-icon mb-3 opacity-50" style="background-color: @achievement.BadgeColor">
                                        @if (!string.IsNullOrEmpty(achievement.IconUrl))
                                        {
                                            <img src="@achievement.IconUrl" alt="@achievement.Name" class="img-fluid">
                                        }
                                        else
                                        {
                                            <i class="fas fa-trophy fa-2x text-white"></i>
                                        }
                                    </div>
                                    <h5 class="card-title">@achievement.Name</h5>
                                    <p class="card-text text-muted">@achievement.Description</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="badge bg-outline-primary">@achievement.Points pts</span>
                                        <small class="text-muted">@achievement.Type</small>
                                    </div>
                                    @if (!string.IsNullOrEmpty(achievement.Criteria))
                                    {
                                        <div class="mt-2">
                                            <small class="text-info">
                                                <i class="fas fa-info-circle me-1"></i>@achievement.Criteria
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <div class="text-center py-5">
                            <i class="fas fa-target fa-4x text-muted mb-3"></i>
                            <h4 class="text-muted">No available achievements</h4>
                            <p class="text-muted">All achievements have been earned! Great job!</p>
                        </div>
                    </div>
                }
            </div>
        }
        else if (currentTab == "leaderboard")
        {
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Achievement Leaderboard</h5>
                </div>
                <div class="card-body">
                    @if (leaderboardEntries?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Rank</th>
                                        <th>User</th>
                                        <th>Total Points</th>
                                        <th>Achievements</th>
                                        <th>Latest Achievement</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var entry in leaderboardEntries.Take(50))
                                    {
                                        <tr class="@(entry.UserId == currentUserId ? "table-primary" : "")">
                                            <td>
                                                <span class="fw-bold">#@entry.Rank</span>
                                                @if (entry.Rank <= 3)
                                                {
                                                    <i class="fas fa-crown @(entry.Rank == 1 ? "text-warning" : entry.Rank == 2 ? "text-secondary" : "text-danger") ms-1"></i>
                                                }
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(entry.ProfilePictureUrl))
                                                    {
                                                        <img src="@entry.ProfilePictureUrl" alt="@entry.UserName" class="rounded-circle me-2" style="width: 32px; height: 32px;">
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 32px; height: 32px;">
                                                            <i class="fas fa-user text-white"></i>
                                                        </div>
                                                    }
                                                    <span>@entry.UserName</span>
                                                    @if (entry.UserId == currentUserId)
                                                    {
                                                        <span class="badge bg-primary ms-2">You</span>
                                                    }
                                                </div>
                                            </td>
                                            <td>@entry.TotalPoints</td>
                                            <td>@entry.AchievementCount</td>
                                            <td>@entry.LastUpdated.ToString("MMM dd, yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-chart-line fa-4x text-muted mb-3"></i>
                            <h4 class="text-muted">No leaderboard data available</h4>
                            <p class="text-muted">Start earning achievements to appear on the leaderboard!</p>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private string currentTab = "earned";
    private string? currentUserId;
    
    private List<UserAchievementModel>? earnedAchievements;
    private List<AchievementModel>? availableAchievements;
    private List<LeaderboardEntryModel>? leaderboardEntries;
    
    private int earnedCount = 0;
    private int availableCount = 0;
    private int totalPoints = 0;
    private int userRank = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadAchievementData();
    }

    private async Task LoadAchievementData()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    currentUserId = user.Id;
                    
                    // Load user achievements
                    earnedAchievements = await AchievementService.GetUserAchievementsAsync(user.Id);
                    earnedCount = earnedAchievements?.Count ?? 0;
                    totalPoints = earnedAchievements?.Sum(a => a.Points) ?? 0;
                    
                    // Load all achievements to find available ones
                    var allAchievements = await AchievementService.GetAchievementsAsync();
                    var earnedIds = earnedAchievements?.Select(a => a.AchievementId).ToHashSet() ?? new HashSet<int>();
                    availableAchievements = allAchievements?.Where(a => !earnedIds.Contains(a.Id)).ToList();
                    availableCount = availableAchievements?.Count ?? 0;
                    
                    // Load leaderboard data
                    var globalLeaderboard = await LeaderboardService.GetOverallLeaderboardAsync();
                    leaderboardEntries = globalLeaderboard;
                    
                    // Find user rank
                    var userEntry = leaderboardEntries?.FirstOrDefault(e => e.UserId == user.Id);
                    userRank = userEntry?.Rank ?? 0;
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading achievements:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SwitchTab(string tab)
    {
        currentTab = tab;
        StateHasChanged();
    }
}

<style>
    .achievement-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .achievement-icon img {
        width: 50px;
        height: 50px;
    }

    .card.border-success {
        border-width: 2px !important;
    }

    .table-primary {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }
</style>
