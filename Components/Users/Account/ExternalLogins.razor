@page "/user/account/externallogins"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h1>Manage your external logins</h1>
@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info">@statusMessage</div>
    }

    @if (currentLogins.Count > 0)
    {
        <h3>Registered Logins</h3>
        <table class="table">
            <tbody>
                @foreach (var login in currentLogins)
                {
                    <tr>
                        <td>@(login.ProviderDisplayName ?? login.LoginProvider)</td>
                        <td>
                            @if (showRemoveButton)
                            {
                                <button class="btn btn-primary" @onclick="() => RemoveLogin(login.LoginProvider, login.ProviderKey)">
                                    Remove
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No external logins associated with your account.</p>
    }

    @if (otherLogins.Count > 0)
    {
        <h4>Add another service to log in.</h4>
        <hr />
        <div>
            @foreach (var provider in otherLogins)
            {
                <button class="btn btn-primary me-2" @onclick="() => LinkLogin(provider.Name)">
                    @provider.DisplayName
                </button>
            }
        </div>
    }
    else
    {
        <p>All available external login providers are already linked.</p>
    }
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private IList<UserLoginInfo> currentLogins = new List<UserLoginInfo>();
    private IList<AuthenticationScheme> otherLogins = new List<AuthenticationScheme>();
    private bool isLoading = true;
    private string? statusMessage;
    private bool showRemoveButton = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLoginsAsync();
        // Check for status message in query string (for callback)
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("statusMessage", out var msg))
        {
            statusMessage = msg;
        }
    }

    private async Task LoadLoginsAsync()
    {
        isLoading = true;
        statusMessage = null;
        if (authenticationStateTask == null)
        {
            statusMessage = "Unable to load authentication state.";
            isLoading = false;
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            isLoading = false;
            return;
        }
        currentLogins = await UserManager.GetLoginsAsync(user);
        var allSchemes = await SignInManager.GetExternalAuthenticationSchemesAsync();
        otherLogins = allSchemes.Where(s => currentLogins.All(cl => cl.LoginProvider != s.Name)).ToList();

        // Determine if the remove button should be shown
        var hasPassword = await UserManager.HasPasswordAsync(user);
        showRemoveButton = hasPassword || currentLogins.Count > 1;

        isLoading = false;
        StateHasChanged();
    }

    private async Task RemoveLogin(string loginProvider, string providerKey)
    {
        if (authenticationStateTask == null)
        {
            statusMessage = "Unable to load authentication state.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }
        var result = await UserManager.RemoveLoginAsync(user, loginProvider, providerKey);
        if (result.Succeeded)
        {
            await SignInManager.RefreshSignInAsync(user);
            statusMessage = "The external login was removed.";
            await LoadLoginsAsync();
        }
        else
        {
            statusMessage = "The external login was not removed.";
        }
    }

    private void LinkLogin(string provider)
    {
        // Redirect to a backend endpoint that initiates the external login challenge for linking
        // This endpoint should handle the callback and redirect back to this page with a status message
        var returnUrl = NavigationManager.BaseUri.TrimEnd('/') + "/user/account/externallogins";
        NavigationManager.NavigateTo($"/user/account/externalLoginLink?provider={Uri.EscapeDataString(provider)}&returnUrl={Uri.EscapeDataString(returnUrl)}",
        forceLoad: true);
    }
}