@* @page "/user/account/profile" *@
@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using LMS.Data
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject HttpClient http

<h3>Profile</h3>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}

@if (isLoaded)
{
    <div class="row">
        <div class="col-md-12">
            <EditForm Model="inputModel" OnValidSubmit="HandleChangeUsername">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3 d-flex align-items-center">
                    <div class="flex-grow-1 position-relative">
                        <InputText @bind-Value="currentUsername" class="form-control" disabled />
                    </div>
                    <button type="button" class="btn btn-outline-primary ms-2 text-nowrap"
                        @onclick="() => showChangeUsername = !showChangeUsername">
                        @(showChangeUsername ? "Cancel" : "Change Username")
                    </button>
                </div>

                @if (showChangeUsername)
                {
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="inputModel.NewUsername" class="form-control" autocomplete="username"
                            aria-required="true" placeholder="Please enter new username." />
                        <label class="form-label">New username</label>
                        <ValidationMessage For="@(() => inputModel.NewUsername)" />
                    </div>
                    <button type="submit" class="btn btn-lg btn-primary">Change username</button>
                }
            </EditForm>

        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter] public User? User { get; set; }

    private string currentUsername = string.Empty;
    private string? statusMessage;
    private bool isLoaded = false;
    private bool showChangeUsername = false;

    private ProfileInputModel inputModel = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if (User == null)
        {
            statusMessage = "User not found.";
            isLoaded = false;
            return;
        }
        currentUsername = await UserManager.GetUserNameAsync(User) ?? "";
        inputModel.NewUsername = currentUsername;
        isLoaded = true;
    }

    private async Task HandleChangeUsername()
    {
        statusMessage = string.Empty;
        if (User == null)
        {
            statusMessage = "User not found.";
            return;
        }

        var username = await UserManager.GetUserNameAsync(User);
        if (inputModel.NewUsername != username)
        {
            var setUsernameResult = await UserManager.SetUserNameAsync(User, inputModel.NewUsername);
            if (!setUsernameResult.Succeeded)
            {
                statusMessage = "Unexpected error when trying to set username.";
                return;
            }
            statusMessage = "Username changed successfully.";
            await http.GetAsync(NavigationManager.BaseUri + "api/user/account/refreshsignin");
        }
        else
        {
            statusMessage = "Your username is unchanged.";
        }
        showChangeUsername = false;
        await LoadAsync();
    }
}
