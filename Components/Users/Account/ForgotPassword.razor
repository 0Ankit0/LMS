@page "/user/account/forgotpassword"
@layout AuthLayout
@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<User> UserManager
@inject IEmailSender EmailSender
@inject NavigationManager NavigationManager

<h1>Forgot your password?</h1>
<h2>Enter your email.</h2>
<hr />
<EditForm Model="forgotModel" OnValidSubmit="HandleForgotPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating mb-3">
        <InputText @bind-Value="forgotModel.Email" class="form-control" autocomplete="username" aria-required="true"
            placeholder="name@example.com" />
        <label class="form-label">Email</label>
        <ValidationMessage For="@(() => forgotModel.Email)" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset Password</button>
</EditForm>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

@code {
    private EmailInputModel forgotModel = new();
    private string? statusMessage;

    private async Task HandleForgotPassword()
    {
        statusMessage = string.Empty;
        if (string.IsNullOrWhiteSpace(forgotModel.Email))
        {
            statusMessage = "Email is required.";
            return;
        }

        var user = await UserManager.FindByEmailAsync(forgotModel.Email);
        if (user == null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            NavigationManager.NavigateTo("/user/account/forgotpasswordconfirmation");
            return;
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.BaseUri.TrimEnd('/') +
        $"/user/account/resetpassword?code={Uri.EscapeDataString(code)}";

        await EmailSender.SendEmailAsync(
        forgotModel.Email,
        "Reset Password",
        $"Please reset your password by <a href='{callbackUrl}'>clicking here</a>.");

        NavigationManager.NavigateTo("/user/account/forgotpasswordconfirmation");
    }
}
