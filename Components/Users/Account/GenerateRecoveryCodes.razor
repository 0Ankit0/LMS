@page "/user/account/generaterecoverycodes"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject UserManager<User> UserManager
@inject ILogger<GenerateRecoveryCodes> Logger
@inject IJSRuntime JS
@attribute [Authorize]

<button class="btn btn-link mb-3" type="button" @onclick="NavigateBack">
    <i class="bi bi-arrow-left"></i> Back
</button>
<h1>Generate two-factor authentication (2FA) recovery codes</h1>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}

<div class="alert alert-warning" role="alert">
    <p>
        <strong>Put these codes in a safe place.</strong>
    </p>
    <p>
        If you lose your device and don't have the recovery codes you will lose access to your account.
    </p>
    <p>
        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a href="/user/account/resetauthenticator">reset your authenticator
            keys.</a>
    </p>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!isTwoFactorEnabled)
{
    <div class="alert alert-danger">You must enable two-factor authentication before generating recovery codes.</div>
}
else
{
    <button class="btn btn-danger" @onclick="GenerateCodes" disabled="@isGenerating">Generate Recovery Codes</button>
}

@if (recoveryCodes?.Length > 0)
{
    <div class="mt-4">
        <h4>Your new recovery codes</h4>
        <ul>
            @foreach (var recCode in recoveryCodes)
            {
                <li>@recCode</li>
            }
        </ul>
        <div class="alert alert-info mt-2">
            Save these codes in a safe place. Each code can be used once.
        </div>
    </div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private bool isLoading = true;
    private bool isGenerating = false;
    private bool isTwoFactorEnabled = false;
    private string? statusMessage;
    private string[]? recoveryCodes;

    protected override async Task OnInitializedAsync()
    {
        await CheckTwoFactorAsync();
    }

    private async Task CheckTwoFactorAsync()
    {
        isLoading = true;
        statusMessage = null;
        recoveryCodes = null;

        if (authenticationStateTask == null)
        {
            statusMessage = "Unable to load authentication state.";
            isLoading = false;
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            isLoading = false;
            return;
        }
        isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isLoading = false;
    }

    private async Task GenerateCodes()
    {
        isGenerating = true;
        statusMessage = null;
        recoveryCodes = null;

        if (authenticationStateTask == null)
        {
            statusMessage = "Unable to load authentication state.";
            isGenerating = false;
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            isGenerating = false;
            return;
        }
        isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        if (!isTwoFactorEnabled)
        {
            statusMessage = "Cannot generate recovery codes because 2FA is not enabled.";
            isGenerating = false;
            return;
        }

        var codes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        recoveryCodes = codes?.ToArray();

        Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", await
        UserManager.GetUserIdAsync(user));
        statusMessage = "You have generated new recovery codes.";
        isGenerating = false;
    }
    private void NavigateBack()
    {
        JS.InvokeVoidAsync("history.back");
    }
}