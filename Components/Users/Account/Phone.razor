@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using LMS.Data
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject ISmsSender smsSender

<h3>Phone Number</h3>
@if (isLoaded)
{
    <div class="row">
        <div class="col-md-12">
            <EditForm Model="inputModel" OnValidSubmit="HandleChangePhone">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3 d-flex align-items-center">
                    <div class="flex-grow-1 position-relative">
                        <InputText @bind-Value="currentPhone" class="form-control" disabled />
                    </div>
                    @if (isPhoneConfirmed)
                    {
                        <span class="ms-2 h-100 input-group-text text-success fw-bold">✓ Confirmed</span>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-secondary ms-2 align-self-center text-nowrap"
                            @onclick="SendVerificationSms">Confirm Phone</button>
                    }
                    <button type="button" class="btn btn-outline-primary ms-2 text-nowrap"
                        @onclick="() => showChangePhone = !showChangePhone">
                        @(showChangePhone ? "Cancel" : "Change Phone")
                    </button>
                </div>

                @if (showChangePhone)
                {
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="inputModel.NewPhone" class="form-control" autocomplete="tel"
                            aria-required="true" placeholder="Please enter new phone number." />
                        <label class="form-label">New phone number</label>
                        <ValidationMessage For="@(() => inputModel.NewPhone)" />
                    </div>
                    <button type="submit" class="btn btn-lg btn-primary">Change phone</button>
                }
            </EditForm>
            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert alert-info mt-2">@statusMessage</div>
            }
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter] public User? User { get; set; }

    private string currentPhone = string.Empty;
    private bool isPhoneConfirmed;
    private string? statusMessage;
    private bool isLoaded = false;
    private bool showChangePhone = false;

    private PhoneInputModel inputModel = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if (User == null)
        {
            statusMessage = "User not found.";
            isLoaded = false;
            return;
        }
        currentPhone = await UserManager.GetPhoneNumberAsync(User) ?? "";
        inputModel.NewPhone = currentPhone;
        isPhoneConfirmed = await UserManager.IsPhoneNumberConfirmedAsync(User);
        isLoaded = true;
    }

    private async Task HandleChangePhone()
    {
        statusMessage = string.Empty;
        if (User == null)
        {
            statusMessage = "User not found.";
            return;
        }

        var phone = await UserManager.GetPhoneNumberAsync(User);
        if (inputModel.NewPhone != phone)
        {
            var userId = await UserManager.GetUserIdAsync(User);
            var code = await UserManager.GenerateChangePhoneNumberTokenAsync(User, inputModel.NewPhone);
            await smsSender.SendSmsAsync(inputModel.NewPhone, $"Your confirmation code is: {code}");

            statusMessage = "Verification code sent to new phone number. Please check your SMS.";
            await Task.Delay(500);
            NavigationManager.NavigateTo($"/user/account/confirmphone?phoneNo={Uri.EscapeDataString(inputModel.NewPhone)}");

        }
        else
        {
            statusMessage = "Your phone number is unchanged.";
        }
        showChangePhone = false;
        await LoadAsync();
    }

    private async Task SendVerificationSms()
    {
        statusMessage = string.Empty;
        if (User == null)
        {
            statusMessage = "User not found.";
            return;
        }

        var phone = await UserManager.GetPhoneNumberAsync(User);
        if (string.IsNullOrEmpty(phone))
        {
            statusMessage = "No phone number to verify.";
            return;
        }
        var code = await UserManager.GenerateChangePhoneNumberTokenAsync(User, phone);
        await smsSender.SendSmsAsync(phone, $"Your confirmation code is: {code}");

        statusMessage = "Verification code sent. Please check your SMS.";
        await Task.Delay(500);
        NavigationManager.NavigateTo($"/user/account/confirmphone?phoneNo={Uri.EscapeDataString(phone)}");

    }
}