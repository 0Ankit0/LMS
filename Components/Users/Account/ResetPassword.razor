@page "/user/account/resetpassword"
@layout AuthLayout
@using System.ComponentModel.DataAnnotations
@using System.Text
@using LMS.Models.Account
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@* @attribute [Authorize] *@

<h1>Reset password</h1>
<h2>Reset your password.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="resetModel" OnValidSubmit="HandleReset">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @* <input @Value="resetModel.Code" hidden /> *@
            <div class="form-floating mb-3">
                <InputText disabled @bind-Value="resetModel.Email" class="form-control" autocomplete="username"
                    aria-required="true" placeholder="name@example.com" />
                <label class="form-label">Email</label>
                <ValidationMessage For="@(() => resetModel.Email)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="resetModel.Password" class="form-control" type="password"
                    autocomplete="new-password" aria-required="true" placeholder="Enter your password." />
                <label class="form-label">Password</label>
                <ValidationMessage For="@(() => resetModel.Password)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="resetModel.ConfirmPassword" class="form-control" type="password"
                    autocomplete="new-password" aria-required="true" placeholder="Confirm your password." />
                <label class="form-label">Confirm password</label>
                <ValidationMessage For="@(() => resetModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info mt-2">@statusMessage</div>
        }
    </div>
</div>

@code {
    private ResetModel resetModel = new();
    private string? statusMessage;
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get code from query string and decode it
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("code", out var codeValue))
        {
            try
            {
                resetModel.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(codeValue));
            }
            catch
            {
                statusMessage = "Invalid or missing reset code.";
            }
        }
        else
        {
            statusMessage = "A code must be supplied for password reset.";
        }
        if (authenticationStateTask != null)
        {
            var authState = await authenticationStateTask;
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                resetModel.Email = await UserManager.GetEmailAsync(user) ?? string.Empty;
            }
        }
    }

    private async Task HandleReset()
    {
        statusMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(resetModel.Code))
        {
            statusMessage = "A code must be supplied for password reset.";
            return;
        }

        var context = new ValidationContext(resetModel);
        var results = new List<ValidationResult>();
        if (!Validator.TryValidateObject(resetModel, context, results, true))
        {
            statusMessage = string.Join(" ", results.Select(r => r.ErrorMessage));
            return;
        }

        var user = await UserManager.FindByEmailAsync(resetModel.Email);
        if (user == null)
        {
            // Don't reveal that the user does not exist
            NavigationManager.NavigateTo("/user/account/resetpasswordconfirmation");
            return;
        }

        var result = await UserManager.ResetPasswordAsync(user, resetModel.Code, resetModel.Password);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/user/account/resetpasswordconfirmation");
            return;
        }

        statusMessage = string.Join(" ", result.Errors.Select(e => e.Description));
    }
}