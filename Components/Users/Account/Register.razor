@page "/user/account/register"
@layout AuthLayout
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger
@inject IEmailSender EmailSender
@inject IServiceProvider ServiceProvider

@code {
    private RegisterModel registerModel = new();
    private string? statusMessage;
    private string? returnUrl;
    private IList<AuthenticationScheme> externalLogins = new List<AuthenticationScheme>();

    protected override async Task OnInitializedAsync()
    {
        // Parse returnUrl from query string if present
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("returnUrl", out var returnUrlValue))
        {
            returnUrl = returnUrlValue;
        }
        else
        {
            returnUrl = "/";
        }

        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    private async Task HandleRegister()
    {
        statusMessage = string.Empty;

        var context = new ValidationContext(registerModel);
        var results = new List<ValidationResult>();
        if (!Validator.TryValidateObject(registerModel, context, results, true))
        {
            statusMessage = string.Join(" ", results.Select(r => r.ErrorMessage));
            return;
        }

        var user = new User
        {
            UserName = registerModel.Username,
            Email = registerModel.Email,
            PhoneNumber = registerModel.PhoneNo
        };
        var result = await UserManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            Logger.LogInformation("User created a new account with password.");

            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.BaseUri.TrimEnd('/') +
                $"/Identity/user/account/ConfirmEmail?userId={Uri.EscapeDataString(userId)}&code={Uri.EscapeDataString(code)}&returnUrl={Uri.EscapeDataString(returnUrl ?? "/")}";

            await EmailSender.SendEmailAsync(registerModel.Email, "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                NavigationManager.NavigateTo($"/user/account/registerconfirmation?email={Uri.EscapeDataString(registerModel.Email)}&returnUrl={Uri.EscapeDataString(returnUrl ?? "/")}");
                return;
            }
            else
            {
                statusMessage = "User Logged in Successfully.Please login to proceed.";
                await Task.Delay(500);
                NavigationManager.NavigateTo("/user/account/login");
            }
        }
        statusMessage = string.Join(" ", result.Errors.Select(e => e.Description));
    }

    private async Task ExternalLogin(string provider)
    {
        // Redirect to external login page
        var url = $"/user/account/externalLoginLink?provider={Uri.EscapeDataString(provider)}&returnUrl={Uri.EscapeDataString(returnUrl ?? "/")}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

}

<h1 class="text-center">Register</h1>
<div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-5 col-xl-4">
        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                <label>Username</label>
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                <label>Email</label>
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.PhoneNo" class="form-control" autocomplete="tel" aria-required="true" placeholder="+0000000000" />
                <label>Phone Number</label>
                <ValidationMessage For="@(() => registerModel.PhoneNo)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Password" class="form-control" type="password" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label>Password</label>
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" autocomplete="new-password" aria-required="true" placeholder="confirm password" />
                <label>Confirm Password</label>
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info mt-2">@statusMessage</div>
        }
        <div class="mt-3 text-center">
            <span>Already have an account?</span>
            <a href="/user/account/login" class="ms-1">Login</a>
        </div>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h4>Use another service to register.</h4>
            <hr />
            @if (externalLogins.Count == 0)
            {
                <div>
                    <p>
                        There are no external authentication services configured.
                    </p>
                </div>
            }
            else
            {
                <div>
                    <p>
                        @foreach (var provider in externalLogins)
                        {
                            <button type="button" class="btn btn-primary me-2" @onclick="() => ExternalLogin(provider.Name)">
                                Log in using your @provider.DisplayName account
                            </button>
                        }
                    </p>
                </div>
            }
        </section>
    </div>
</div>