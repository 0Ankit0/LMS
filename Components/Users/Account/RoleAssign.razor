@page "/user/account/roles/assign/{RoleId}"
@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

@code {
    [Parameter] public string RoleId { get; set; } = string.Empty;
    private IdentityRole? role;
    private string? statusMessage;
    private List<User> usersInRole = new();

    // ViewModel for the form
    private AssignUserModel assignUserModel = new();

    protected override async Task OnInitializedAsync()
    {
        role = await RoleManager.FindByIdAsync(RoleId);
        if (role != null)
        {
            usersInRole = (await UserManager.GetUsersInRoleAsync(role.Name)).ToList();
        }
    }

    private async Task AssignUser()
    {
        if (role == null) return;

        // Find all users with the given email
        var users = UserManager.Users.Where(u => u.Email == assignUserModel.UserEmail).ToList();

        if (users.Count == 0)
        {
            statusMessage = "User not found.";
            return;
        }
        if (users.Count > 1)
        {
            statusMessage = "Multiple users found with this email. Please resolve duplicates in the user database.";
            return;
        }

        var user = users[0];
        var result = await UserManager.AddToRoleAsync(user, role.Name);
        if (result.Succeeded)
        {
            statusMessage = $"User '{assignUserModel.UserEmail}' assigned to role '{role.Name}'.";
            usersInRole = (await UserManager.GetUsersInRoleAsync(role.Name)).ToList();
            assignUserModel.UserEmail = string.Empty;
        }
        else
        {
            statusMessage = string.Join("; ", result.Errors.Select(e => e.Description));
        }
    }

    private async Task RemoveUser(string userId)
    {
        if (role == null) return;
        var user = await UserManager.FindByIdAsync(userId);
        if (user == null) return;
        var result = await UserManager.RemoveFromRoleAsync(user, role.Name);
        if (result.Succeeded)
        {
            statusMessage = $"User removed from role.";
            usersInRole = (await UserManager.GetUsersInRoleAsync(role.Name)).ToList();
        }
        else
        {
            statusMessage = string.Join("; ", result.Errors.Select(e => e.Description));
        }
    }
}

<h1>Assign Users to Role</h1>
@if (role == null)
{
    <div class="alert alert-danger">Role not found.</div>
}
else
{
    <h3>Role: @role.Name</h3>
    <EditForm Model="assignUserModel" OnValidSubmit="AssignUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value="assignUserModel.UserEmail" class="form-control mb-2" placeholder="User email" />
        <button class="btn btn-success" type="submit">Assign</button>
        <a class="btn btn-secondary ms-2" href="/user/account/roles">Back</a>
    </EditForm>
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info mt-2">@statusMessage</div>
    }
    <h4 class="mt-4">Users in this role</h4>
    <ul class="list-group">
        @foreach (var user in usersInRole)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@user.Email</span>
                <button class="btn btn-danger btn-sm" @onclick="() => RemoveUser(user.Id)">Remove</button>
            </li>
        }
    </ul>
}