@page "/user/account/resendemailconfirmation"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Identity.UI.Services
@inject UserManager<User> UserManager
@inject IEmailSender EmailSender
@attribute [Authorize]
@inject NavigationManager NavigationManager

<h1>Resend email confirmation</h1>
<h2>Enter your email.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="inputModel" OnValidSubmit="HandleResend">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-floating mb-3">
                <InputText @bind-Value="inputModel.Email" class="form-control" aria-required="true"
                    placeholder="name@example.com" />
                <label class="form-label">Email</label>
                <ValidationMessage For="@(() => inputModel.Email)" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Resend</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info mt-2">@statusMessage</div>
        }
    </div>
</div>

@code {
    private EmailInputModel inputModel = new();
    private string? statusMessage;

    private async Task HandleResend()
    {
        statusMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(inputModel.Email))
        {
            statusMessage = "Please enter a valid email address.";
            return;
        }

        var user = await UserManager.FindByEmailAsync(inputModel.Email);
        // Always show the same message to avoid account enumeration
        statusMessage = "Verification email sent. Please check your email.";

        if (user == null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.BaseUri.TrimEnd('/') +
        $"/user/account/confirmemail?userId={Uri.EscapeDataString(userId)}&code={Uri.EscapeDataString(code)}";

        await EmailSender.SendEmailAsync(
        inputModel.Email,
        "Confirm your email",
        $"Please confirm your account by <a href='{callbackUrl}'>clicking here</a>.");
    }
}
