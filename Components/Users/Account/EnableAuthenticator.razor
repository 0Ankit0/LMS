@page "/user/account/enableauthenticator"
@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Globalization
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<User> UserManager
@inject ILogger<EnableAuthenticator> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<button class="btn btn-link mb-3" type="button" @onclick="NavigateBack">
    <i class="bi bi-arrow-left"></i> Back
</button>

<h1>Configure authenticator app</h1>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}
@if (isLoaded)
{
    <ol class="list">
        <li>
            <p>
                Download a two-factor authenticator app like Microsoft Authenticator for
                <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> and
                <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> or
                Google Authenticator for
                <a
                    href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a>
                and
                <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
            </p>
        </li>
        <li>
            <p>
                Scan the QR Code or enter this key <kbd>@sharedKey</kbd> into your two factor authenticator app. Spaces and
                casing do not matter.
            </p>

            <div id="qrCode" class="p-2"></div>
        </li>
        <li>
            <p>
                Once you have scanned the QR code or input the key above, your two factor authentication app will provide
                you
                with a unique code. Enter the code in the confirmation box below.
            </p>
            <EditForm Model="inputModel" OnValidSubmit="OnSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="inputModel.Code" class="form-control" autocomplete="off"
                        placeholder="Please enter the code." />
                    <label class="form-label">Verification Code</label>
                    <ValidationMessage For="@(() => inputModel.Code)" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Verify</button>
            </EditForm>
        </li>
    </ol>
    @if (showRecoveryCodes && recoveryCodes != null && recoveryCodes.Length > 0)
    {
        <div class="alert alert-success mt-4">
            <h4>Recovery Codes</h4>
            <p>
                Save these recovery codes in a safe place. Each code can be used once to access your account if you lose access
                to your authenticator app.
            </p>
            <ul class="list-group mb-3">
                @foreach (var codes in recoveryCodes)
                {
                    <li class="list-group-item">@codes</li>
                }
            </ul>
        </div>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private string? sharedKey;
    private string? authenticatorUri;
    private string? statusMessage;
    private bool isLoaded = false;
    private EnableAuthenticatorInputModel inputModel = new();

    // For recovery codes
    private string[]? recoveryCodes;
    private bool showRecoveryCodes = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSharedKeyAndQrCodeUriAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrEmpty(authenticatorUri))
        {
            await JS.InvokeVoidAsync("renderQrCode", "qrCode", authenticatorUri);
        }
    }

    private async Task LoadSharedKeyAndQrCodeUriAsync()
    {
        if (authenticationStateTask == null)
        {
            statusMessage = "Invalid state.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }

        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email, unformattedKey);

        isLoaded = true;
        StateHasChanged();
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }
        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        var issuer = "Microsoft.AspNetCore.Identity.UI";
        return string.Format(
        CultureInfo.InvariantCulture,
        "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6",
        Uri.EscapeDataString(issuer),
        Uri.EscapeDataString(email),
        unformattedKey);
    }

    private async Task OnSubmitAsync()
    {
        statusMessage = string.Empty;
        showRecoveryCodes = false;
        recoveryCodes = null;

        if (authenticationStateTask == null)
        {
            statusMessage = "Invalid state.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }

        if (string.IsNullOrWhiteSpace(inputModel.Code))
        {
            statusMessage = "Verification code is required.";
            return;
        }

        // Strip spaces and hyphens
        var verificationCode = inputModel.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
        user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            statusMessage = "Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        statusMessage = "Your authenticator app has been verified.";

        // Generate recovery codes if none exist
        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            var codes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
            recoveryCodes = codes.ToArray();
            showRecoveryCodes = true;
        }
        else
        {
            // Optionally, redirect to a 2FA management page
            NavigationManager.NavigateTo("/user/account/manage/2FA", forceLoad: true);
        }

        StateHasChanged();
    }
    private void NavigateBack()
    {
        JS.InvokeVoidAsync("history.back");
    }


}