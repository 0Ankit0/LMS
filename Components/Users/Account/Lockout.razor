@page "/user/account/lockout"
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Identity.UI.Services
@inject UserManager<User> UserManager
@inject IEmailSender EmailSender
@inject NavigationManager NavigationManager

<h1>Remove Account Lockout</h1>
<p>
    If your account is locked out, enter your username and click the button below to receive a link by email.
    You will then be redirected to enter the code and remove the lockout.
</p>

@if (!string.IsNullOrEmpty(Message))
{
    <div>@Message</div>
}

<div class="mb-3">
    <label for="emailInput" class="form-label">Username</label>
    <input id="emailInput" class="form-control" @bind="Email" type="text" required autocomplete="username" />
</div>

<button class="btn btn-primary" @onclick="RequestCode" disabled="@IsLoading">
    @(IsLoading ? "Sending..." : "Send Unlock Link to Email")
</button>

@code {
    private string? Message;
    private bool IsLoading = false;
    private string Email = string.Empty;

    private async Task RequestCode()
    {
        IsLoading = true;
        Message = string.Empty;
        try
        {
            var user = await UserManager.FindByEmailAsync(Email);
            // Always show the same message to avoid account enumeration
            Message = "If an account exists for this username, an unlock link has been sent.";

            if (user == null)
            {
                return;
            }

            var code = await UserManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "RemoveLockout");
            var encodedCode = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var unlockUrl = NavigationManager.BaseUri.TrimEnd('/') +
            $"/user/account/unlock?email={Uri.EscapeDataString(Email)}&code={Uri.EscapeDataString(encodedCode)}";

            var emailBody = $@"
<p>Your account is locked out. Click the link below to unlock your account:</p>
<p><a href=""{unlockUrl}"">Unlock Account</a></p>
<p>If you did not request this, you can ignore this email.</p>
";

            await EmailSender.SendEmailAsync(Email, "Unlock Your Account", emailBody);
        }
        catch
        {
            Message = "An error occurred while sending the unlock link.";
        }
        finally
        {
            IsLoading = false;
        }
    }
}