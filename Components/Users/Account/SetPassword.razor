@page "/user/account/setpassword"
@layout AuthLayout
@using LMS.Models.Account
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]

<h1>Set Password</h1>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}
@if (!hasPassword)
{
    <EditForm Model="setPasswordModel" OnValidSubmit="HandleSetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value="setPasswordModel.NewPassword" class="form-control" type="password"
            placeholder="New password" />
        <InputText @bind-Value="setPasswordModel.ConfirmPassword" class="form-control" type="password"
            placeholder="Confirm new password" />
        <button type="submit" class="w-100 btn btn-lg btn-primary">Set Password</button>
    </EditForm>
}
else
{
    <p>
        Click <a href="/user/account/manage">here</a> to manage your account settings.
    </p>
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private SetPasswordModel setPasswordModel = new SetPasswordModel();
    private string? statusMessage;
    private bool hasPassword = false;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            statusMessage = "Invalid authentication state.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            statusMessage = "You already have a password set.";
        }
    }

    private async Task HandleSetPassword()
    {
        statusMessage = string.Empty;
        if (setPasswordModel.NewPassword != setPasswordModel.ConfirmPassword)
        {
            statusMessage = "Passwords do not match.";
            return;
        }
        if (authenticationStateTask == null || string.IsNullOrEmpty(setPasswordModel.NewPassword))
        {
            statusMessage = "Invalid state or password.";
            return;
        }
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }
        var result = await UserManager.AddPasswordAsync(user, setPasswordModel.NewPassword);
        if (result.Succeeded)
        {
            await SignInManager.RefreshSignInAsync(user);
            statusMessage = "Password set successfully.";
            hasPassword = true;
        }
        else
        {
            statusMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }

}