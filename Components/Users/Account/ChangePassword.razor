@page "/user/account/changepassword"
@layout AuthLayout
@using LMS.Models.Account
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization

<h1>Change Password</h1>
<EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating mb-3">
        <InputText id="oldPassword" @bind-Value="changePasswordModel.OldPassword" class="form-control" type="password"
            placeholder="Current password" />
        <label for="oldPassword">Current password</label>
    </div>
    <div class="form-floating mb-3">
        <InputText id="newPassword" @bind-Value="changePasswordModel.NewPassword" class="form-control" type="password"
            placeholder="New password" />
        <label for="newPassword">New password</label>
    </div>
    <div class="form-floating mb-3">
        <InputText id="confirmPassword" @bind-Value="changePasswordModel.ConfirmPassword" class="form-control"
            type="password" placeholder="Confirm new password" />
        <label for="confirmPassword">Confirm new password</label>
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Change Password</button>
</EditForm>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private ChangePasswordModel changePasswordModel = new();
    private string? statusMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = $"Unable to load user.";
            return;
        }

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            // Redirect to set password page if user doesn't have a password
            NavigationManager.NavigateTo("/user/account/setpassword", true);
        }
    }

    private async Task HandleChangePassword()
    {
        statusMessage = string.Empty;

        if (!ValidateModel())
            return;

        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            statusMessage = $"Unable to load user.";
            return;
        }

        var result = await UserManager.ChangePasswordAsync(user, changePasswordModel.OldPassword!,
        changePasswordModel.NewPassword!);
        if (!result.Succeeded)
        {
            statusMessage = string.Join(" ", result.Errors.Select(e => e.Description));
            return;
        }

        // Call the refresh sign-in endpoint
        var response = await Http.PostAsync(NavigationManager.BaseUri + "api/user/account/refreshsignin", null);
        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Your password has been changed and your sign-in has been refreshed.";
        }
        else
        {
            statusMessage = "Password changed, but failed to refresh sign-in.";
        }

        // Optionally, reload the page to clear the form and show the status message
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private bool ValidateModel()
    {
        // Manual validation for max length (since [StringLength] is not enforced by default in Blazor)
        if (string.IsNullOrWhiteSpace(changePasswordModel.NewPassword) || changePasswordModel.NewPassword.Length < 6)
        {
            statusMessage = "The new password must be at least 6 characters long.";
            return false;
        }
        if (changePasswordModel.NewPassword.Length > 100)
        {
            statusMessage = "The new password must be at most 100 characters long.";
            return false;
        }
        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmPassword)
        {
            statusMessage = "The new password and confirmation password do not match.";
            return false;
        }
        return true;
    }


}
