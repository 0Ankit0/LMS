@page "/user/account/confirmemailchange"
@layout AuthLayout
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager

<h1>Confirm email change</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? UserId { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Email { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Code { get; set; }

    private string? statusMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId) ||
        string.IsNullOrEmpty(Email) ||
        string.IsNullOrEmpty(Code))
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
            return;
        }

        var user = await UserManager.FindByIdAsync(UserId!);
        if (user == null)
        {
            statusMessage = $"Unable to load user with ID '{UserId}'.";
            isLoading = false;
            return;
        }

        try
        {
            var decodedCode = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code!));
            var result = await UserManager.ChangeEmailAsync(user, Email!, decodedCode);
            if (!result.Succeeded)
            {
                statusMessage = string.Join(" ", result.Errors.Select(e => e.Description));
                isLoading = false;
                return;
            }

            //var setUserNameResult = await UserManager.SetUserNameAsync(user, Email!);
            //if (!setUserNameResult.Succeeded)
            //{
            // statusMessage = string.Join(" ", setUserNameResult.Errors.Select(e => e.Description));
            // isLoading = false;
            // return;
            //}

            await SignInManager.RefreshSignInAsync(user);
            statusMessage = "Thank you for confirming your email change.";
        }
        catch
        {
            statusMessage = "Invalid confirmation link.";
        }
        isLoading = false;
    }
}
