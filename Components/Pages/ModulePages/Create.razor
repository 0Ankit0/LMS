@page "/modules/create"
@using Microsoft.EntityFrameworkCore
@using LMS.Data
@inject IDbContextFactory<LMS.Data.AuthDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Module</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Module" OnValidSubmit="AddModule" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Module.Title" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Module.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Module.Description" class="form-control" /> 
                <ValidationMessage For="() => Module.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="courseid" class="form-label">CourseId:</label> 
                <InputNumber id="courseid" @bind-Value="Module.CourseId" class="form-control" /> 
                <ValidationMessage For="() => Module.CourseId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="orderindex" class="form-label">OrderIndex:</label> 
                <InputNumber id="orderindex" @bind-Value="Module.OrderIndex" class="form-control" /> 
                <ValidationMessage For="() => Module.OrderIndex" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isrequired" class="form-label">IsRequired:</label> 
                <InputCheckbox id="isrequired" @bind-Value="Module.IsRequired" class="form-check-input" /> 
                <ValidationMessage For="() => Module.IsRequired" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isactive" class="form-label">IsActive:</label> 
                <InputCheckbox id="isactive" @bind-Value="Module.IsActive" class="form-check-input" /> 
                <ValidationMessage For="() => Module.IsActive" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdat" class="form-label">CreatedAt:</label> 
                <InputDate id="createdat" @bind-Value="Module.CreatedAt" class="form-control" /> 
                <ValidationMessage For="() => Module.CreatedAt" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedat" class="form-label">UpdatedAt:</label> 
                <InputDate id="updatedat" @bind-Value="Module.UpdatedAt" class="form-control" /> 
                <ValidationMessage For="() => Module.UpdatedAt" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/modules">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Module Module { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddModule()
    {
        using var context = DbFactory.CreateDbContext();
        context.Modules.Add(Module);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/modules");
    }
}
