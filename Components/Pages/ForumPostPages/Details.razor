@page "/forumposts/details"
@using Microsoft.EntityFrameworkCore
@using LMS.Data
@inject IDbContextFactory<LMS.Data.AuthDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>ForumPost</h2>
    <hr />
    @if (forumpost is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@forumpost.Content</dd>
            <dt class="col-sm-2">TopicId</dt>
            <dd class="col-sm-10">@forumpost.TopicId</dd>
            <dt class="col-sm-2">AuthorId</dt>
            <dd class="col-sm-10">@forumpost.AuthorId</dd>
            <dt class="col-sm-2">ParentPostId</dt>
            <dd class="col-sm-10">@forumpost.ParentPostId</dd>
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@forumpost.CreatedAt</dd>
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@forumpost.UpdatedAt</dd>
            <dt class="col-sm-2">IsDeleted</dt>
            <dd class="col-sm-10">@forumpost.IsDeleted</dd>
        </dl>
        <div>
            <a href="@($"/forumposts/edit?id={forumpost.Id}")">Edit</a> |
            <a href="@($"/forumposts")">Back to List</a>
        </div>
    }
</div>

@code {
    private ForumPost? forumpost;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        forumpost = await context.ForumPosts.FirstOrDefaultAsync(m => m.Id == Id);

        if (forumpost is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
