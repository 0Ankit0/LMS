@page "/messages/create"
@using Microsoft.EntityFrameworkCore
@using LMS.Data
@using LMS.Services
@using LMS.Components.Shared
@inject IDbContextFactory<LMS.Data.AuthDbContext> DbFactory
@inject DropdownService DropdownService
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Message</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Message" OnValidSubmit="AddMessage">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="subject" class="form-label">Subject:</label>
                <InputText id="subject" @bind-Value="Message.Subject" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Message.Subject" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="content" class="form-label">Content:</label>
                <InputText id="content" @bind-Value="Message.Content" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Message.Content" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="fromuserid" class="form-label">From User</label>
                <SearchableSelectComponent 
                    TItem="DropdownOption"
                    TValue="string"
                    Items="@userOptions"
                    ValueSelector="@(item => item.Value.ToString())"
                    DisplaySelector="@(item => item.Text)"
                    SearchFunction="@SearchUsers"
                    SelectedValue="@Message.FromUserId"
                    OnSelectedValueChanged="@((string value) => Message.FromUserId = value)"
                    Placeholder="Select from user..."
                    class="form-control" />
                <ValidationMessage For="() => Message.FromUserId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="touserid" class="form-label">To User</label>
                <SearchableSelectComponent 
                    TItem="DropdownOption"
                    TValue="string"
                    Items="@userOptions"
                    ValueSelector="@(item => item.Value.ToString())"
                    DisplaySelector="@(item => item.Text)"
                    SearchFunction="@SearchUsers"
                    SelectedValue="@Message.ToUserId"
                    OnSelectedValueChanged="@((string value) => Message.ToUserId = value)"
                    Placeholder="Select to user..."
                    class="form-control" />
                <ValidationMessage For="() => Message.ToUserId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="parentmessageid" class="form-label">ParentMessageId:</label>
                <InputNumber id="parentmessageid" @bind-Value="Message.ParentMessageId" class="form-control" />
                <ValidationMessage For="() => Message.ParentMessageId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="sentat" class="form-label">SentAt:</label>
                <InputDate id="sentat" @bind-Value="Message.SentAt" class="form-control" />
                <ValidationMessage For="() => Message.SentAt" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="readat" class="form-label">ReadAt:</label>
                <InputDate id="readat" @bind-Value="Message.ReadAt" class="form-control" />
                <ValidationMessage For="() => Message.ReadAt" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isdeleted" class="form-label">IsDeleted:</label>
                <InputCheckbox id="isdeleted" @bind-Value="Message.IsDeleted" class="form-check-input" />
                <ValidationMessage For="() => Message.IsDeleted" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="priority" class="form-label">Priority:</label>
                <InputSelect id="priority" @bind-Value="Message.Priority" class="form-control">
                    @foreach (var enumValue in Enum.GetValues(typeof(MessagePriority)))
                    {
                        <option value="@enumValue">@enumValue.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Message.Priority" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/messages">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Message Message { get; set; } = new();

    private List<DropdownOption> userOptions = new();

    protected override async Task OnInitializedAsync()
    {
        // Load initial options
        userOptions = await DropdownService.GetUsersAsync(search: "", take: 20);
    }

    private async Task<IEnumerable<DropdownOption>> SearchUsers(string searchTerm)
    {
        return await DropdownService.GetUsersAsync(searchTerm, take: 20);
    }

    private async Task AddMessage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Messages.Add(Message);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/messages");
    }
}