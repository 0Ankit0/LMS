@page "/assessments"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using LMS.Data
@using LMS.Data
@implements IAsyncDisposable
@inject IDbContextFactory<LMS.Data.AuthDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="assessments/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Assessments">
    <PropertyColumn Property="assessment => assessment.Title" />
    <PropertyColumn Property="assessment => assessment.Description" />
    <PropertyColumn Property="assessment => assessment.CourseId" />
    <PropertyColumn Property="assessment => assessment.ModuleId" />
    <PropertyColumn Property="assessment => assessment.LessonId" />
    <PropertyColumn Property="assessment => assessment.Type" />
    <PropertyColumn Property="assessment => assessment.MaxAttempts" />
    <PropertyColumn Property="assessment => assessment.TimeLimit" />
    <PropertyColumn Property="assessment => assessment.PassingScore" />
    <PropertyColumn Property="assessment => assessment.IsRandomized" />
    <PropertyColumn Property="assessment => assessment.ShowCorrectAnswers" />
    <PropertyColumn Property="assessment => assessment.ShowScoreImmediately" />
    <PropertyColumn Property="assessment => assessment.AvailableFrom" />
    <PropertyColumn Property="assessment => assessment.AvailableUntil" />
    <PropertyColumn Property="assessment => assessment.IsActive" />
    <PropertyColumn Property="assessment => assessment.CreatedAt" />
    <PropertyColumn Property="assessment => assessment.UpdatedAt" />

    <TemplateColumn Context="assessment">
        <a href="@($"assessments/edit?id={assessment.Id}")">Edit</a> |
        <a href="@($"assessments/details?id={assessment.Id}")">Details</a> |
        <a href="@($"assessments/delete?id={assessment.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private AuthDbContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
