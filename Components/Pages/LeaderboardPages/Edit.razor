@page "/leaderboards/edit"
@using Microsoft.EntityFrameworkCore
@using LMS.Data
@inject IDbContextFactory<LMS.Data.AuthDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Leaderboard</h2>
<hr />
@if (Leaderboard is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Leaderboard" OnValidSubmit="UpdateLeaderboard">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Leaderboard.Id" value="@Leaderboard.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Leaderboard.Name" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Leaderboard.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Leaderboard.Description" class="form-control" />
                    <ValidationMessage For="() => Leaderboard.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputSelect id="type" @bind-Value="Leaderboard.Type" class="form-control">
                        @foreach (var enumValue in Enum.GetValues(typeof(LeaderboardType)))
                        {
                            <option value="@enumValue">@enumValue.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Leaderboard.Type" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="period" class="form-label">Period:</label>
                    <InputSelect id="period" @bind-Value="Leaderboard.Period" class="form-control">
                        @foreach (var enumValue in Enum.GetValues(typeof(LeaderboardPeriod)))
                        {
                            <option value="@enumValue">@enumValue.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Leaderboard.Period" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="courseid" class="form-label">CourseId:</label>
                    <InputNumber id="courseid" @bind-Value="Leaderboard.CourseId" class="form-control" />
                    <ValidationMessage For="() => Leaderboard.CourseId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isactive" class="form-label">IsActive:</label>
                    <InputCheckbox id="isactive" @bind-Value="Leaderboard.IsActive" class="form-check-input" />
                    <ValidationMessage For="() => Leaderboard.IsActive" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Leaderboard.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => Leaderboard.CreatedAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/leaderboards">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Leaderboard? Leaderboard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Leaderboard ??= await context.Leaderboards.FirstOrDefaultAsync(m => m.Id == Id);

        if (Leaderboard is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateLeaderboard()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Leaderboard!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!LeaderboardExists(Leaderboard!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/leaderboards");
    }

    private bool LeaderboardExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Leaderboards.Any(e => e.Id == id);
    }
}