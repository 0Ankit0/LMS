@page "/leaderboards/create"
@using Microsoft.EntityFrameworkCore
@using LMS.Data
@using LMS.Services
@using LMS.Components.Shared
@inject IDbContextFactory<LMS.Data.AuthDbContext> DbFactory
@inject DropdownService DropdownService
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Leaderboard</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Leaderboard" OnValidSubmit="AddLeaderboard">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Leaderboard.Name" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Leaderboard.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Leaderboard.Description" class="form-control" />
                <ValidationMessage For="() => Leaderboard.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Type:</label>
                <InputSelect id="type" @bind-Value="Leaderboard.Type" class="form-control">
                    @foreach (var enumValue in Enum.GetValues(typeof(LeaderboardType)))
                    {
                        <option value="@enumValue">@enumValue.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Leaderboard.Type" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="period" class="form-label">Period:</label>
                <InputSelect id="period" @bind-Value="Leaderboard.Period" class="form-control">
                    @foreach (var enumValue in Enum.GetValues(typeof(LeaderboardPeriod)))
                    {
                        <option value="@enumValue">@enumValue.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Leaderboard.Period" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="courseid" class="form-label">Course</label>
                <SearchableSelectComponent 
                    TItem="DropdownOption"
                    TValue="int?"
                    Items="@courseOptions"
                    ValueSelector="@(item => (int?)item.Value)"
                    DisplaySelector="@(item => item.Text)"
                    SearchFunction="@SearchCourses"
                    SelectedValue="@Leaderboard.CourseId"
                    OnSelectedValueChanged="@((int? value) => Leaderboard.CourseId = value)"
                    Placeholder="Select a course (optional)..."
                    class="form-control" />
                <ValidationMessage For="() => Leaderboard.CourseId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isactive" class="form-label">IsActive:</label>
                <InputCheckbox id="isactive" @bind-Value="Leaderboard.IsActive" class="form-check-input" />
                <ValidationMessage For="() => Leaderboard.IsActive" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="createdat" class="form-label">CreatedAt:</label>
                <InputDate id="createdat" @bind-Value="Leaderboard.CreatedAt" class="form-control" />
                <ValidationMessage For="() => Leaderboard.CreatedAt" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/leaderboards">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Leaderboard Leaderboard { get; set; } = new();

    private List<DropdownOption> courseOptions = new();

    protected override async Task OnInitializedAsync()
    {
        // Load initial options
        courseOptions = await DropdownService.GetCoursesAsync(search: "", take: 20);
    }

    private async Task<IEnumerable<DropdownOption>> SearchCourses(string searchTerm)
    {
        return await DropdownService.GetCoursesAsync(searchTerm, take: 20);
    }

    private async Task AddLeaderboard()
    {
        using var context = DbFactory.CreateDbContext();
        context.Leaderboards.Add(Leaderboard);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/leaderboards");
    }
}