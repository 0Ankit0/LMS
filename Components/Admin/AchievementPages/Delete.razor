@page "/achievements/delete"
@using Microsoft.EntityFrameworkCore
@using LMS.Data
@inject IDbContextFactory<LMS.Data.AuthDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Achievement</h2>
    <hr />
    @if (achievement is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@achievement.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@achievement.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IconUrl</dt>
            <dd class="col-sm-10">@achievement.IconUrl</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Points</dt>
            <dd class="col-sm-10">@achievement.Points</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">BadgeColor</dt>
            <dd class="col-sm-10">@achievement.BadgeColor</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Type</dt>
            <dd class="col-sm-10">@achievement.Type</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@achievement.IsActive</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@achievement.CreatedAt</dd>
        </dl>
        <EditForm method="post" Model="achievement" OnValidSubmit="DeleteAchievement" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(achievement is null)">Delete</button> |
            <a href="/achievements">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Achievement? achievement;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        achievement = await context.Achievements.FirstOrDefaultAsync(m => m.Id == Id);

        if (achievement is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAchievement()
    {
        using var context = DbFactory.CreateDbContext();
        context.Achievements.Remove(achievement!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/achievements");
    }
}
