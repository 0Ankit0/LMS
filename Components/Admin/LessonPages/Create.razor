@page "/admin/lessons/create"
@layout LMS.Components.Layout.AdminLayout
@using LMS.Services
@inject ICourseService CourseService
@inject IDropdownService DropdownService
@inject NavigationManager NavigationManager

<PageTitle>Create Lesson - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Lesson</h1>
    <a href="/admin/lessons" class="btn btn-outline-secondary">
        <i class="bi bi-arrow-left me-2"></i>Back to Lessons
    </a>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Lesson Information</h5>
            </div>
            <div class="card-body">
                <EditForm Model="Lesson" OnValidSubmit="AddLesson">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />

                    <div class="mb-3">
                        <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                        <InputText id="title" @bind-Value="Lesson.Title" class="form-control" aria-required="true" 
                                  placeholder="Enter lesson title" />
                        <ValidationMessage For="() => Lesson.Title" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" @bind-Value="Lesson.Description" class="form-control" rows="3"
                                      placeholder="Enter lesson description" />
                        <ValidationMessage For="() => Lesson.Description" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="moduleid" class="form-label">Module <span class="text-danger">*</span></label>
                        <SearchableSelectComponent TItem="DropdownOption" TValue="int?"
                                                 Items="moduleOptions"
                                                 ValueSelector="option => option.Value"
                                                 DisplaySelector="option => option.Text"
                                                 @bind-SelectedValue="SelectedModuleId"
                                                 Placeholder="Search and select module..."
                                                 SearchFunction="SearchModules" />
                        <ValidationMessage For="() => Lesson.ModuleId" class="text-danger" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="type" class="form-label">Lesson Type</label>
                            <InputSelect id="type" @bind-Value="Lesson.Type" class="form-select">
                                @foreach (var enumValue in Enum.GetValues<LessonType>())
                                {
                                    <option value="@enumValue">@enumValue.ToString()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Lesson.Type" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="estimatedduration" class="form-label">Duration (minutes)</label>
                            <InputNumber id="estimatedduration" @bind-Value="EstimatedDurationMinutes" class="form-control" 
                                        placeholder="30" />
                            <ValidationMessage For="() => EstimatedDurationMinutes" class="text-danger" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="content" class="form-label">Content</label>
                        <InputTextArea id="content" @bind-Value="Lesson.Content" class="form-control" rows="5"
                                      placeholder="Enter lesson content..." />
                        <ValidationMessage For="() => Lesson.Content" class="text-danger" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="videourl" class="form-label">Video URL</label>
                            <InputText id="videourl" @bind-Value="Lesson.VideoUrl" class="form-control"
                                      placeholder="https://example.com/video.mp4" />
                            <ValidationMessage For="() => Lesson.VideoUrl" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="documenturl" class="form-label">Document URL</label>
                            <InputText id="documenturl" @bind-Value="Lesson.DocumentUrl" class="form-control"
                                      placeholder="https://example.com/document.pdf" />
                            <ValidationMessage For="() => Lesson.DocumentUrl" class="text-danger" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="externalurl" class="form-label">External URL</label>
                            <InputText id="externalurl" @bind-Value="Lesson.ExternalUrl" class="form-control"
                                      placeholder="https://external-resource.com" />
                            <ValidationMessage For="() => Lesson.ExternalUrl" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="orderindex" class="form-label">Order Index</label>
                            <InputNumber id="orderindex" @bind-Value="Lesson.OrderIndex" class="form-control" placeholder="1" />
                            <ValidationMessage For="() => Lesson.OrderIndex" class="text-danger" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <InputCheckbox id="isrequired" @bind-Value="Lesson.IsRequired" class="form-check-input" />
                            <label for="isrequired" class="form-check-label">Is Required</label>
                        </div>
                        <ValidationMessage For="() => Lesson.IsRequired" class="text-danger" />
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>Create Lesson
                        </button>
                        <a href="/admin/lessons" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateLessonRequest Lesson { get; set; } = new();

    private List<DropdownOption> moduleOptions = new();
    private int? selectedModuleId;

    // Property to sync module selection with Lesson model
    private int? SelectedModuleId
    {
        get => Lesson.ModuleId == 0 ? null : Lesson.ModuleId;
        set
        {
            selectedModuleId = value;
            Lesson.ModuleId = value ?? 0;
        }
    }

    // Helper property for binding EstimatedDuration as minutes
    private int EstimatedDurationMinutes
    {
        get => (int)Lesson.EstimatedDuration.TotalMinutes;
        set => Lesson.EstimatedDuration = TimeSpan.FromMinutes(value);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            moduleOptions = await DropdownService.GetModulesAsync(take: 50);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initial data: {ex.Message}");
        }
    }

    private async Task<IEnumerable<DropdownOption>> SearchModules(string searchTerm)
    {
        try
        {
            return await DropdownService.GetModulesAsync(searchTerm, take: 20);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching modules: {ex.Message}");
            return Enumerable.Empty<DropdownOption>();
        }
    }

    private async Task AddLesson()
    {
        try
        {
            var result = await CourseService.CreateLessonAsync(Lesson);
            if (result != null)
            {
                NavigationManager.NavigateTo("/admin/lessons");
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add error display logic here
            Console.WriteLine($"Error creating lesson: {ex.Message}");
        }
    }
}