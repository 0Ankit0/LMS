@page "/admin/assessments"
@layout LMS.Components.Layout.AdminLayout
@using Microsoft.AspNetCore.Components.QuickGrid
@using LMS.Services
@inject IAssessmentService AssessmentService

<PageTitle>Assessments - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Assessments</h1>
    <a href="/admin/assessments/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-2"></i>Add New Assessment
    </a>
</div>

<div class="card">
    <div class="card-body">
        @if (paginatedAssessments != null)
        {
            if (paginatedAssessments.Items.Any())
            {
                <QuickGrid Class="table table-striped table-hover" Items="paginatedAssessments.Items.AsQueryable()">
                    <PropertyColumn Property="assessment => assessment.Title" Title="Title" />
                    <PropertyColumn Property="assessment => assessment.Description" Title="Description" />
                    <PropertyColumn Property="assessment => assessment.CourseId" Title="Course ID" />
                    <PropertyColumn Property="assessment => assessment.Type" Title="Type" />
                    <PropertyColumn Property="assessment => assessment.MaxAttempts" Title="Max Attempts" />
                    <PropertyColumn Property="assessment => assessment.PassingScore" Title="Passing Score" />
                    <PropertyColumn Property="assessment => assessment.IsRandomized" Title="Randomized" />
                    <PropertyColumn Property="assessment => assessment.AvailableFrom" Title="Available From" Format="yyyy-MM-dd" />

                    <TemplateColumn Title="Actions" Context="assessment">
                        <div class="btn-group" role="group">
                            <a href="@($"/admin/assessments/edit?id={assessment.Id}")" class="btn btn-sm btn-outline-primary">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <a href="@($"/admin/assessments/details?id={assessment.Id}")" class="btn btn-sm btn-outline-info">
                                <i class="bi bi-eye"></i> Details
                            </a>
                            <a href="@($"/admin/assessments/delete?id={assessment.Id}")" class="btn btn-sm btn-outline-danger">
                                <i class="bi bi-trash"></i> Delete
                            </a>
                        </div>
                    </TemplateColumn>
                </QuickGrid>

                <PaginationComponent 
                    PaginatedResult="paginatedAssessments"
                    OnPageChanged="OnPageChanged"
                    OnPageSizeChanged="OnPageSizeChanged" />
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">No assessments found.</p>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private PaginatedResult<AssessmentModel>? paginatedAssessments;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessmentsAsync();
    }

    private async Task LoadAssessmentsAsync()
    {
        var request = new PaginationRequest
        {
            PageNumber = currentPage,
            PageSize = pageSize
        };
        paginatedAssessments = await AssessmentService.GetAssessmentsPaginatedAsync(request);
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadAssessmentsAsync();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1;
        await LoadAssessmentsAsync();
    }
}
