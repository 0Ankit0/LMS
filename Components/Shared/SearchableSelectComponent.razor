@typeparam TItem
@typeparam TValue
@using System.Timers
@inject IJSRuntime JSRuntime

<div class="searchable-select @CssClass" @ref="containerRef">
    <div class="input-group">
        <input type="text" 
               class="form-control @(IsInvalid ? "is-invalid" : "")" 
               placeholder="@Placeholder"
               @bind="searchTerm" 
               @bind:event="oninput"
               @onfocus="OnInputFocus"
               @onblur="OnInputBlur"
               readonly="@IsReadOnly" />
        <button class="btn btn-outline-secondary dropdown-toggle" 
                type="button" 
                @onclick="ToggleDropdown"
                disabled="@IsDisabled">
            <i class="bi bi-chevron-down"></i>
        </button>
    </div>
    
    @if (showDropdown)
    {
        <div class="searchable-select-dropdown" @onmousedown:preventDefault="true">
            <div class="dropdown-header" style="display: @(AllowClear && SelectedValue != null ? "block" : "none")">
                <button type="button" class="btn btn-sm btn-outline-danger w-100" @onclick="ClearSelection">
                    <i class="bi bi-x-circle me-1"></i>Clear Selection
                </button>
            </div>
            
            @if (isLoading)
            {
                <div class="dropdown-item text-center">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading...</span>
                </div>
            }
            else if (!filteredItems.Any())
            {
                <div class="dropdown-item text-muted text-center">
                    @(string.IsNullOrWhiteSpace(searchTerm) ? "No items available" : "No items found")
                </div>
            }
            else
            {
                <div class="searchable-select-items" @ref="itemsContainerRef" @onscroll="OnScroll">
                    @foreach (var item in filteredItems.Take(displayCount))
                    {
                        var itemValue = ValueSelector(item);
                        var isSelected = SelectedValue?.Equals(itemValue) == true;
                        
                        <div class="dropdown-item searchable-select-item @(isSelected ? "active" : "")" 
                             @onclick="() => SelectItem(item)">
                            @DisplaySelector(item)
                        </div>
                    }
                    
                    @if (filteredItems.Count() > displayCount)
                    {
                        <div class="dropdown-item text-center">
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="LoadMore">
                                Load More (@(filteredItems.Count() - displayCount) remaining)
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<style>
    .searchable-select {
        position: relative;
        width: 100%;
    }

    .searchable-select-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        z-index: 1050;
        max-height: 300px;
        overflow: hidden;
    }

    .searchable-select-items {
        max-height: 240px;
        overflow-y: auto;
    }

    .searchable-select-item {
        cursor: pointer;
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        text-align: left;
        width: 100%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .searchable-select-item:hover {
        background-color: #f8f9fa;
    }

    .searchable-select-item.active {
        background-color: #0d6efd;
        color: white;
    }

    .dropdown-header {
        padding: 0.5rem;
        border-bottom: 1px solid #dee2e6;
    }
</style>

@code {
    [Parameter, EditorRequired] public IEnumerable<TItem>? Items { get; set; }
    [Parameter, EditorRequired] public Func<TItem, TValue> ValueSelector { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TItem, string> DisplaySelector { get; set; } = default!;
    [Parameter] public TValue? SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue?> SelectedValueChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Select an item...";
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public bool IsInvalid { get; set; } = false;
    [Parameter] public bool AllowClear { get; set; } = true;
    [Parameter] public int PageSize { get; set; } = 20;
    [Parameter] public Func<string, Task<IEnumerable<TItem>>>? SearchFunction { get; set; }

    private string searchTerm = "";
    private bool showDropdown = false;
    private bool isLoading = false;
    private int displayCount = 20;
    private IEnumerable<TItem> filteredItems = Enumerable.Empty<TItem>();
    private System.Timers.Timer? debounceTimer;
    private ElementReference containerRef;
    private ElementReference itemsContainerRef;

    protected override void OnInitialized()
    {
        debounceTimer = new System.Timers.Timer(300);
        debounceTimer.Elapsed += OnSearchDebounced;
        debounceTimer.AutoReset = false;
        
        UpdateDisplayText();
        FilterItems();
    }

    protected override void OnParametersSet()
    {
        UpdateDisplayText();
        FilterItems();
    }

    private void UpdateDisplayText()
    {
        if (SelectedValue != null && Items != null)
        {
            var selectedItem = Items.FirstOrDefault(item => ValueSelector(item)?.Equals(SelectedValue) == true);
            if (selectedItem != null)
            {
                searchTerm = DisplaySelector(selectedItem);
            }
        }
        else
        {
            searchTerm = "";
        }
    }

    private async void OnSearchDebounced(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await PerformSearch();
            StateHasChanged();
        });
    }

    private async Task PerformSearch()
    {
        if (SearchFunction != null && !string.IsNullOrWhiteSpace(searchTerm))
        {
            isLoading = true;
            try
            {
                var searchResults = await SearchFunction(searchTerm);
                filteredItems = searchResults;
                displayCount = PageSize;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Search error: {ex.Message}");
                filteredItems = Enumerable.Empty<TItem>();
            }
            finally
            {
                isLoading = false;
            }
        }
        else
        {
            FilterItems();
        }
    }

    private void FilterItems()
    {
        if (Items == null)
        {
            filteredItems = Enumerable.Empty<TItem>();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredItems = Items;
        }
        else
        {
            filteredItems = Items.Where(item => 
                DisplaySelector(item).Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
        
        displayCount = PageSize;
    }

    private void OnInputFocus()
    {
        showDropdown = true;
        if (SelectedValue != null)
        {
            // Clear search term when focusing to allow searching
            searchTerm = "";
            FilterItems();
        }
    }

    private async void OnInputBlur()
    {
        // Delay hiding dropdown to allow for item clicks
        await Task.Delay(150);
        showDropdown = false;
        UpdateDisplayText();
        StateHasChanged();
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
        if (showDropdown && SelectedValue != null)
        {
            searchTerm = "";
            FilterItems();
        }
        else if (!showDropdown)
        {
            UpdateDisplayText();
        }
        StateHasChanged();
    }

    private async Task SelectItem(TItem item)
    {
        var value = ValueSelector(item);
        SelectedValue = value;
        searchTerm = DisplaySelector(item);
        showDropdown = false;
        
        await SelectedValueChanged.InvokeAsync(value);
        StateHasChanged();
    }

    private async Task ClearSelection()
    {
        SelectedValue = default(TValue);
        searchTerm = "";
        showDropdown = false;
        await SelectedValueChanged.InvokeAsync(default(TValue));
        FilterItems();
        StateHasChanged();
    }

    private void LoadMore()
    {
        displayCount = Math.Min(displayCount + PageSize, filteredItems.Count());
        StateHasChanged();
    }

    private void OnScroll()
    {
        // Simple scroll detection - load more when scrolled to bottom
        LoadMore();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}
}

@implements IDisposable
