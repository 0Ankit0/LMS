@using LMS.Repositories
@rendermode @(new InteractiveServerRenderMode())
@inject ICategoryRepository CategoryRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Create Category - Admin</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <MudSkeleton SkeletonType="SkeletonType.Text" Width="200px" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="180px" Height="40px" />
    </div>

    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="500px" />
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0">Create New Category</h1>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/categories">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
            Back to Categories
        </MudButton>
    </div>

    <MudCard Elevation="2">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Category Information</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="Category" OnValidSubmit="AddCategory">
                <MudAlert Severity="Severity.Error" Class="mb-3" >
                    <MudText>Please correct the errors below.</MudText>
                </MudAlert>

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="Category.Name" Label="Name" Variant="Variant.Text" Required="true" RequiredError="Name is required!" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="Category.Color" Label="Color" Variant="Variant.Text" InputType="InputType.Color" />
                    </MudItem>
                </MudGrid>

                <MudTextField @bind-Value="Category.Description" Label="Description" Variant="Variant.Text" Lines="3" Placeholder="Enter category description" />

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="Category.IconUrl" Label="Icon URL" Variant="Variant.Text" Placeholder="https://example.com/icon.png" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect @bind-Value="Category.ParentCategoryId" Label="Parent Category" Variant="Variant.Text" Placeholder="Select parent category (optional)...">
                            @foreach (var category in parentCategories)
                            {
                                <MudSelectItem Value="@category.Value">@category.Text</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudCheckBox T="bool" @bind-Checked="Category.IsActive" Label="Is Active" Color="Color.Primary" />

                <div class="d-flex gap-2">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                        Create Category
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/admin/categories">Cancel</MudButton>
                </div>
            </EditForm>
        </MudCardContent>
    </MudCard>
}

@code {
    private CreateCategoryRequest Category { get; set; } = new();
    private bool isSubmitting = false;
    private bool isLoading = true;
    
    private List<DropdownOption<int>> parentCategories = new();

    protected override async Task OnInitializedAsync()
    {
        // Simulate data loading
        await Task.Delay(500);
        parentCategories = (await DropdownRepository.GetCategoriesAsync()).ToList();
        isLoading = false;
    }

    private async Task AddCategory()
    {
        if (isSubmitting) return;
        isSubmitting = true;
        try
        {
            var result = await CategoryRepository.CreateCategoryAsync(Category);
            if (result != null)
            {
                Snackbar.Add("Category created successfully!", Severity.Success);
                NavigationManager.NavigateTo("/admin/categories");
            }
            else
            {
                Snackbar.Add("Failed to create category. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating category: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}