@page "/admin/questions/create"

@layout AdminLayout

@inject IAssessmentRepository AssessmentRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Create Question - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Question</h1>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/questions">
        <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
        Back to Questions
    </MudButton>
</div>

<div class="row">
    <div class="col-lg-8">
        <MudCard Elevation="2">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Question Information</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudForm Model="Question" OnValidSubmit="AddQuestion" @ref="form">
                    <MudAlert Severity="Severity.Error" Class="my-3" Visible="@(!form.IsValid)">
                        <MudText>Please correct the errors below.</MudText>
                    </MudAlert>

                    <MudTextField @bind-Value="Question.Text" Label="Question Text" Variant="Variant.Text" Lines="3" Required="true" RequiredError="Question Text is required!" Placeholder="Enter the question text" />

                    <div class="row">
                        <MudItem xs="12" md="6">
                            <MudNumericField @bind-Value="Question.AssessmentId" Label="Assessment ID" Variant="Variant.Text" Required="true" RequiredError="Assessment ID is required!" Placeholder="Enter assessment ID" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="Question.Type" Label="Question Type" Variant="Variant.Text">
                                @foreach (var enumValue in Enum.GetValues(typeof(QuestionType)))
                                {
                                    <MudSelectItem Value="@enumValue">@enumValue.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </div>

                    <div class="row">
                        <MudItem xs="12" md="6">
                            <MudNumericField @bind-Value="Question.Points" Label="Points" Variant="Variant.Text" Placeholder="1" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudNumericField @bind-Value="Question.OrderIndex" Label="Order Index" Variant="Variant.Text" Placeholder="1" />
                        </MudItem>
                    </div>

                    <MudTextField @bind-Value="Question.Explanation" Label="Explanation" Variant="Variant.Text" Lines="3" Placeholder="Provide an explanation for the correct answer (optional)" />

                    <MudCheckBox T="bool" @bind-Checked="Question.IsRequired" Label="Is Required" Color="Color.Primary" />

                    <div class="d-flex gap-2">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                        Create Question
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/admin/questions">Cancel</MudButton>
                    </div>
                </MudForm>
            </MudCardContent>
        </MudCard>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateQuestionRequest Question { get; set; } = new();
    private bool isSubmitting = false;
    private MudForm form;

    private async Task AddQuestion()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;
        try
        {
            var result = await AssessmentRepository.CreateQuestionAsync(Question);
            if (result != null)
            {
                Snackbar.Add("Question created successfully!", Severity.Success);
                NavigationManager.NavigateTo("/admin/questions");
            }
            else
            {
                Snackbar.Add("Failed to create question. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating question: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
