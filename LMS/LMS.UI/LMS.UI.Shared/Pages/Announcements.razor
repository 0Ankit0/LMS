@using LMS.UI.Shared.Pages.Shared
@using MudBlazor;
@using MudBlazor.Utilities;
@using System.Net.Http.Json
@using LMS.Data.DTOs
@using LMS.UI.Shared.Pages
@page "/user/lms/announcements"
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Announcements - LMS</PageTitle>

<MudGrid Spacing="3">
    @if (isLoading)
    {
        @for (int i = 0; i < 3; i++)
        {
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" />
            </MudItem>
        }
    }
    else if (announcements?.Any() == true)
    {
        @foreach (var announcement in announcements)
        {
            <MudItem xs="12">
                <AnnouncementCard Announcement="announcement" />
            </MudItem>
        }
        <MudItem xs="12" Class="d-flex justify-content-end">
            <MudLink Href="/user/lms/announcement-list" Color="Color.Primary">View All</MudLink>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Campaign">
                <MudText Typo="Typo.h5">No announcements available</MudText>
                <MudText>There are no announcements at this time.</MudText>
            </MudAlert>
        </MudItem>
    }
</MudGrid>

@code {
    private bool isLoading = true;
    private List<AnnouncementModel> announcements = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await HttpClient.GetAsync("api/announcements/latest");
            if (response.IsSuccessStatusCode)
            {
                announcements = await response.Content.ReadFromJsonAsync<List<AnnouncementModel>>() ?? new List<AnnouncementModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
