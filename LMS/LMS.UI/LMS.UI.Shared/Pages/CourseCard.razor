@using LMS.Data.DTOs
@using LMS.Data.DTOs

@inject ISnackbar Snackbar

<MudCard Elevation="2" Class="course-card" OnClick="@(() => NavigateToCourseDetails(Course.Id))">
    <MudCardMedia Image="@Course.ThumbnailUrl" Height="180" Class="course-thumbnail" Alt="@Course.Title" />
    <MudCardContent>
        <div class="d-flex justify-content-between align-items-center mb-2">
            <MudText Typo="Typo.subtitle2" Class="course-level">@Course.Level</MudText>
            <MudChip T="string" Color="Color.Primary" Size="Size.Small">@Course.Categories.FirstOrDefault()</MudChip>
        </div>
        <MudText Typo="Typo.h6" Class="course-title">@Course.Title</MudText>
        <MudText Typo="Typo.body2" Class="course-description">@Course.Description</MudText>
        <div class="course-meta d-flex justify-content-between align-items-center mt-3">
            <div class="d-flex align-items-center">
                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="me-1" />
                <MudText Typo="Typo.caption">@Course.InstructorName</MudText>
            </div>
            <div class="d-flex align-items-center">
                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Class="me-1" />
                <MudText Typo="Typo.caption">@FormatDuration(Course.EstimatedDuration)</MudText>
            </div>
        </div>
    </MudCardContent>
    <MudCardActions Class="d-flex justify-content-between align-items-center">
        <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/user/lms/courses/{Course.Id}")">Learn More</MudButton>
        <MudIconButton Icon="@(IsBookmarked ? Icons.Material.Filled.Bookmark : Icons.Material.Filled.BookmarkBorder)" Color="@(IsBookmarked ? Color.Warning : Color.Default)" OnClick="ToggleBookmark" />
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public CourseModel Course { get; set; } = new();

    [Parameter]
    public bool IsBookmarked { get; set; }

    [Parameter]
    public EventCallback<int> OnBookmark { get; set; }

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    private void NavigateToCourseDetails(int courseId)
    {
        Navigation.NavigateTo($"/user/lms/courses/{courseId}");
    }

    private void ToggleBookmark()
    {
        OnBookmark.InvokeAsync(Course.Id);
        Snackbar.Add(IsBookmarked ? $"Removed {Course.Title} from bookmarks." : $"Added {Course.Title} to bookmarks.", Severity.Info);
    }

    private string FormatDuration(TimeSpan duration)
    {
        var hours = (int)duration.TotalHours;
        var minutes = duration.Minutes;

        if (hours > 0)
        {
            return minutes > 0 ? $"{hours}h {minutes}m" : $"{hours}h";
        }
        return $"{minutes}m";
    }
}