@using MudBlazor;
@using MudBlazor.Utilities;
@using System.Security.Claims
@page "/user/lms/certificates"
@inject LMS.UI.Shared.Abstractions.IAuthenticationService AuthenticationService
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudToolBar Class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <MudText Typo="Typo.h5" Class="h2">
        <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="me-2" />My Certificates
    </MudText>
    
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RefreshCertificates">
        <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="me-2" /> Refresh
    </MudButton>
</MudToolBar>

@if (isLoading)
{
    <div class="row mb-4">
        @for (int i = 0; i < 4; i++)
        {
            <div class="col-md-3">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" />
            </div>
        }
    </div>
    <div class="row">
        @for (int i = 0; i < 3; i++)
        {
            <div class="col-md-4 mb-4">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
            </div>
        }
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="text-primary" Size="Size.Large" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <MudText Typo="Typo.h5">@certificates.Count()</MudText>
                            <MudText Typo="Typo.body2">Total Certificates</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Class="text-success" Size="Size.Large" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <MudText Typo="Typo.h5">@certificates.Count(c => c.IssuedAt >= DateTime.Now.AddDays(-30))</MudText>
                            <MudText Typo="Typo.body2">This Month</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="text-info" Size="Size.Large" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <MudText Typo="Typo.h5">@certificates.Count(c => c.IsValid)</MudText>
                            <MudText Typo="Typo.body2">Valid</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="text-warning" Size="Size.Large" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <MudText Typo="Typo.h5">@certificates.Count(c => c.ExpiresAt.HasValue && c.ExpiresAt.Value <=
                                                            DateTime.Now.AddDays(30))</MudText>
                        <MudText Typo="Typo.body2">Expiring Soon</MudText>
                    </div>
                </div>
            </MudCardContent>
        </MudCard>
    </div>
</div>

    <div class="row">
    @foreach (var certificate in certificates)
        {
            <div class="col-lg-6 col-xl-4 mb-4">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <div class="d-flex justify-content-between align-items-center">
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="me-2" />
                                Certificate
                            </MudText>
                            <MudChip T="string" Color="Color.Success" Size="Size.Small">
                                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="me-1" /> Valid
                            </MudChip>
                        </div>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudText Typo="Typo.h5" Class="text-primary">@certificate.CourseTitle</MudText>

                        <div class="mb-3">
                            <MudText Typo="Typo.body2">
                                <strong>Certificate #:</strong> @certificate.CertificateNumber
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Issued:</strong> @certificate.IssuedAt.ToString("MMMM dd, yyyy")
                            </MudText>
                            @if (certificate.ExpiresAt.HasValue)
                            {
                                <MudText Typo="Typo.body2">
                                    <strong>Expires:</strong> @certificate.ExpiresAt.Value.ToString("MMMM dd, yyyy")
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2">
                                    <strong>Validity:</strong> <span class="text-success">Lifetime</span>
                                </MudText>
                            }
                        </div>

                        <!-- Certificate Grade/Score -->
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-1">
                                <MudText Typo="Typo.body2">Final Grade: @certificate.FinalGrade.ToString("F1")%</MudText>
                                <MudChip T="string" Color="@GetGradeBadgeColor(certificate.FinalGrade)">
                                    @GetGradeLabel(certificate.FinalGrade)
                                </MudChip>
                            </div>
                            <MudProgressLinear Value="@(certificate.FinalGrade)" Color="@GetGradeProgressColor(certificate.FinalGrade)" Class="my-2" />
                        </div>
                    </MudCardContent>

                    <MudCardActions Class="d-grid gap-2">
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" FullWidth="true">
                            <MudButton OnClick="() => ViewCertificate(certificate)">
                                <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="me-2" /> View
                            </MudButton>
                            <MudButton OnClick="() => DownloadCertificate(certificate)">
                                <MudIcon Icon="@Icons.Material.Filled.Download" Class="me-2" /> Download
                            </MudButton>
                            <MudButton OnClick="() => ShareCertificate(certificate)">
                                <MudIcon Icon="@Icons.Material.Filled.Share" Class="me-2" /> Share
                            </MudButton>
                        </MudButtonGroup>
                    </MudCardActions>
                </MudCard>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Size="Size.Large" Class="text-muted mb-3" />
                <MudText Typo="Typo.h5" Class="text-muted">No Certificates Earned</MudText>
                <MudText Typo="Typo.body1" Class="text-muted">Complete courses to earn certificates and showcase your achievements.</MudText>
                <MudButton Href="/user/lms/coursecatalog" Variant="Variant.Filled" Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.Book" Class="me-2" /> Browse Courses
                </MudButton>
            </MudCardContent>
        </MudCard>
    </div>
}

@code {
    private List<CertificateModel>? certificates;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificates();
    }

    private async Task LoadCertificates()
    {
        try
        {
            isLoading = true;
            var user = await AuthenticationService.GetUser();
            var currentUserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                certificates = await HttpClient.GetFromJsonAsync<List<CertificateModel>>($"/api/certificates/user/{currentUserId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading certificates: {ex.Message}");
            // Fallback to mock data
            certificates = GetMockCertificates();
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<CertificateModel> GetMockCertificates()
    {
        return new List<CertificateModel>
{
new()
{
Id = 1,
CourseTitle = "Introduction to Programming",
CertificateNumber = "CERT-2024-001",
IssuedAt = DateTime.Now.AddDays(-30),
FinalGrade = 92.5,
IsValid = true
},
new()
{
Id = 2,
CourseTitle = "Web Development Fundamentals",
CertificateNumber = "CERT-2024-002",
IssuedAt = DateTime.Now.AddDays(-60),
ExpiresAt = DateTime.Now.AddYears(2),
FinalGrade = 87.0,
IsValid = true
},
new()
{
Id = 3,
CourseTitle = "Database Design",
CertificateNumber = "CERT-2024-003",
IssuedAt = DateTime.Now.AddDays(-90),
FinalGrade = 95.5,
IsValid = true
}
};
    }

    private async Task RefreshCertificates()
    {
        await LoadCertificates();
    }

    private void ViewCertificate(CertificateModel certificate)
    {
        Snackbar.Add($"Viewing certificate: {certificate.CertificateNumber}", Severity.Info);
    }

    private void DownloadCertificate(CertificateModel certificate)
    {
        Snackbar.Add($"Downloading certificate: {certificate.CertificateNumber}", Severity.Info);
    }

    private void ShareCertificate(CertificateModel certificate)
    {
        var shareUrl = $"Certificate: {certificate.CourseTitle} - {certificate.CertificateNumber}";
        Snackbar.Add($"Share link copied: {shareUrl}", Severity.Success);
    }

    private MudBlazor.Color GetGradeBadgeColor(double grade) => grade switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private MudBlazor.Color GetGradeProgressColor(double grade) => grade switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private string GetGradeLabel(double grade) => grade switch
    {
        >= 90 => "Excellent",
        >= 80 => "Good",
        >= 70 => "Satisfactory",
        _ => "Pass"
    };
}