@typeparam TItem

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="d-flex align-items-center">
        <label for="pageSize" class="form-label me-2 mb-0">Show:</label>
        <select @onchange="HandlePageSizeChanged" class="form-select" style="width: auto;" id="pageSize">
            <option value="10" selected="@(EffectivePageSize == 10)">10</option>
            <option value="25" selected="@(EffectivePageSize == 25)">25</option>
            <option value="50" selected="@(EffectivePageSize == 50)">50</option>
            <option value="100" selected="@(EffectivePageSize == 100)">100</option>
        </select>
        <span class="ms-2 text-muted">
            Showing @StartItem to @EndItem of @EffectiveTotalCount items
        </span>
    </div>

    @if (EffectiveTotalPages > 1)
    {
        <nav aria-label="Table pagination">
            <ul class="pagination mb-0">
                <li class="page-item @(EffectiveCurrentPage == 1 ? "disabled" : "")">
                    <button @onclick="() => HandlePageChanged(1)" class="page-link" disabled="@(EffectiveCurrentPage == 1)">
                        &laquo;&laquo;
                    </button>
                </li>
                <li class="page-item @(EffectiveCurrentPage == 1 ? "disabled" : "")">
                    <button @onclick="() => HandlePageChanged(EffectiveCurrentPage - 1)" class="page-link"
                        disabled="@(EffectiveCurrentPage == 1)">
                        &laquo;
                    </button>
                </li>

                @foreach (var pageNumber in GetVisiblePages())
                {
                    <li class="page-item @(pageNumber == EffectiveCurrentPage ? "active" : "")">
                        <button @onclick="() => HandlePageChanged(pageNumber)" class="page-link">
                            @pageNumber
                        </button>
                    </li>
                }

                <li class="page-item @(EffectiveCurrentPage == EffectiveTotalPages ? "disabled" : "")">
                    <button @onclick="() => HandlePageChanged(EffectiveCurrentPage + 1)" class="page-link"
                        disabled="@(EffectiveCurrentPage == EffectiveTotalPages)">
                        &raquo;
                    </button>
                </li>
                <li class="page-item @(EffectiveCurrentPage == EffectiveTotalPages ? "disabled" : "")">
                    <button @onclick="() => HandlePageChanged(EffectiveTotalPages)" class="page-link"
                        disabled="@(EffectiveCurrentPage == EffectiveTotalPages)">
                        &raquo;&raquo;
                    </button>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int TotalCount { get; set; }
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public PaginatedResult<TItem>? PaginatedResult { get; set; }
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }

    private int EffectiveCurrentPage => PaginatedResult?.PageNumber ?? CurrentPage;
    private int EffectivePageSize => PaginatedResult?.PageSize ?? PageSize;
    private int EffectiveTotalCount => PaginatedResult?.TotalCount ?? TotalCount;
    private int EffectiveTotalPages => PaginatedResult?.TotalPages ?? TotalPages;

    private int StartItem => EffectiveTotalCount == 0 ? 0 : ((EffectiveCurrentPage - 1) * EffectivePageSize) + 1;
    private int EndItem => Math.Min(EffectiveCurrentPage * EffectivePageSize, EffectiveTotalCount);

    private async Task HandlePageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            await OnPageSizeChanged.InvokeAsync(newSize);
        }
    }

    private async Task HandlePageChanged(int page)
    {
        await OnPageChanged.InvokeAsync(page);
    }

    private IEnumerable<int> GetVisiblePages()
    {
        const int maxVisiblePages = 5;
        var half = maxVisiblePages / 2;
        var start = Math.Max(1, EffectiveCurrentPage - half);
        var end = Math.Min(EffectiveTotalPages, start + maxVisiblePages - 1);

        // Adjust start if we're near the end
        if (end - start + 1 < maxVisiblePages)
        {
            start = Math.Max(1, end - maxVisiblePages + 1);
        }

        return Enumerable.Range(start, end - start + 1);
    }
}
