@typeparam TItem


<div class="card">
    <div class="card-body">
        @if (PaginatedResult != null)
        {
            if (PaginatedResult.Items.Any())
            {
                @if (UseCustomTable)
                {
                    <!-- Custom table implementation for better compatibility -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr> @if (TableColumns != null)
                                    {
                                        @foreach (var column in TableColumns)
                                        {
                                            <th>@column.Title</th>
                                        }
                                    }
                                    @if (Actions != null)
                                    {
                                        <th>Actions</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in PaginatedResult.Items)
                                {
                                    <tr>
                                        @if (TableColumns != null)
                                        {
                                            @foreach (var column in TableColumns)
                                            {
                                                <td>@column.ValueSelector(item)</td>
                                            }
                                        }
                                        @if (Actions != null)
                                        {
                                            <td>@Actions(item)</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <!-- QuickGrid implementation for when Columns RenderFragment is provided -->
                    <QuickGrid Class="table table-striped table-hover" Items="PaginatedResult.Items.AsQueryable()">
                        @Columns
                        @if (Actions != null)
                        {
                            <TemplateColumn Title="Actions" Context="item">
                                @Actions(item)
                            </TemplateColumn>
                        }
                    </QuickGrid>
                }

                <PaginationComponent TItem="TItem" PaginatedResult="PaginatedResult" OnPageChanged="OnPageChanged"
                    OnPageSizeChanged="OnPageSizeChanged" />
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">@EmptyMessage</p>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired] public PaginatedResult<TItem>? PaginatedResult { get; set; }
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public List<TableColumn<TItem>>? TableColumns { get; set; }
    [Parameter] public RenderFragment<TItem>? Actions { get; set; }
    [Parameter] public string EmptyMessage { get; set; } = "No items found.";
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }

    private bool UseCustomTable => TableColumns != null && TableColumns.Any();

    protected override void OnParametersSet()
    {
        if (Columns == null && (TableColumns == null || !TableColumns.Any()))
        {
            throw new InvalidOperationException("Either Columns RenderFragment or TableColumns list must be provided.");
        }
    }
}
