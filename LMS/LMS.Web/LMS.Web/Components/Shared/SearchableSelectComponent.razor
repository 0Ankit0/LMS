@typeparam TItem
@typeparam TValue
@using BlazorBootstrap

<AutoComplete TItem="TItem"
              @bind-Value="StringValue"
              DataProvider="AutoCompleteDataProvider"
              PropertyName="@DisplayPropertyName"
              Placeholder="@Placeholder"
              Disabled="@IsDisabled"
              Class="@CssClass"
              EmptyText="@EmptyText" />

@code {
    [Parameter] public TValue? SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue?> SelectedValueChanged { get; set; }
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter, EditorRequired] public Func<TItem, string> DisplaySelector { get; set; } = default!;
    [Parameter, EditorRequired] public Func<TItem, TValue> ValueSelector { get; set; } = default!;
    [Parameter] public string DisplayPropertyName { get; set; } = "Name";
    [Parameter] public string Placeholder { get; set; } = "Select an item...";
    [Parameter] public string EmptyText { get; set; } = "No items found";
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public Func<Task<IEnumerable<TItem>>>? OnLoad { get; set; }

    private string? StringValue
    {
        get
        {
            if (SelectedValue == null || Items == null) return null;
            var item = Items.FirstOrDefault(i => EqualityComparer<TValue>.Default.Equals(ValueSelector(i), SelectedValue));
            return item != null ? DisplaySelector(item) : null;
        }
        set
        {
            if (string.IsNullOrEmpty(value) || Items == null)
            {
                SelectedValue = default;
            }
            else
            {
                var item = Items.FirstOrDefault(i => DisplaySelector(i) == value);
                SelectedValue = item != null ? ValueSelector(item) : default;
            }
            _ = SelectedValueChanged.InvokeAsync(SelectedValue);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (OnLoad != null && Items == null)
            {
                Items = await OnLoad();
            }
        }
        catch (Exception ex)
        {
            // Log the exception if you have a logger
            Console.WriteLine($"Error loading items: {ex.Message}");
            Items = Enumerable.Empty<TItem>();
        }
    }

    private async Task<AutoCompleteDataProviderResult<TItem>>
    AutoCompleteDataProvider(AutoCompleteDataProviderRequest<TItem> request)
    {
        try
        {
            var items = Items ?? Enumerable.Empty<TItem>();

            if (request.Filter != null && !string.IsNullOrWhiteSpace(request.Filter.Value))
            {
                items = items.Where(item => DisplaySelector(item).Contains(request.Filter.Value, StringComparison.OrdinalIgnoreCase));
            }

            return await Task.FromResult(new AutoCompleteDataProviderResult<TItem>
            {
                Data = items,
                TotalCount = items.Count()
            });
        }
        catch (Exception ex)
        {
            // Log the exception if you have a logger
            Console.WriteLine($"Error in AutoComplete data provider: {ex.Message}");
            return await Task.FromResult(new AutoCompleteDataProviderResult<TItem>
            {
                Data = Enumerable.Empty<TItem>(),
                TotalCount = 0
            });
        }
    }
}