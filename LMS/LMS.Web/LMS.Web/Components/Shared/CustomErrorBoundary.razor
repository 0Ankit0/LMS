@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inherits ErrorBoundaryBase

@if (CurrentException is null)
{
    @ChildContent
}
else
{
    <div class="error-boundary-container">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">
                <i class="bi bi-exclamation-triangle-fill"></i>
                An error has occurred
            </h4>
            <p class="mb-3">
                We're sorry, but something went wrong. The error has been logged and our team has been notified.
            </p>

            @if (ShowDetailedErrors)
            {
                <div class="error-details mt-3">
                    <h5>Error Details:</h5>
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title text-danger">@CurrentException.GetType().Name</h6>
                            <p class="card-text">
                                <strong>Message:</strong> @CurrentException.Message
                            </p>

                            @if (!string.IsNullOrEmpty(CurrentException.StackTrace))
                            {
                                <div class="mt-3">
                                    <h6>Stack Trace:</h6>
                                    <pre class="bg-light p-2 rounded"
                                        style="font-size: 0.8rem; max-height: 300px; overflow-y: auto;">@CurrentException.StackTrace</pre>
                                </div>
                            }

                            @if (CurrentException.InnerException != null)
                            {
                                <div class="mt-3">
                                    <h6>Inner Exception:</h6>
                                    <p><strong>Type:</strong> @CurrentException.InnerException.GetType().Name</p>
                                    <p><strong>Message:</strong> @CurrentException.InnerException.Message</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <div class="mt-3">
                <button class="btn btn-primary me-2" @onclick="RecoverFromError">
                    <i class="bi bi-arrow-clockwise"></i>
                    Try Again
                </button>
                <button class="btn btn-outline-secondary me-2" @onclick="GoHome">
                    <i class="bi bi-house"></i>
                    Go to Home
                </button>
                <button class="btn btn-outline-info" @onclick="ReloadPage">
                    <i class="bi bi-arrow-repeat"></i>
                    Reload Page
                </button>
            </div>

            @if (ShowDetailedErrors)
            {
                <div class="mt-3">
                    <button class="btn btn-outline-warning btn-sm" @onclick="CopyErrorDetails">
                        <i class="bi bi-clipboard"></i>
                        Copy Error Details
                    </button>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowDetailedErrors { get; set; } = true;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private ILogger<CustomErrorBoundary> Logger { get; set; } = default!;

    protected override Task OnErrorAsync(Exception exception)
    {
        // Log the error
        Logger.LogError(exception, "Unhandled exception occurred in error boundary");

        return Task.CompletedTask;
    }

    private void RecoverFromError()
    {
        Recover();
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void ReloadPage()
    {
        NavigationManager.Refresh();
    }

    private async Task CopyErrorDetails()
    {
        if (CurrentException != null)
        {
            var errorDetails = $"Error Type: {CurrentException.GetType().Name}\n" +
            $"Message: {CurrentException.Message}\n" +
            $"Stack Trace: {CurrentException.StackTrace}\n\n" +
            $"Inner Exception: {CurrentException.InnerException?.GetType().Name}\n" +
            $"Inner Message: {CurrentException.InnerException?.Message}\n\n" +
            $"Timestamp: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n" +
            $"URL: {NavigationManager.Uri}";

            try
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", errorDetails);
                // You could show a toast notification here
            }
            catch
            {
                // Fallback - could implement a different copy method
            }
        }
    }
}

<style>
    .error-boundary-container {
        margin: 1rem;
        max-width: 100%;
    }

    .error-details pre {
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .alert-heading i {
        margin-right: 0.5rem;
    }

    .btn i {
        margin-right: 0.25rem;
    }
</style>

                                       