@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inherits ErrorBoundaryBase

@if (CurrentException is null)
{
    @ChildContent
}
else
{
    <div class="error-boundary-container">
        <MudAlert Severity="Severity.Error" Class="my-3" NoIcon="true">
        <MudText Typo="Typo.h6">
            An error has occurred.
        </MudText>
        <MudText Class="mb-3">
            We're sorry, but something went wrong. The error has been logged and our team has been notified.
        </MudText>

            @if (ShowDetailedErrors)
            {
                <MudCard Elevation="2" Class="error-details mt-3">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Error Details:</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1" Class="text-danger">@CurrentException.GetType().Name</MudText>
                        <MudText>
                            <strong>Message:</strong> @CurrentException.Message
                        </MudText>

                        @if (!string.IsNullOrEmpty(CurrentException.StackTrace))
                        {
                            <div class="mt-3">
                                <MudText Typo="Typo.subtitle1">Stack Trace:</MudText>
                                <pre class="mud-code-block">@CurrentException.StackTrace</pre>
                            </div>
                        }

                        @if (CurrentException.InnerException != null)
                        {
                            <div class="mt-3">
                                <MudText Typo="Typo.subtitle1">Inner Exception:</MudText>
                                <MudText><strong>Type:</strong> @CurrentException.InnerException.GetType().Name</MudText>
                                <MudText><strong>Message:</strong> @CurrentException.InnerException.Message</MudText>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            }

            <div class="mt-3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RecoverFromError">
                    <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="me-2" />
                    Try Again
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="GoHome">
                    <MudIcon Icon="@Icons.Material.Filled.Home" Class="me-2" />
                    Go to Home
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ReloadPage">
                    <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="me-2" />
                    Reload Page
                </MudButton>
            </div>

            @if (ShowDetailedErrors)
            {
                <div class="mt-3">
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Small" OnClick="CopyErrorDetails">
                        <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Class="me-2" />
                        Copy Error Details
                    </MudButton>
                </div>
            }
        </MudAlert>
    </div>
}

@code {
    [Parameter] public bool ShowDetailedErrors { get; set; } = true;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private ILogger<CustomErrorBoundary> Logger { get; set; } = default!;

    protected override Task OnErrorAsync(Exception exception)
    {
        // Log the error
        Logger.LogError(exception, "Unhandled exception occurred in error boundary");

        return Task.CompletedTask;
    }

    private void RecoverFromError()
    {
        Recover();
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void ReloadPage()
    {
        NavigationManager.Refresh();
    }

    private async Task CopyErrorDetails()
    {
        if (CurrentException != null)
        {
            var errorDetails = $"Error Type: {CurrentException.GetType().Name}\n" +
            $"Message: {CurrentException.Message}\n" +
            $"Stack Trace: {CurrentException.StackTrace}\n\n" +
            $"Inner Exception: {CurrentException.InnerException?.GetType().Name}\n" +
            $"Inner Message: {CurrentException.InnerException?.Message}\n\n" +
            $"Timestamp: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n" +
            $"URL: {NavigationManager.Uri}";

            try
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", errorDetails);
                // You could show a toast notification here
            }
            catch
            {
                // Fallback - could implement a different copy method
            }
        }
    }
}

<style>
    .error-boundary-container {
        margin: 1rem;
        max-width: 100%;
    }

    .error-details pre {
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .alert-heading i {
        margin-right: 0.5rem;
    }

    .btn i {
        margin-right: 0.25rem;
    }
</style>

                                       