@inherits LayoutComponentBase
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<CustomErrorBoundary ShowDetailedErrors="true">
    <div class="page">
        <div class="sidebar">
            <NavMenu />

        </div>

        <main>
            <div class="top-row">
                <ManageNav></ManageNav>
            </div>

            <div class="container-fluid">
                @Body
            </div>
        </main>
    </div>
</CustomErrorBoundary>

@if (showPageLoader)
{
    <div class="page-loader">
        <div class="spinner"></div>
    </div>
}

<!-- Toast Container -->
<ToastContainer />

<style>
    .page-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border-left-color: #0d6efd;
        animation: spin 1s ease infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private bool showPageLoader = false;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showPageLoader)
        {
            showPageLoader = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        showPageLoader = true;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}
