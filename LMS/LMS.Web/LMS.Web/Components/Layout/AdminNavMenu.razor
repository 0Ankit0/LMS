@rendermode InteractiveAuto
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudAppBar Elevation="0">
    <MudIconButton Icon="@(isNavbarCollapsed ? Icons.Material.Filled.ChevronRight : Icons.Material.Filled.ChevronLeft)" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleNavbar" Title="@(isNavbarCollapsed ? "Expand sidebar" : "Collapse sidebar")" />
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.End" OnClick="ToggleMobileMenu" Title="Toggle navigation menu" />
</MudAppBar>

<MudNavMenu Class="@($"nav-scrollable {GetNavScrollableClasses()}")" Style="@(isMobileMenuOpen ? "display: block;" : "")">
    <MudNavLink Href="/admin" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" Style="line-height: 1.2; font-size: 0.97rem;">Dashboard</MudNavLink>
    <MudNavLink Href="/admin/analytics" Icon="@Icons.Material.Filled.Analytics" Style="line-height: 1.2; font-size: 0.97rem;">Analytics</MudNavLink>
    <MudNavLink Href="/admin/assessments" Icon="@Icons.Material.Filled.AssignmentTurnedIn" Style="line-height: 1.2; font-size: 0.97rem;">Assessments</MudNavLink>
    <MudNavLink Href="/admin/categories" Icon="@Icons.Material.Filled.Category" Style="line-height: 1.2; font-size: 0.97rem;">Categories</MudNavLink>
    <MudNavLink Href="/admin/courses" Icon="@Icons.Material.Filled.Book" Style="line-height: 1.2; font-size: 0.97rem;">Courses</MudNavLink>
    <MudNavLink OnClick="Logout" Icon="@Icons.Material.Filled.Logout" Style="line-height: 1.2; font-size: 0.97rem;">Logout</MudNavLink>
</MudNavMenu>

@code {
    private bool isNavbarCollapsed = false;
    private bool isMobileMenuOpen = false;

    private void ToggleNavbar() => isNavbarCollapsed = !isNavbarCollapsed;

    private void ToggleMobileMenu() => isMobileMenuOpen = !isMobileMenuOpen;

    private string GetNavScrollableClasses()
    {
        var classes = new List<string>();
        if (isNavbarCollapsed)
            classes.Add("collapsed");
        return string.Join(" ", classes);
    }

    private async Task Logout()
    {
        // Set the target return URL after logout (adjust as needed)
        var returnUrl = "Account/Login";
        var formData = new Dictionary<string, string>
        {
            { "returnUrl", returnUrl }
        };
        var content = new FormUrlEncodedContent(formData);

        // Make POST call to the API Logout endpoint
        var response = await Http.PostAsync("/Account/Logout", content);
        if (response.IsSuccessStatusCode)
        {
            // Navigate to the return URL on successful logout. Force load clears cached user data.
            NavigationManager.NavigateTo(returnUrl, forceLoad: true);
        }
        else
        {
            Console.WriteLine("Logout failed: " + response.ReasonPhrase);
        }
    }
}