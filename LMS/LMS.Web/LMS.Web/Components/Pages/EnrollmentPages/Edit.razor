@page "/enrollments/edit"
@using Microsoft.EntityFrameworkCore
@using LMS.Data.Entities
@inject IDbContextFactory<LMS.Data.Entities.AuthDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Enrollment</h2>
<hr />
@if (Enrollment is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Enrollment" OnValidSubmit="UpdateEnrollment">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Enrollment.Id" value="@Enrollment.Id" />
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputText id="userid" @bind-Value="Enrollment.UserId" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Enrollment.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="courseid" class="form-label">CourseId:</label>
                    <InputNumber id="courseid" @bind-Value="Enrollment.CourseId" class="form-control" />
                    <ValidationMessage For="() => Enrollment.CourseId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="enrolledat" class="form-label">EnrolledAt:</label>
                    <InputDate id="enrolledat" @bind-Value="Enrollment.EnrolledAt" class="form-control" />
                    <ValidationMessage For="() => Enrollment.EnrolledAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="startedat" class="form-label">StartedAt:</label>
                    <InputDate id="startedat" @bind-Value="Enrollment.StartedAt" class="form-control" />
                    <ValidationMessage For="() => Enrollment.StartedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="completedat" class="form-label">CompletedAt:</label>
                    <InputDate id="completedat" @bind-Value="Enrollment.CompletedAt" class="form-control" />
                    <ValidationMessage For="() => Enrollment.CompletedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Enrollment.Status" class="form-control">
                        @foreach (var enumValue in Enum.GetValues(typeof(EnrollmentStatus)))
                        {
                            <option value="@enumValue">@enumValue.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Enrollment.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="progresspercentage" class="form-label">ProgressPercentage:</label>
                    <InputNumber id="progresspercentage" @bind-Value="Enrollment.ProgressPercentage" class="form-control" />
                    <ValidationMessage For="() => Enrollment.ProgressPercentage" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="timespent" class="form-label">TimeSpent (minutes):</label>
                    <InputNumber id="timespent" @bind-Value="TimeSpentMinutes" class="form-control" />
                    <ValidationMessage For="() => TimeSpentMinutes" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="finalgrade" class="form-label">FinalGrade:</label>
                    <InputNumber id="finalgrade" @bind-Value="Enrollment.FinalGrade" class="form-control" />
                    <ValidationMessage For="() => Enrollment.FinalGrade" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="iscertificateissued" class="form-label">IsCertificateIssued:</label>
                    <InputCheckbox id="iscertificateissued" @bind-Value="Enrollment.IsCertificateIssued" class="form-check-input" />
                    <ValidationMessage For="() => Enrollment.IsCertificateIssued" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="certificateissuedat" class="form-label">CertificateIssuedAt:</label>
                    <InputDate id="certificateissuedat" @bind-Value="Enrollment.CertificateIssuedAt" class="form-control" />
                    <ValidationMessage For="() => Enrollment.CertificateIssuedAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/enrollments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Enrollment? Enrollment { get; set; }

    // Helper property for binding TimeSpent as minutes
    private int TimeSpentMinutes
    {
        get => (int)(Enrollment?.TimeSpent.TotalMinutes ?? 0);
        set { if (Enrollment != null) Enrollment.TimeSpent = TimeSpan.FromMinutes(value); }
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Enrollment ??= await context.Enrollments.FirstOrDefaultAsync(m => m.Id == Id);

        if (Enrollment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateEnrollment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Enrollment!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EnrollmentExists(Enrollment!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/enrollments");
    }

    private bool EnrollmentExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Enrollments.Any(e => e.Id == id);
    }
}