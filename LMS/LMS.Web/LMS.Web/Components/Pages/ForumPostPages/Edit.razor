@page "/forumposts/edit"
@using Microsoft.EntityFrameworkCore
@using LMS.Data.Entities
@inject IDbContextFactory<LMS.Data.Entities.AuthDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>ForumPost</h2>
<hr />
@if (ForumPost is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ForumPost" OnValidSubmit="UpdateForumPost" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="ForumPost.Id" value="@ForumPost.Id" />
                <div class="mb-3">
                    <label for="content" class="form-label">Content:</label>
                    <InputText id="content" @bind-Value="ForumPost.Content" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ForumPost.Content" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="topicid" class="form-label">TopicId:</label>
                    <InputNumber id="topicid" @bind-Value="ForumPost.TopicId" class="form-control" />
                    <ValidationMessage For="() => ForumPost.TopicId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="authorid" class="form-label">AuthorId:</label>
                    <InputText id="authorid" @bind-Value="ForumPost.AuthorId" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ForumPost.AuthorId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="parentpostid" class="form-label">ParentPostId:</label>
                    <InputNumber id="parentpostid" @bind-Value="ForumPost.ParentPostId" class="form-control" />
                    <ValidationMessage For="() => ForumPost.ParentPostId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="ForumPost.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => ForumPost.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="ForumPost.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => ForumPost.UpdatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isdeleted" class="form-label">IsDeleted:</label>
                    <InputCheckbox id="isdeleted" @bind-Value="ForumPost.IsDeleted" class="form-check-input" />
                    <ValidationMessage For="() => ForumPost.IsDeleted" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/forumposts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private ForumPost? ForumPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        ForumPost ??= await context.ForumPosts.FirstOrDefaultAsync(m => m.Id == Id);

        if (ForumPost is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateForumPost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(ForumPost!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ForumPostExists(ForumPost!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/forumposts");
    }

    private bool ForumPostExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.ForumPosts.Any(e => e.Id == id);
    }
}
