@page "/achievements/create"
@using Microsoft.EntityFrameworkCore
@using LMS.Data.Entities
@inject IDbContextFactory<LMS.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Achievement</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Achievement" OnValidSubmit="AddAchievement" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Achievement.Name" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Achievement.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Achievement.Description" class="form-control" />
                <ValidationMessage For="() => Achievement.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="iconurl" class="form-label">IconUrl:</label>
                <InputText id="iconurl" @bind-Value="Achievement.IconUrl" class="form-control" />
                <ValidationMessage For="() => Achievement.IconUrl" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="points" class="form-label">Points:</label>
                <InputNumber id="points" @bind-Value="Achievement.Points" class="form-control" />
                <ValidationMessage For="() => Achievement.Points" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="badgecolor" class="form-label">BadgeColor:</label>
                <InputText id="badgecolor" @bind-Value="Achievement.BadgeColor" class="form-control" />
                <ValidationMessage For="() => Achievement.BadgeColor" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Type:</label>
                <InputSelect id="type" @bind-Value="Achievement.Type" class="form-control">
                    @foreach (var enumValue in Enum.GetValues(typeof(AchievementType)))
                    {
                        <option value="@enumValue">@enumValue.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Achievement.Type" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isactive" class="form-label">IsActive:</label>
                <InputCheckbox id="isactive" @bind-Value="Achievement.IsActive" class="form-check-input" />
                <ValidationMessage For="() => Achievement.IsActive" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="createdat" class="form-label">CreatedAt:</label>
                <InputDate id="createdat" @bind-Value="Achievement.CreatedAt" class="form-control" />
                <ValidationMessage For="() => Achievement.CreatedAt" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/achievements">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Achievement Achievement { get; set; } = new();

    protected override void OnInitialized()
    {
        Achievement ??= new Achievement
        {
            Name = string.Empty,
            Description = string.Empty,
            BadgeColor = string.Empty,
            IsActive = true,
            CreatedAt = DateTime.UtcNow,
            // Set a valid default value for AchievementType
            Type = Enum.GetValues(typeof(AchievementType)).Cast<AchievementType>().FirstOrDefault()
        };
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddAchievement()
    {
        using var context = DbFactory.CreateDbContext();

        // Set the CreatedAt if not already set
        if (Achievement.CreatedAt == default)
        {
            Achievement.CreatedAt = DateTime.UtcNow;
        }

        context.Achievements.Add(Achievement);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/achievements");
    }
}