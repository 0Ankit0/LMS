@layout AdminLayout
@using LMS.Data.Entities
@using LMS.Infrastructure.Data
@using LMS.Repositories
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject ILogger<DiagnosticInfo> Logger
@inject IServiceProvider ServiceProvider
@inject IConfiguration Configuration

<div class="container mt-4">
    <h3>üîç Diagnostic Information</h3>
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Environment</h5>
                </div>
                <div class="card-body">
                    <p><strong>Environment:</strong> @Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT")</p>
                    <p><strong>Machine Name:</strong> @Environment.MachineName</p>
                    <p><strong>OS Version:</strong> @Environment.OSVersion</p>
                    <p><strong>Current Directory:</strong> @Environment.CurrentDirectory</p>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Database Connection</h5>
                </div>
                <div class="card-body">
                    <p><strong>Connection String:</strong> @(DatabaseStatus?.ConnectionString ?? "Not available")</p>
                    <p><strong>Status:</strong>
                        <span class="badge @(DatabaseStatus?.IsConnected == true ? "bg-success" : "bg-danger")">
                            @(DatabaseStatus?.IsConnected == true ? "Connected" : "Disconnected")
                        </span>
                    </p>
                    @if (!string.IsNullOrEmpty(DatabaseStatus?.Error))
                    {
                        <p><strong>Error:</strong> <span class="text-danger">@DatabaseStatus.Error</span></p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Registered Services</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var service in ServiceStatuses)
                        {
                            <div class="col-md-4 mb-2">
                                <span class="badge @(service.IsRegistered ? "bg-success" : "bg-danger")">
                                    @(service.IsRegistered ? "‚úì" : "‚úó")
                                </span>
                                @service.ServiceName
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="RefreshDiagnostics">üîÑ Refresh</button>
    </div>
</div>

@code {
    private DatabaseStatusInfo? DatabaseStatus { get; set; }
    private List<ServiceStatusInfo> ServiceStatuses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshDiagnostics();
    }

    private async Task RefreshDiagnostics()
    {
        Logger.LogInformation("Refreshing diagnostic information");

        // Check database status
        await CheckDatabaseStatus();

        // Check service registrations
        CheckServiceRegistrations();

        StateHasChanged();
    }

    private async Task CheckDatabaseStatus()
    {
        try
        {
            var connectionString = Configuration.GetConnectionString("DefaultConnection");
            var dbContext = ServiceProvider.GetService<ApplicationDbContext>();

            if (dbContext != null)
            {
                var canConnect = await dbContext.Database.CanConnectAsync();
                DatabaseStatus = new DatabaseStatusInfo
                {
                    ConnectionString = connectionString?.Length > 50 ? connectionString.Substring(0, 50) + "..." : connectionString,
                    IsConnected = canConnect,
                    Error = canConnect ? null : "Unable to connect to database"
                };
            }
            else
            {
                DatabaseStatus = new DatabaseStatusInfo
                {
                    ConnectionString = connectionString,
                    IsConnected = false,
                    Error = "DbContext not registered"
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking database status");
            DatabaseStatus = new DatabaseStatusInfo
            {
                ConnectionString = "Error retrieving",
                IsConnected = false,
                Error = ex.Message
            };
        }
    }

    private void CheckServiceRegistrations()
    {
        var servicesToCheck = new[]
        {
typeof(ApplicationDbContext),
typeof(UserManager<User>),
typeof(CourseRepository),
typeof(UserRepository),
typeof(AssessmentRepository),
typeof(ProgressRepository),
typeof(AuthenticationStateProvider)
};

        ServiceStatuses.Clear();

        foreach (var serviceType in servicesToCheck)
        {
            try
            {
                var service = ServiceProvider.GetService(serviceType);
                ServiceStatuses.Add(new ServiceStatusInfo
                {
                    ServiceName = serviceType.Name,
                    IsRegistered = service != null
                });
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error checking service registration for {ServiceType}", serviceType.Name);
                ServiceStatuses.Add(new ServiceStatusInfo
                {
                    ServiceName = serviceType.Name,
                    IsRegistered = false
                });
            }
        }
    }

    private class DatabaseStatusInfo
    {
        public string? ConnectionString { get; set; }
        public bool IsConnected { get; set; }
        public string? Error { get; set; }
    }

    private class ServiceStatusInfo
    {
        public string ServiceName { get; set; } = string.Empty;
        public bool IsRegistered { get; set; }
    }
}
