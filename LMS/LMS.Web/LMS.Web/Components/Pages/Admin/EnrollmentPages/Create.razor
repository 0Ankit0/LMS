@page "/admin/enrollments/create"

@using LMS.Repositories

@inject IEnrollmentRepository EnrollmentRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Enrollment</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Enrollment" OnValidSubmit="AddEnrollment">
            <AntiforgeryToken />
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="userid" class="form-label">User <span class="text-danger">*</span></label>
                <SearchableSelectComponent TItem="DropdownOption<string>" TValue="string" Items="@userOptions"
                    ValueSelector="@(item => item.Value.ToString())" DisplaySelector="@(item => item.Text)"
                    SearchFunction="@SearchUsers" SelectedValue="@Enrollment.UserId"
                    OnSelectedValueChanged="@((string value) => Enrollment.UserId = value)"
                    Placeholder="Select a user..." class="form-control" />
                <ValidationMessage For="() => Enrollment.UserId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="courseid" class="form-label">Course <span class="text-danger">*</span></label>
                <SearchableSelectComponent TItem="DropdownOption" TValue="int" Items="@courseOptions"
                    ValueSelector="@(item => item.Value)" DisplaySelector="@(item => item.Text)"
                    SearchFunction="@SearchCourses" SelectedValue="@Enrollment.CourseId"
                    OnSelectedValueChanged="@((int value) => Enrollment.CourseId = value)"
                    Placeholder="Select a course..." class="form-control" />
                <ValidationMessage For="() => Enrollment.CourseId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/enrollments">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateEnrollmentRequest Enrollment { get; set; } = new();

    private List<DropdownOption<string>> userOptions = new();
    private List<DropdownOption> courseOptions = new();

    protected override async Task OnInitializedAsync()
    {
        // Load initial options
        userOptions = await DropdownRepository.GetUsersAsync(search: "", take: 20);
        courseOptions = await DropdownRepository.GetCoursesAsync(search: "", take: 20);
    }

    private async Task<IEnumerable<DropdownOption<string>>> SearchUsers(string searchTerm)
    {
        return await DropdownRepository.GetUsersAsync(searchTerm, take: 20);
    }

    private async Task<IEnumerable<DropdownOption>> SearchCourses(string searchTerm)
    {
        return await DropdownRepository.GetCoursesAsync(searchTerm, take: 20);
    }

    private async Task AddEnrollment()
    {
        try
        {
            var result = await EnrollmentRepository.CreateEnrollmentAsync(Enrollment.UserId, Enrollment);
            if (result != null)
            {
                NavigationManager.NavigateTo("/admin/enrollments");
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add error display logic here
            Console.WriteLine($"Error creating enrollment: {ex.Message}");
        }
    }
}
