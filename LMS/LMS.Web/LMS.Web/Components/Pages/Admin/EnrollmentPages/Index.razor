@page "/admin/enrollments"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject IEnrollmentRepository EnrollmentRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Enrollments - Admin</PageTitle>

<Card>
    <CardHeader>
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Enrollments</h5>
            <a href="/admin/enrollments/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i>
                Add New Enrollment
            </a>
        </div>
    </CardHeader>
    <CardBody>
        <DataTableComponent TItem="EnrollmentModel" DataProvider="EnrollmentsDataProvider" AllowPaging="true"
            AllowSorting="true" AllowFiltering="true">
            <DataTableColumn TItem="EnrollmentModel" HeaderText="User ID" PropertyName="UserId"
                SortKeySelector="item => item.UserId" Filterable="true">
                @context.UserId
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="User Name" PropertyName="UserName"
                SortKeySelector="item => item.UserName" Filterable="true">
                @context.UserName
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="Course ID" PropertyName="CourseId"
                SortKeySelector="item => item.CourseId" HeaderTextAlignment="Alignment.End"
                TextAlignment="Alignment.End">
                @context.CourseId
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="Course Title" PropertyName="CourseTitle"
                SortKeySelector="item => item.CourseTitle" Filterable="true">
                @context.CourseTitle
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="Enrolled" SortKeySelector="item => item.EnrolledAt">
                @context.EnrolledAt.ToString("yyyy-MM-dd")
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="Status" PropertyName="Status"
                SortKeySelector="item => item.Status ?? string.Empty" Filterable="true">
                <Badge Color="@GetStatusBadgeColor(context.Status)">@context.Status</Badge>
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="Progress %"
                SortKeySelector="item => item.ProgressPercentage" HeaderTextAlignment="Alignment.End"
                TextAlignment="Alignment.End">
                <div class="d-flex align-items-center">
                    <div class="me-2" style="width: 60px;">
                        <Progress Value="(int)context.ProgressPercentage" />
                    </div>
                    <span>@(context.ProgressPercentage.ToString("F1"))%</span>
                </div>
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="Final Grade" HeaderTextAlignment="Alignment.End"
                TextAlignment="Alignment.End">
                @(context.FinalGrade?.ToString("F1") ?? "N/A")
            </DataTableColumn>
            <DataTableColumn TItem="EnrollmentModel" HeaderText="Actions" Sortable="false" Filterable="false">
                <div class="btn-group" role="group">
                    <a href='@($"/admin/enrollments/edit?id={context.Id}")' class="btn btn-primary btn-sm">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a href='@($"/admin/enrollments/details?id={context.Id}")' class="btn btn-info btn-sm">
                        <i class="bi bi-eye"></i> Details
                    </a>
                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(context)">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </DataTableColumn>
        </DataTableComponent>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal" Title="Confirm Delete"
    Message="@($"Are you sure you want to delete the enrollment for '{enrollmentToDelete?.UserName}' in '{enrollmentToDelete?.CourseTitle}'? This action cannot be undone.")"
    ConfirmButtonText="Delete" ConfirmButtonColor="ButtonColor.Danger" OnConfirm="DeleteEnrollment" />

@code {
    private ModalComponent deleteModal = default!;
    private EnrollmentModel? enrollmentToDelete;

    private async Task<GridDataProviderResult<EnrollmentModel>>
    EnrollmentsDataProvider(GridDataProviderRequest<EnrollmentModel> request)
    {
        try
        {
            var result = await EnrollmentRepository.GetEnrollmentsPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
            });

            return new GridDataProviderResult<EnrollmentModel>
            {
                Data = result.Items,
                TotalCount = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading enrollments: {ex.Message}");
            return new GridDataProviderResult<EnrollmentModel>
            {
                Data = Enumerable.Empty<EnrollmentModel>(),
                TotalCount = 0
            };
        }
    }

    private async Task ConfirmDelete(EnrollmentModel enrollment)
    {
        enrollmentToDelete = enrollment;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteEnrollment()
    {
        if (enrollmentToDelete != null)
        {
            try
            {
                await EnrollmentRepository.DeleteEnrollmentAsync(enrollmentToDelete.Id);
                ToastService.ShowSuccess("Success", $"Enrollment for '{enrollmentToDelete.UserName}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting enrollment: {ex.Message}");
            }
            finally
            {
                enrollmentToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    private BadgeColor GetStatusBadgeColor(string? status)
    {
        return status?.ToLower() switch
        {
            "active" => BadgeColor.Success,
            "completed" => BadgeColor.Info,
            "dropped" => BadgeColor.Danger,
            _ => BadgeColor.Secondary
        };
    }
}

