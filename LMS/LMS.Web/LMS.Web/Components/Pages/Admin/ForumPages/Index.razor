@page "/admin/forums"

@using LMS.Repositories
@using LMS.Data.DTOs
@using LMS.Data.Entities
@using LMS.Web.Components.Shared 
@using LMS.Web.Services

@inject IForumRepository ForumRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Forums - Admin</PageTitle>

<Card>
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Forums</h5>
            <Button Color="ButtonColor.Primary" Href="/admin/forums/create">
                <Icon Name="IconName.PlusCircle" />
                Add New Forum
            </Button>
        </div>
    </div>
    <CardBody>
        <Grid TItem="ForumModel" 
              DataProvider="ForumsDataProvider"
              AllowPaging="true" 
              AllowSorting="true"
              AllowFiltering="true">
            <GridColumn TItem="ForumModel" HeaderText="Title" PropertyName="Title" SortKeySelector="item => item.Title" Filterable="true" />
            <GridColumn TItem="ForumModel" HeaderText="Description" PropertyName="Description" Filterable="true" />
            <GridColumn TItem="ForumModel" HeaderText="Course ID" PropertyName="CourseId" SortKeySelector="item => item.CourseId" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @(context.CourseId?.ToString() ?? "N/A")
            </GridColumn>
            <GridColumn TItem="ForumModel" HeaderText="General" SortKeySelector="item => item.IsGeneral">
                <Badge Color="@(context.IsGeneral ? BadgeColor.Info : BadgeColor.Secondary)">
                    @(context.IsGeneral ? "General" : "Course")
                </Badge>
            </GridColumn>
            <GridColumn TItem="ForumModel" HeaderText="Active" SortKeySelector="item => item.IsActive">
                <Badge Color="@(context.IsActive ? BadgeColor.Success : BadgeColor.Secondary)">
                    @(context.IsActive ? "Yes" : "No")
                </Badge>
            </GridColumn>
            <GridColumn TItem="ForumModel" HeaderText="Topics" PropertyName="TopicCount" SortKeySelector="item => item.TopicCount" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End" />
            <GridColumn TItem="ForumModel" HeaderText="Created" SortKeySelector="item => item.CreatedAt">
                @context.CreatedAt.ToString("yyyy-MM-dd")
            </GridColumn>
            <GridColumn TItem="ForumModel" HeaderText="Actions">
                <div class="btn-group" role="group">
                    <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/forums/edit?id={context.Id}")'>
                        <Icon Name="IconName.Pencil" /> Edit
                    </Button>
                    <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/forums/details?id={context.Id}")'>
                        <Icon Name="IconName.Eye" /> Details
                    </Button>
                    <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => ConfirmDelete(context)">
                        <Icon Name="IconName.Trash" /> Delete
                    </Button>
                </div>
            </GridColumn>
        </Grid>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal" 
                Title="Confirm Delete" 
                Message="@($"Are you sure you want to delete the forum '{forumToDelete?.Title}'? This action cannot be undone.")"
                ConfirmButtonText="Delete"
                ConfirmButtonColor="ButtonColor.Danger"
                OnConfirm="DeleteForum" />

@code {
    private IEnumerable<ForumModel> forums = default!;
    private ModalComponent deleteModal = default!;
    private ForumModel? forumToDelete;

    private async Task<GridDataProviderResult<ForumModel>> ForumsDataProvider(GridDataProviderRequest<ForumModel> request)
    {
        try
        {
            var result = await ForumRepository.GetForumsPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
                // Removed unsupported: Filter, SortBy, SortDirection
            });

            return new GridDataProviderResult<ForumModel>
            {
                Data = result.Items,
                TotalCount = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading forums: {ex.Message}");
            return new GridDataProviderResult<ForumModel>
            {
                Data = Enumerable.Empty<ForumModel>(),
                TotalCount = 0
            };
        }
    }

    private async Task ConfirmDelete(ForumModel forum)
    {
        forumToDelete = forum;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteForum()
    {
        if (forumToDelete != null)
        {
            try
            {
                await ForumRepository.DeleteForumAsync(forumToDelete.Id);
                ToastService.ShowSuccess("Success", $"Forum '{forumToDelete.Title}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting forum: {ex.Message}");
            }
            finally
            {
                forumToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}

