@page "/admin/forums/create"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services

@inject IForumRepository ForumRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Forum - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Forum</h1>
    <Button Color="ButtonColor.Secondary" Href="/admin/forums">
        <Icon Name="IconName.ArrowLeft" />
        Back to Forums
    </Button>
</div>

<Card>
    <div class="card-header">
        <h5 class="card-title mb-0">Forum Information</h5>
    </div>
    <CardBody>
        <EditForm Model="Forum" OnValidSubmit="AddForum">
            <AntiforgeryToken />
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" role="alert" />

            <div class="mb-3">
                <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                <InputText id="title" @bind-Value="Forum.Title" class="form-control" aria-required="true" 
                           placeholder="Enter forum title" />
                <ValidationMessage For="() => Forum.Title" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" @bind-Value="Forum.Description" class="form-control" rows="3"
                               placeholder="Enter forum description" />
                <ValidationMessage For="() => Forum.Description" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="courseid" class="form-label">Course</label>
                <SearchableSelectComponent TItem="DropdownOption<int>" 
                                           TValue="int?" 
                                           OnLoad="async () => (await DropdownRepository.GetCoursesAsync(null, 20))"
                                           ValueSelector="@(item => (int?)item.Value)" 
                                           DisplaySelector="@(item => item.Text)"
                                           @bind-SelectedValue="Forum.CourseId"
                                           Placeholder="Select a course (optional)..." 
                                           EmptyText="No courses found" />
                <ValidationMessage For="() => Forum.CourseId" class="text-danger" />
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox id="isgeneral" @bind-Value="Forum.IsGeneral" class="form-check-input" />
                    <label for="isgeneral" class="form-check-label">Is General Forum</label>
                    <ValidationMessage For="() => Forum.IsGeneral" class="text-danger" />
                </div>
            </div>

            <div class="d-flex gap-2">
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Loading="@isSubmitting">
                    <Icon Name="IconName.CheckCircle" />
                    Create Forum
                </Button>
                <Button Color="ButtonColor.Secondary" Href="/admin/forums">Cancel</Button>
            </div>
        </EditForm>
    </CardBody>
</Card>

@code {
    private CreateForumRequest Forum { get; set; } = new();
    private bool isSubmitting = false;

    private async Task<AutoCompleteDataProviderResult<DropdownOption<int>>> SearchCoursesDataProvider(AutoCompleteDataProviderRequest<DropdownOption<int>> request)
    {
        try
        {
            var courses = await DropdownRepository.GetCoursesAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = courses,
                TotalCount = courses.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = new List<DropdownOption<int>>(),
                TotalCount = 0
            };
        }
    }

    private async Task AddForum()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;
        try
        {
            var result = await ForumRepository.CreateForumAsync(Forum);
            if (result != null)
            {
                ToastService.ShowSuccess("Success", "Forum created successfully!");
                NavigationManager.NavigateTo("/admin/forums");
            }
            else
            {
                ToastService.ShowError("Error", "Failed to create forum. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error creating forum: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}