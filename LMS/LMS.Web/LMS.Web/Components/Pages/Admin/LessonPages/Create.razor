@page "/admin/lessons/create"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services

@inject ICourseRepository CourseRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Lesson - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Lesson</h1>
    <Button Color="ButtonColor.Secondary" Href="/admin/lessons">
        <Icon Name="IconName.ArrowLeft" />
        Back to Lessons
    </Button>
</div>

<Card>
    <div class="card-header">
        <h5 class="card-title mb-0">Lesson Information</h5>
    </div>
    <CardBody>
        <EditForm Model="Lesson" OnValidSubmit="AddLesson">
            <AntiforgeryToken />
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" role="alert" />

            <div class="mb-3">
                <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                <InputText id="title" @bind-Value="Lesson.Title" class="form-control" aria-required="true"
                    placeholder="Enter lesson title" />
                <ValidationMessage For="() => Lesson.Title" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" @bind-Value="Lesson.Description" class="form-control" rows="3"
                    placeholder="Enter lesson description" />
                <ValidationMessage For="() => Lesson.Description" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="moduleid" class="form-label">Module <span class="text-danger">*</span></label>
                <SearchableSelectComponent TItem="DropdownOption<int>" 
                                           TValue="int" 
                                           DataProvider="SearchModulesDataProvider"
                                           ValueSelector="@(item => item.Value)" 
                                           DisplaySelector="@(item => item.Text)"
                                           @bind-SelectedValue="Lesson.ModuleId"
                                           Placeholder="Search and select module..." 
                                           EmptyText="No modules found" />
                <ValidationMessage For="() => Lesson.ModuleId" class="text-danger" />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="type" class="form-label">Lesson Type</label>
                    <InputSelect id="type" @bind-Value="Lesson.Type" class="form-select">
                        @foreach (var enumValue in Enum.GetValues<LessonType>())
                        {
                            <option value="@enumValue">@enumValue.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Lesson.Type" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="estimatedduration" class="form-label">Duration (minutes)</label>
                    <InputNumber id="estimatedduration" @bind-Value="EstimatedDurationMinutes"
                        class="form-control" placeholder="30" />
                    <ValidationMessage For="() => EstimatedDurationMinutes" class="text-danger" />
                </div>
            </div>

            <div class="mb-3">
                <label for="content" class="form-label">Content</label>
                <InputTextArea id="content" @bind-Value="Lesson.Content" class="form-control" rows="5"
                    placeholder="Enter lesson content..." />
                <ValidationMessage For="() => Lesson.Content" class="text-danger" />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="videourl" class="form-label">Video URL</label>
                    <InputText id="videourl" @bind-Value="Lesson.VideoUrl" class="form-control"
                        placeholder="https://example.com/video.mp4" />
                    <ValidationMessage For="() => Lesson.VideoUrl" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="documenturl" class="form-label">Document URL</label>
                    <InputText id="documenturl" @bind-Value="Lesson.DocumentUrl" class="form-control"
                        placeholder="https://example.com/document.pdf" />
                    <ValidationMessage For="() => Lesson.DocumentUrl" class="text-danger" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="externalurl" class="form-label">External URL</label>
                    <InputText id="externalurl" @bind-Value="Lesson.ExternalUrl" class="form-control"
                        placeholder="https://external-resource.com" />
                    <ValidationMessage For="() => Lesson.ExternalUrl" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="orderindex" class="form-label">Order Index</label>
                    <InputNumber id="orderindex" @bind-Value="Lesson.OrderIndex" class="form-control"
                        placeholder="1" />
                    <ValidationMessage For="() => Lesson.OrderIndex" class="text-danger" />
                </div>
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox id="isrequired" @bind-Value="Lesson.IsRequired" class="form-check-input" />
                    <label for="isrequired" class="form-check-label">Is Required</label>
                </div>
                <ValidationMessage For="() => Lesson.IsRequired" class="text-danger" />
            </div>

            <div class="d-flex gap-2">
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Loading="@isSubmitting">
                    <Icon Name="IconName.CheckCircle" />
                    Create Lesson
                </Button>
                <Button Color="ButtonColor.Secondary" Href="/admin/lessons">Cancel</Button>
            </div>
        </EditForm>
    </CardBody>
</Card>

@code {
    [SupplyParameterFromForm]
    private CreateLessonRequest Lesson { get; set; } = new();
    private bool isSubmitting = false;

    // Helper property for binding EstimatedDuration as minutes
    private int EstimatedDurationMinutes
    {
        get => (int)Lesson.EstimatedDuration.TotalMinutes;
        set => Lesson.EstimatedDuration = TimeSpan.FromMinutes(value);
    }

    private async Task<AutoCompleteDataProviderResult<DropdownOption<int>>> SearchModulesDataProvider(AutoCompleteDataProviderRequest<DropdownOption<int>> request)
    {
        try
        {
            var modules = await DropdownRepository.GetModulesAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = modules,
                TotalCount = modules.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading modules: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = new List<DropdownOption<int>>(),
                TotalCount = 0
            };
        }
    }

    private async Task AddLesson()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;
        try
        {
            var result = await CourseRepository.CreateLessonAsync(Lesson);
            if (result != null)
            {
                ToastService.ShowSuccess("Success", "Lesson created successfully!");
                NavigationManager.NavigateTo("/admin/lessons");
            }
            else
            {
                ToastService.ShowError("Error", "Failed to create lesson. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error creating lesson: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
