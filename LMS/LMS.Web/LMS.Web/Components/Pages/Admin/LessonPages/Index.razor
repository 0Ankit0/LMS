@page "/admin/lessons"  
@using LMS.Web.Components.Shared  
@using LMS.Repositories  
@using LMS.Web.Services
@using Microsoft.AspNetCore.Components

@inject ILessonRepository LessonRepository  
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Lessons - Admin</PageTitle>  

<Card>
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Lessons</h5>
            <Button Color="ButtonColor.Primary" Href="/admin/lessons/create">
                <Icon Name="IconName.PlusCircle" />
                Add New Lesson
            </Button>
        </div>
    </div>
    <CardBody>
        <Grid TItem="LessonModel" 
              DataProvider="LessonsDataProvider"
              AllowPaging="true" 
              AllowSorting="true"
              AllowFiltering="true">
            <GridColumn TItem="LessonModel" HeaderText="Title" PropertyName="Title" SortKeySelector="item => item.Title" Filterable="true" />
            <GridColumn TItem="LessonModel" HeaderText="Description" PropertyName="Description" Filterable="true" />
            <GridColumn TItem="LessonModel" HeaderText="Module ID" PropertyName="ModuleId" SortKeySelector="item => item.ModuleId" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End" />
            <GridColumn TItem="LessonModel" HeaderText="Type" PropertyName="Type" SortKeySelector="item => item.Type ?? string.Empty" Filterable="true">
                <Badge Color="@GetTypeBadgeColor(context.Type)">@context.Type</Badge>
            </GridColumn>
            <GridColumn TItem="LessonModel" HeaderText="Duration" SortKeySelector="item => item.EstimatedDuration">
                @context.EstimatedDuration.ToString(@"mm\:ss")
            </GridColumn>
            <GridColumn TItem="LessonModel" HeaderText="Order" PropertyName="OrderIndex" SortKeySelector="item => item.OrderIndex" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End" />
            <GridColumn TItem="LessonModel" HeaderText="Required" SortKeySelector="item => item.IsRequired">
                <Badge Color="@(context.IsRequired ? BadgeColor.Primary : BadgeColor.Secondary)">
                    @(context.IsRequired ? "Yes" : "No")
                </Badge>
            </GridColumn>
            <GridColumn TItem="LessonModel" HeaderText="Actions">
                <div class="btn-group" role="group">
                    <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/lessons/edit?id={context.Id}")'>
                        <Icon Name="IconName.Pencil" /> Edit
                    </Button>
                    <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/lessons/details?id={context.Id}")'>
                        <Icon Name="IconName.Eye" /> Details
                    </Button>
                    <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => ConfirmDelete(context)">
                        <Icon Name="IconName.Trash" /> Delete
                    </Button>
                </div>
            </GridColumn>
        </Grid>
    </CardBody>
</Card>  

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal" 
                Title="Confirm Delete" 
                Message="@($"Are you sure you want to delete the lesson '{lessonToDelete?.Title}'? This action cannot be undone.")"
                ConfirmButtonText="Delete"
                ConfirmButtonColor="ButtonColor.Danger"
                OnConfirm="DeleteLesson" />

@code {
    private IEnumerable<LessonModel> lessons = default!;
    private ModalComponent deleteModal = default!;
    private LessonModel? lessonToDelete;

    private async Task<GridDataProviderResult<LessonModel>> LessonsDataProvider(GridDataProviderRequest<LessonModel> request)
    {
        try
        {
            var result = await LessonRepository.GetLessonsPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
                // Removed unsupported: Filter, SortBy, SortDirection
            });

            return new GridDataProviderResult<LessonModel>
            {
                Data = result.Items,
                TotalCount = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading lessons: {ex.Message}");
            return new GridDataProviderResult<LessonModel>
            {
                Data = Enumerable.Empty<LessonModel>(),
                TotalCount = 0
            };
        }
    }

    private async Task ConfirmDelete(LessonModel lesson)
    {
        lessonToDelete = lesson;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteLesson()
    {
        if (lessonToDelete != null)
        {
            try
            {
                await LessonRepository.DeleteLessonAsync(lessonToDelete.Id);
                ToastService.ShowSuccess("Success", $"Lesson '{lessonToDelete.Title}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting lesson: {ex.Message}");
            }
            finally
            {
                lessonToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    // Add missing GetTypeBadgeColor helper
    private BadgeColor GetTypeBadgeColor(string? type)
    {
        return type?.ToLower() switch
        {
            "video" => BadgeColor.Info,
            "document" => BadgeColor.Secondary,
            "quiz" => BadgeColor.Warning,
            "scorm" => BadgeColor.Dark,
            _ => BadgeColor.Primary
        };
    }
}
