@page "/admin/lessons"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using LMS.Web.Services
@inject ILessonRepository LessonRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Lessons - Admin</PageTitle>

<Card>
    <CardHeader>
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Lessons</h5>
            <a href="/admin/lessons/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i>
                Add New Lesson
            </a>
        </div>
    </CardHeader>
    <CardBody>
        <DataTableComponent TItem="LessonModel" DataProvider="LessonsDataProvider" AllowPaging="true"
            AllowSorting="true" AllowFiltering="true" PageSize="10">
            <Columns>
                <GridColumn TItem="LessonModel" HeaderText="Title" PropertyName="Title"
                    SortKeySelector="item => item.Title" Filterable="true">
                    @context.Title
                </GridColumn>
                <GridColumn TItem="LessonModel" HeaderText="Description" PropertyName="Description" Filterable="true">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="LessonModel" HeaderText="Module ID" PropertyName="ModuleId"
                    SortKeySelector="item => item.ModuleId" HeaderTextAlignment="Alignment.End"
                    TextAlignment="Alignment.End">
                    @context.ModuleId
                </GridColumn>
                <GridColumn TItem="LessonModel" HeaderText="Type" PropertyName="Type"
                    SortKeySelector="item => item.Type ?? string.Empty" Filterable="true">
                    <Badge Color="@GetTypeBadgeColor(context.Type)">@context.Type</Badge>
                </GridColumn>
                <GridColumn TItem="LessonModel" HeaderText="Duration" SortKeySelector="item => item.EstimatedDuration">
                    @context.EstimatedDuration minutes
                </GridColumn>
                <GridColumn TItem="LessonModel" HeaderText="Order" PropertyName="OrderIndex"
                    SortKeySelector="item => item.OrderIndex" HeaderTextAlignment="Alignment.End"
                    TextAlignment="Alignment.End">
                    @context.OrderIndex
                </GridColumn>
                <GridColumn TItem="LessonModel" HeaderText="Required" SortKeySelector="item => item.IsRequired">
                    <Badge Color="@(context.IsRequired? BadgeColor.Primary: BadgeColor.Secondary)">
                        @(context.IsRequired ? "Yes" : "No")
                    </Badge>
                </GridColumn>
                <GridColumn TItem="LessonModel" HeaderText="Actions" Sortable="false" Filterable="false">
                    <div class="btn-group" role="group">
                        <a href='@($"/admin/lessons/edit?id={context.Id}")' class="btn btn-primary btn-sm">
                            <i class="bi bi-pencil"></i> Edit
                        </a>
                        <a href='@($"/admin/lessons/details?id={context.Id}")' class="btn btn-info btn-sm">
                            <i class="bi bi-eye"></i> Details
                        </a>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(context)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </GridColumn>
            </Columns>
        </DataTableComponent>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal" Title="Confirm Delete"
    Message="@($"Are you sure you want to delete the lesson '{lessonToDelete?.Title}'? This action cannot be undone.")"
    ConfirmButtonText="Delete" ConfirmButtonColor="ButtonColor.Danger" OnConfirm="DeleteLesson" />

@code {
    private ModalComponent deleteModal = default!;
    private LessonModel? lessonToDelete;

    private async Task<GridDataProviderResult<LessonModel>> LessonsDataProvider(GridDataProviderRequest<LessonModel>
    request)
    {
        try
        {
            var result = await LessonRepository.GetLessonsPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
            });

            var data = (result.Items == null || !result.Items.Any()) ? AddDummyLessons() : result.Items;
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;

            return new GridDataProviderResult<LessonModel>
            {
                Data = data,
                TotalCount = totalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading lessons: {ex.Message}");
            return new GridDataProviderResult<LessonModel>
            {
                Data = Enumerable.Empty<LessonModel>(),
                TotalCount = 0
            };
        }
    }

    private List<LessonModel> AddDummyLessons()
    {
        return new List<LessonModel>
{
new LessonModel
{
Id = 1,
Title = "Introduction to Variables",
Description = "Learn about variables and data types",
ModuleId = 1,
Type = "Video",
EstimatedDuration = TimeSpan.FromMinutes(15),
OrderIndex = 1,
IsRequired = true
},
new LessonModel
{
Id = 2,
Title = "Control Structures",
Description = "Understanding loops and conditionals",
ModuleId = 1,
Type = "Interactive",
EstimatedDuration = TimeSpan.FromMinutes(25),
OrderIndex = 2,
IsRequired = true
},
new LessonModel
{
Id = 3,
Title = "Arrays and Lists",
Description = "Working with collections of data",
ModuleId = 2,
Type = "Assignment",
EstimatedDuration = TimeSpan.FromMinutes(30),
OrderIndex = 1,
IsRequired = false
}
};
    }

    private BadgeColor GetTypeBadgeColor(string? type)
    {
        return type switch
        {
            "Video" => BadgeColor.Primary,
            "Interactive" => BadgeColor.Success,
            "Assignment" => BadgeColor.Warning,
            "Quiz" => BadgeColor.Info,
            _ => BadgeColor.Secondary
        };
    }

    private async Task ConfirmDelete(LessonModel lesson)
    {
        lessonToDelete = lesson;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteLesson()
    {
        if (lessonToDelete != null)
        {
            try
            {
                await LessonRepository.DeleteLessonAsync(lessonToDelete.Id);
                ToastService.ShowSuccess("Success", $"Lesson '{lessonToDelete.Title}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting lesson: {ex.Message}");
            }
            finally
            {
                lessonToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}
