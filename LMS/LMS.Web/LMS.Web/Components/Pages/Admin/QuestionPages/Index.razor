@page "/admin/questions"


@using LMS.Repositories
@inject IAssessmentRepository AssessmentRepository

<PageTitle>Questions - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Questions</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/questions/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Question
    </Button>
</div>

<div class="card">
    <div class="card-body">
        @if (paginatedResult != null)
        {
            <PaginationComponent TItem="QuestionModel" CurrentPage="@currentPage" PageSize="@pageSize"
                TotalCount="@paginatedResult.TotalCount" TotalPages="@paginatedResult.TotalPages"
                OnPageChanged="OnPageChanged" OnPageSizeChanged="OnPageSizeChanged" />

            @if (paginatedResult.Items.Any())
            {
                <Grid TItem="QuestionModel" Class="table table-striped table-hover" Data="paginatedResult.Items">
                    <GridColumn TItem="QuestionModel" HeaderText="Question Text" PropertyName="Text" />
                    <GridColumn TItem="QuestionModel" HeaderText="Assessment ID" PropertyName="AssessmentId" />
                    <GridColumn TItem="QuestionModel" HeaderText="Type" PropertyName="Type" />
                    <GridColumn TItem="QuestionModel" HeaderText="Points" PropertyName="Points" />
                    <GridColumn TItem="QuestionModel" HeaderText="Order" PropertyName="OrderIndex" />
                    <GridColumn TItem="QuestionModel" HeaderText="Required">
                        @((context as QuestionModel)?.IsRequired == true ? "Yes" : "No")
                    </GridColumn>
                    <GridColumn TItem="QuestionModel" HeaderText="Created" PropertyName="CreatedAt" Format="yyyy-MM-dd HH:mm" />

                    <GridColumn TItem="QuestionModel" HeaderText="Actions">
                        <div class="btn-group" role="group">
                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/questions/edit?id={context.Id}")'>
                                <Icon Name="IconName.Pencil" /> Edit
                            </Button>
                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/questions/details?id={context.Id}")'>
                                <Icon Name="IconName.Eye" /> Details
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" Href='@($"/admin/questions/delete?id={context.Id}")'>
                                <Icon Name="IconName.Trash" /> Delete
                            </Button>
                        </div>
                    </GridColumn>
                </Grid>
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">No questions found.</p>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private PaginatedResult<QuestionModel>? paginatedResult;
    private int currentPage = 1;
    private int pageSize = 10;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        try
        {
            var request = new PaginationRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize
            };

            paginatedResult = await AssessmentRepository.GetAllQuestionsPaginatedAsync(request);

            if (paginatedResult == null || !paginatedResult.Items.Any())
            {
                paginatedResult = new PaginatedResult<QuestionModel>
                {
                    Items = new List<QuestionModel>
                    {
                        new QuestionModel { Id = 1, Text = "What is the capital of France?", AssessmentId = 1, Type = "MultipleChoice", Points = 10, OrderIndex = 1, IsRequired = true, CreatedAt = DateTime.Now.AddDays(-10) },
                        new QuestionModel { Id = 2, Text = "Explain the concept of polymorphism.", AssessmentId = 2, Type = "Essay", Points = 20, OrderIndex = 1, IsRequired = true, CreatedAt = DateTime.Now.AddDays(-8) },
                        new QuestionModel { Id = 3, Text = "Which of the following is a value type in C#?", AssessmentId = 1, Type = "MultipleChoice", Points = 10, OrderIndex = 2, IsRequired = true, CreatedAt = DateTime.Now.AddDays(-7) }
                    },
                    TotalCount = 3,
                    PageNumber = currentPage,
                    PageSize = pageSize
                };
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        if (page != currentPage && !isLoading)
        {
            currentPage = page;
            await LoadDataAsync();
        }
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        if (newPageSize != pageSize && !isLoading)
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when changing page size
            await LoadDataAsync();
        }
    }
}
