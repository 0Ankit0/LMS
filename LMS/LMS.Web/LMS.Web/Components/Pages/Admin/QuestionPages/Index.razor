@page "/admin/questions"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject IAssessmentRepository AssessmentRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Questions - Admin</PageTitle>

<Card>
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Questions</h5>
            <a href="/admin/questions/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i>
                Add New Question
            </a>
        </div>
    </div>
    <CardBody>
        <DataTableComponent TItem="QuestionModel"
                            DataProvider="QuestionsDataProvider"
                            AllowPaging="true"
                            AllowSorting="true"
                            AllowFiltering="true">
            <DataTableColumn TItem="QuestionModel" HeaderText="Question Text" PropertyName="Text" SortKeySelector="item => item.Text" Filterable="true">
                @context.Text
            </DataTableColumn>
            <DataTableColumn TItem="QuestionModel" HeaderText="Assessment ID" PropertyName="AssessmentId" SortKeySelector="item => item.AssessmentId" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @context.AssessmentId
            </DataTableColumn>
            <DataTableColumn TItem="QuestionModel" HeaderText="Type" PropertyName="Type" SortKeySelector="item => item.Type.ToString()" Filterable="true">
                <Badge Color="@GetQuestionTypeBadgeColor(context.Type)">@context.Type</Badge>
            </DataTableColumn>
            <DataTableColumn TItem="QuestionModel" HeaderText="Points" PropertyName="Points" SortKeySelector="item => item.Points" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @context.Points
            </DataTableColumn>
            <DataTableColumn TItem="QuestionModel" HeaderText="Order" PropertyName="OrderIndex" SortKeySelector="item => item.OrderIndex" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @context.OrderIndex
            </DataTableColumn>
            <DataTableColumn TItem="QuestionModel" HeaderText="Required" SortKeySelector="item => item.IsRequired">
                <Badge Color="@(context.IsRequired ? BadgeColor.Primary : BadgeColor.Secondary)">
                    @(context.IsRequired ? "Yes" : "No")
                </Badge>
            </DataTableColumn>
            <DataTableColumn TItem="QuestionModel" HeaderText="Created" SortKeySelector="item => item.CreatedAt">
                @context.CreatedAt.ToString("yyyy-MM-dd HH:mm")
            </DataTableColumn>
            <DataTableColumn TItem="QuestionModel" HeaderText="Actions" Sortable="false" Filterable="false">
                <div class="btn-group" role="group">
                    <a href='@($"/admin/questions/edit?id={context.Id}")' class="btn btn-primary btn-sm">
                <i class="bi bi-pencil"></i> Edit
            </a>
            <a href='@($"/admin/questions/details?id={context.Id}")' class="btn btn-info btn-sm">
                <i class="bi bi-eye"></i> Details
            </a>
            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(context)">
                <i class="bi bi-trash"></i> Delete
            </button>
                </div>
            </DataTableColumn>
        </DataTableComponent>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal"
                Title="Confirm Delete"
                Message="@($"Are you sure you want to delete this question? This action cannot be undone.")"
                ConfirmButtonText="Delete"
                ConfirmButtonColor="ButtonColor.Danger"
                OnConfirm="DeleteQuestion" />

@code {
    private IEnumerable<QuestionModel> questions = default!;
    private ModalComponent deleteModal = default!;
    private QuestionModel? questionToDelete;

    private async Task<GridDataProviderResult<QuestionModel>> QuestionsDataProvider(GridDataProviderRequest<QuestionModel> request)
    {
        try
        {
            var result = await AssessmentRepository.GetAllQuestionsPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
            });

            return new GridDataProviderResult<QuestionModel>
            {
                Data = result.Items,
                TotalCount = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading questions: {ex.Message}");
            return new GridDataProviderResult<QuestionModel>
            {
                Data = Enumerable.Empty<QuestionModel>(),
                TotalCount = 0
            };
        }
    }

    private async Task ConfirmDelete(QuestionModel question)
    {
        questionToDelete = question;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteQuestion()
    {
        if (questionToDelete != null)
        {
            try
            {
                ToastService.ShowError("Error", "Delete operation is not implemented. Please add DeleteQuestionAsync to IAssessmentRepository.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting question: {ex.Message}");
            }
            finally
            {
                questionToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    private BadgeColor GetQuestionTypeBadgeColor(QuestionType type)
    {
        return type switch
        {
            QuestionType.MultipleChoice => BadgeColor.Info,
            QuestionType.TrueFalse => BadgeColor.Success,
            QuestionType.ShortAnswer => BadgeColor.Secondary,
            QuestionType.Essay => BadgeColor.Warning,
            QuestionType.Matching => BadgeColor.Primary,
            QuestionType.FillInTheBlank => BadgeColor.Dark,
            QuestionType.Ordering => BadgeColor.Light,
            _ => BadgeColor.Primary
        };
    }
}
