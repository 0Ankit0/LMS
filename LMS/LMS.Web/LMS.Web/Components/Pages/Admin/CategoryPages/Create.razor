@page "/admin/categories/create"

@using LMS.Repositories

@inject ICategoryRepository CategoryRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Category - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Category</h1>
    <a href="/admin/categories" class="btn btn-outline-secondary">
        <i class="bi bi-arrow-left me-2"></i>Back to Categories
    </a>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Category Information</h5>
            </div>
            <div class="card-body">
                <EditForm Model="Category" onsubmit="AddCategory">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="name" class="form-label">Name <span class="text-danger">*</span></label>
                            <InputText id="name" @bind-Value="Category.Name" class="form-control" aria-required="true"
                                placeholder="Enter category name" />
                            <ValidationMessage For="() => Category.Name" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="color" class="form-label">Color</label>
                            <InputText id="color" @bind-Value="Category.Color" class="form-control" type="color" />
                            <ValidationMessage For="() => Category.Color" class="text-danger" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" @bind-Value="Category.Description" class="form-control" rows="3"
                            placeholder="Enter category description" />
                        <ValidationMessage For="() => Category.Description" class="text-danger" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="iconurl" class="form-label">Icon URL</label>
                            <InputText id="iconurl" @bind-Value="Category.IconUrl" class="form-control"
                                placeholder="https://example.com/icon.png" />
                            <ValidationMessage For="() => Category.IconUrl" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="parentcategoryid" class="form-label">Parent Category</label>
                            <InputSelect id="parentcategoryid" @bind-Value="Category.ParentCategoryId"
                                class="form-select">
                                <option value="">Select parent category (optional)...</option>
                                @foreach (var option in categoryOptions)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Category.ParentCategoryId" class="text-danger" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <InputCheckbox id="isactive" @bind-Value="Category.IsActive" class="form-check-input" />
                            <label for="isactive" class="form-check-label">Is Active</label>
                            <ValidationMessage For="() => Category.IsActive" class="text-danger" />
                        </div>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>Create Category
                        </button>
                        <a href="/admin/categories" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateCategoryRequest Category { get; set; } = new();
    private List<DropdownOption> categoryOptions = new();

    protected override async Task OnInitializedAsync()
    {
        // Load initial options
        try
        {
            var categories = await DropdownRepository.GetCategoriesAsync(search: "", take: 20);
            categoryOptions = categories ?? new List<DropdownOption>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            categoryOptions = new List<DropdownOption>();
        }
    }

    private async Task AddCategory()
    {
        Console.WriteLine("AddCategory method called!"); // Debug log
        try
        {
            var result = await CategoryRepository.CreateCategoryAsync(Category);
            if (result != null)
            {
                NavigationManager.NavigateTo("/admin/categories");
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add error display logic here
            Console.WriteLine($"Error creating category: {ex.Message}");
        }
    }
}
