@page "/admin/categories"


@using LMS.Repositories
@inject ICategoryRepository CategoryRepository

<PageTitle>Categories - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Categories</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/categories/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Category
    </Button>
</div>

<div class="card">
    <div class="card-body">
        @if (paginatedResult != null)
        {
            if (paginatedResult.Items.Any())
            {
                <Grid TItem="CategoryModel" Class="table table-striped table-hover" Data="paginatedResult.Items">
                    <GridColumn TItem="CategoryModel" HeaderText="Name" PropertyName="Name" />
                    <GridColumn TItem="CategoryModel" HeaderText="Description" PropertyName="Description" />
                    <GridColumn TItem="CategoryModel" HeaderText="Color" PropertyName="Color" />
                    <GridColumn TItem="CategoryModel" HeaderText="Active">
                        @((context as CategoryModel)?.IsActive == true ? "Yes" : "No")
                    </GridColumn>
                    <GridColumn TItem="CategoryModel" HeaderText="Parent Category" PropertyName="ParentCategoryName" />
                    <GridColumn TItem="CategoryModel" HeaderText="Course Count" PropertyName="CourseCount" />

                    <GridColumn TItem="CategoryModel" HeaderText="Actions">
                        <div class="btn-group" role="group">
                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/categories/edit?id={context.Id}")'>
                                <Icon Name="IconName.Pencil" /> Edit
                            </Button>
                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/categories/details?id={context.Id}")'>
                                <Icon Name="IconName.Eye" /> Details
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" Href='@($"/admin/categories/delete?id={context.Id}")'>
                                <Icon Name="IconName.Trash" /> Delete
                            </Button>
                        </div>
                    </GridColumn>
                </Grid>

                <PaginationComponent TItem="CategoryModel" PaginatedResult="paginatedResult" OnPageChanged="OnPageChanged"
                    OnPageSizeChanged="OnPageSizeChanged" />
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">No categories found.</p>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private PaginatedResult<CategoryModel>? paginatedResult;
    private int currentPage = 1;
    private int pageSize = 10;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        try
        {
            var request = new PaginationRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize
            };

            paginatedResult = await CategoryRepository.GetCategoriesPaginatedAsync(request);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        if (page != currentPage && !isLoading)
        {
            currentPage = page;
            await LoadDataAsync();
        }
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        if (newPageSize != pageSize && !isLoading)
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when changing page size
            await LoadDataAsync();
        }
    }
}
