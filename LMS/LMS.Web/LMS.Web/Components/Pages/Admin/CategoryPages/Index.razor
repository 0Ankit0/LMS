@page "/admin/categories"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using LMS.Web.Services
@inject ICategoryRepository CategoryRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Categories - Admin</PageTitle>

<Card>
    <CardHeader>
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Categories</h5>
            <a href="/admin/categories/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i>
                Add New Category
            </a>
        </div>
    </CardHeader>
    <CardBody>
        <DataTableComponent TItem="CategoryModel" DataProvider="CategoriesDataProvider" AllowPaging="true"
            AllowSorting="true" AllowFiltering="true" PageSize="10">
            <Columns>
                <GridColumn TItem="CategoryModel" HeaderText="Name" PropertyName="Name"
                    SortKeySelector="item => item.Name" Filterable="true">
                    @context.Name
                </GridColumn>
                <GridColumn TItem="CategoryModel" HeaderText="Description" PropertyName="Description" Filterable="true">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="CategoryModel" HeaderText="Color" PropertyName="Color">
                    <div class="d-flex align-items-center">
                        <div class="me-2"
                            style="width: 20px; height: 20px; background-color: @context.Color; border: 1px solid #ccc; border-radius: 4px;">
                        </div>
                        @context.Color
                    </div>
                </GridColumn>
                <GridColumn TItem="CategoryModel" HeaderText="Active" SortKeySelector="item => item.IsActive">
                    <Badge Color="@(context.IsActive? BadgeColor.Success: BadgeColor.Secondary)">
                        @(context.IsActive ? "Yes" : "No")
                    </Badge>
                </GridColumn>
                <GridColumn TItem="CategoryModel" HeaderText="Parent Category" PropertyName="ParentCategoryName"
                    Filterable="true">
                    @context.ParentCategoryName
                </GridColumn>
                <GridColumn TItem="CategoryModel" HeaderText="Course Count" PropertyName="CourseCount"
                    SortKeySelector="item => item.CourseCount" HeaderTextAlignment="Alignment.End"
                    TextAlignment="Alignment.End">
                    @context.CourseCount
                </GridColumn>
                <GridColumn TItem="CategoryModel" HeaderText="Actions" Sortable="false" Filterable="false">
                    <div class="btn-group" role="group">
                        <a href='@($"/admin/categories/edit?id={context.Id}")' class="btn btn-primary btn-sm">
                            <i class="bi bi-pencil"></i> Edit
                        </a>
                        <a href='@($"/admin/categories/details?id={context.Id}")' class="btn btn-info btn-sm">
                            <i class="bi bi-eye"></i> Details
                        </a>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(context)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </GridColumn>
            </Columns>
        </DataTableComponent>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal" Title="Confirm Delete"
    Message="@($"Are you sure you want to delete the category '{categoryToDelete?.Name}'? This action cannot be undone.")"
    ConfirmButtonText="Delete" ConfirmButtonColor="ButtonColor.Danger" OnConfirm="DeleteCategory" />

@code {
    private ModalComponent deleteModal = default!;
    private CategoryModel? categoryToDelete;

    private async Task<GridDataProviderResult<CategoryModel>> CategoriesDataProvider(GridDataProviderRequest<CategoryModel>
    request)
    {
        try
        {
            var result = await CategoryRepository.GetCategoriesPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
            });

            var data = (result.Items == null || !result.Items.Any()) ? AddDummyCategories() : result.Items;
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;

            return new GridDataProviderResult<CategoryModel>
            {
                Data = data,
                TotalCount = totalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading categories: {ex.Message}");
            return new GridDataProviderResult<CategoryModel>
            {
                Data = Enumerable.Empty<CategoryModel>(),
                TotalCount = 0
            };
        }
    }

    private List<CategoryModel> AddDummyCategories()
    {
        return new List<CategoryModel>
{
new CategoryModel
{
Id = 1,
Name = "Programming",
Description = "All programming related courses",
Color = "#007bff",
IsActive = true,
ParentCategoryId = null,
ParentCategoryName = null,
SubCategories = new List<CategoryModel>(),
CourseCount = 10
},
new CategoryModel
{
Id = 2,
Name = "Design",
Description = "Design and UI/UX courses",
Color = "#28a745",
IsActive = true,
ParentCategoryId = null,
ParentCategoryName = null,
SubCategories = new List<CategoryModel>(),
CourseCount = 5
},
new CategoryModel
{
Id = 3,
Name = "Business",
Description = "Business and management courses",
Color = "#ffc107",
IsActive = false,
ParentCategoryId = null,
ParentCategoryName = null,
SubCategories = new List<CategoryModel>(),
CourseCount = 3
}
};
    }

    private async Task ConfirmDelete(CategoryModel category)
    {
        categoryToDelete = category;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteCategory()
    {
        if (categoryToDelete != null)
        {
            try
            {
                await CategoryRepository.DeleteCategoryAsync(categoryToDelete.Id);
                ToastService.ShowSuccess("Success", $"Category '{categoryToDelete.Name}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting category: {ex.Message}");
            }
            finally
            {
                categoryToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}