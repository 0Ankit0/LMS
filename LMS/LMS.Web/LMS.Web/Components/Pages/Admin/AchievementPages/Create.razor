@page "/admin/achievements/create"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services

@inject IAchievementRepository AchievementRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Achievement - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Achievement</h1>
    <Button Color="ButtonColor.Secondary" Href="/admin/achievements">
        <Icon Name="IconName.ArrowLeft" />
        Back to Achievements
    </Button>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Achievement Information</h5>
            </div>
            <div class="card-body">
                <EditForm Model="Achievement" OnValidSubmit="AddAchievement">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name <span class="text-danger">*</span></label>
                        <InputText id="name" @bind-Value="Achievement.Name" class="form-control" aria-required="true"
                            placeholder="Enter achievement name" />
                        <ValidationMessage For="() => Achievement.Name" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" @bind-Value="Achievement.Description" class="form-control" rows="3"
                            placeholder="Enter achievement description" />
                        <ValidationMessage For="() => Achievement.Description" class="text-danger" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="iconurl" class="form-label">Icon URL</label>
                            <InputText id="iconurl" @bind-Value="Achievement.IconUrl" class="form-control"
                                placeholder="https://example.com/icon.png" />
                            <ValidationMessage For="() => Achievement.IconUrl" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="points" class="form-label">Points</label>
                            <InputNumber id="points" @bind-Value="Achievement.Points" class="form-control"
                                placeholder="100" />
                            <ValidationMessage For="() => Achievement.Points" class="text-danger" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="badgecolor" class="form-label">Badge Color</label>
                            <InputText id="badgecolor" @bind-Value="Achievement.BadgeColor" class="form-control" type="color" />
                            <ValidationMessage For="() => Achievement.BadgeColor" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="type" class="form-label">Achievement Type</label>
                            <InputSelect id="type" @bind-Value="Achievement.Type" class="form-select">
                                @foreach (var enumValue in Enum.GetValues(typeof(AchievementType)).Cast<AchievementType>())
                                {
                                    <option value="@enumValue">@enumValue.ToString()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Achievement.Type" class="text-danger" />
                        </div>
                    </div>

                    <div class="d-flex gap-2">
                        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Loading="@isSubmitting">
                            <Icon Name="IconName.CheckCircle" />
                            Create Achievement
                        </Button>
                        <Button Color="ButtonColor.Secondary" Href="/admin/achievements">Cancel</Button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateAchievementRequest Achievement { get; set; } = new();
    private bool isSubmitting = false;

    private async Task AddAchievement()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;
        try
        {
            var result = await AchievementRepository.CreateAchievementAsync(Achievement);
            if (result != null)
            {
                ToastService.ShowSuccess("Success", "Achievement created successfully!");
                NavigationManager.NavigateTo("/admin/achievements");
            }
            else
            {
                ToastService.ShowError("Error", "Failed to create achievement. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error creating achievement: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
