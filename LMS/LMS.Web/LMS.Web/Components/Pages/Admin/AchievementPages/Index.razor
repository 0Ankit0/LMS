@page "/admin/achievements"
@using LMS.Repositories
@inject IAchievementRepository AchievementRepository
@rendermode @(new InteractiveServerRenderMode())
<PageTitle>Achievements - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Achievements</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/achievements/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Achievement
    </Button>
</div>

<DataTableComponent TItem="AchievementModel" DataProvider="AchievementDataProvider" PageSize="10">
    <GridColumn TItem="AchievementModel" HeaderText="Name" PropertyName="Name">
        @context.Name
    </GridColumn>
    <GridColumn TItem="AchievementModel" HeaderText="Description" PropertyName="Description">
        @context.Description
    </GridColumn>
    <GridColumn TItem="AchievementModel" HeaderText="Points" PropertyName="Points">
        @context.Points
    </GridColumn>
    <GridColumn TItem="AchievementModel" HeaderText="Type" PropertyName="Type">
        @context.Type
    </GridColumn>
    <GridColumn TItem="AchievementModel" HeaderText="Active">
        @(context.IsActive ? "Yes" : "No")
    </GridColumn>
    <GridColumn TItem="AchievementModel" HeaderText="Users Earned" PropertyName="UsersEarnedCount">
        @context.UsersEarnedCount
    </GridColumn>
    <GridColumn TItem="AchievementModel" HeaderText="Actions" Sortable="false" Filterable="false">
        <div class="btn-group" role="group">
            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small"
                Href='@($"/admin/achievements/edit?id={context.Id}")'>
                <Icon Name="IconName.Pencil" /> Edit
            </Button>
            <Button Color="ButtonColor.Info" Size="ButtonSize.Small"
                Href='@($"/admin/achievements/details?id={context.Id}")'>
                <Icon Name="IconName.Eye" /> Details
            </Button>
            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small"
                Href='@($"/admin/achievements/delete?id={context.Id}")'>
                <Icon Name="IconName.Trash" /> Delete
            </Button>
        </div>
    </GridColumn>
</DataTableComponent>

@code {
    private GridDataProviderDelegate<AchievementModel> AchievementDataProvider { get; set; } = default!;

    protected override void OnInitialized()
    {
        AchievementDataProvider = async request =>
        {
            try
            {
                var paginationRequest = new PaginationRequest
                {
                    PageNumber = request.PageNumber,
                    PageSize = request.PageSize
                };

                var result = await AchievementRepository.GetAllAchievementsPaginatedAsync(paginationRequest);

                // Fallback data if repository returns null or empty
                if (result == null || !result.Items.Any())
                {
                    result = new PaginatedResult<AchievementModel>
                    {
                        Items = new List<AchievementModel>
        {
new AchievementModel { Id = 1, Name = "First Course Completion", Description = "Completed your first course.", Points =
100, Type = "Course", IsActive = true, CreatedAt = DateTime.Now, UsersEarnedCount = 5 },
new AchievementModel { Id = 2, Name = "Top Learner", Description = "Achieved top score in a quiz.", Points = 200, Type =
"Quiz", IsActive = true, CreatedAt = DateTime.Now, UsersEarnedCount = 2 },
new AchievementModel { Id = 3, Name = "Forum Contributor", Description = "Made 10 forum posts.", Points = 50, Type =
"Forum", IsActive = true, CreatedAt = DateTime.Now, UsersEarnedCount = 8 }
        },
                        TotalCount = 3,
                        PageNumber = request.PageNumber,
                        PageSize = request.PageSize
                    };
                }

                return await Task.FromResult(new GridDataProviderResult<AchievementModel>
                {
                    Data = result.Items,
                    TotalCount = result.TotalCount
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading achievements: {ex.Message}");
                return await Task.FromResult(new GridDataProviderResult<AchievementModel>
                {
                    Data = Enumerable.Empty<AchievementModel>(),
                    TotalCount = 0
                });
            }
        };
    }
}
