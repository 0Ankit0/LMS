@page "/admin/achievements"
@using LMS.Repositories
@inject IAchievementRepository AchievementRepository

<PageTitle>Achievements - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Achievements</h1>
    <a href="/admin/achievements/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-2"></i>Add New Achievement
    </a>
</div>

<!-- Option 1: Using DataTableComponent with column configuration (recommended for simple cases) -->
<DataTableComponent TItem="AchievementModel" PaginatedResult="paginatedAchievements" TableColumns="achievementColumns"
    Actions="GetActions" OnPageChanged="OnPageChanged" OnPageSizeChanged="OnPageSizeChanged" />

<!-- Option 2: Using DataTableComponent with QuickGrid columns (for complex scenarios)
<DataTableComponent TItem="AchievementModel"
                   PaginatedResult="paginatedAchievements"
                   OnPageChanged="OnPageChanged"
                   OnPageSizeChanged="OnPageSizeChanged">
    <Columns>
        <PropertyColumn Property="achievement => achievement.Name" Title="Name" />
        <PropertyColumn Property="achievement => achievement.Description" Title="Description" />
        <PropertyColumn Property="achievement => achievement.Points" Title="Points" />
        <PropertyColumn Property="achievement => achievement.Type" Title="Type" />
        <PropertyColumn Property="achievement => achievement.IsActive" Title="Active" />
        <PropertyColumn Property="achievement => achievement.UsersEarnedCount" Title="Users Earned" />
    </Columns>
    <Actions Context="achievement">
        <div class="btn-group" role="group">
            <a href="@($"/admin/achievements/edit?id={achievement.Id}")" class="btn btn-sm btn-outline-primary">
                <i class="bi bi-pencil"></i> Edit
            </a>
            <a href="@($"/admin/achievements/details?id={achievement.Id}")" class="btn btn-sm btn-outline-info">
                <i class="bi bi-eye"></i> Details
            </a>
            <a href="@($"/admin/achievements/delete?id={achievement.Id}")" class="btn btn-sm btn-outline-danger">
                <i class="bi bi-trash"></i> Delete
            </a>
        </div>
    </Actions>
</DataTableComponent>
-->

@code {
    private PaginatedResult<AchievementModel>? paginatedAchievements;
    private int currentPage = 1;
    private int pageSize = 10;

    // Column configuration for the DataTableComponent
    private List<TableColumn<AchievementModel>> achievementColumns = new()
{
TableColumn<AchievementModel>.Create("Name", a => a.Name),
TableColumn<AchievementModel>.Create("Description", a => a.Description),
TableColumn<AchievementModel>.Create("Points", a => a.Points),
TableColumn<AchievementModel>.Create("Type", a => a.Type),
TableColumn<AchievementModel>.Create("Active", a => a.IsActive ? "Yes" : "No"),
TableColumn<AchievementModel>.Create("Users Earned", a => a.UsersEarnedCount)
};

    // Actions render fragment for each row
    private RenderFragment<AchievementModel> GetActions => achievement =>
    @<div class="btn-group" role="group">
        <a href="@($"/admin/achievements/edit?id={achievement.Id}")" class="btn btn-sm btn-outline-primary">
            <i class="bi bi-pencil"></i> Edit
        </a>
        <a href="@($"/admin/achievements/details?id={achievement.Id}")" class="btn btn-sm btn-outline-info">
            <i class="bi bi-eye"></i> Details
        </a>
        <a href="@($"/admin/achievements/delete?id={achievement.Id}")" class="btn btn-sm btn-outline-danger">
            <i class="bi bi-trash"></i> Delete
        </a>
    </div>;

    protected override async Task OnInitializedAsync()
    {
        await LoadAchievementsAsync();
    }

    private async Task LoadAchievementsAsync()
    {
        var request = new PaginationRequest
        {
            PageNumber = currentPage,
            PageSize = pageSize
        };
        paginatedAchievements = await AchievementRepository.GetAllAchievementsPaginatedAsync(request);
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadAchievementsAsync();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1;
        await LoadAchievementsAsync();
    }
}
