@page "/admin/certificates"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject ICertificateRepository CertificateRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Certificates - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Certificates</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/certificates/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Certificate
    </Button>
</div>

<DataTableComponent TItem="CertificateModel" 
                    DataProvider="CertificatesDataProvider"
                    PageSize="10"
                    AllowFiltering="true">
    <Columns>
        <GridColumn TItem="CertificateModel" HeaderText="User ID" PropertyName="UserId" SortKeySelector="item => item.UserId" Filterable="true" />
        <GridColumn TItem="CertificateModel" HeaderText="User Name" PropertyName="UserName" SortKeySelector="item => item.UserName" Filterable="true" />
        <GridColumn TItem="CertificateModel" HeaderText="Course ID" PropertyName="CourseId" SortKeySelector="item => item.CourseId" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End" />
        <GridColumn TItem="CertificateModel" HeaderText="Course Title" PropertyName="CourseTitle" SortKeySelector="item => item.CourseTitle" Filterable="true" />
        <GridColumn TItem="CertificateModel" HeaderText="Certificate Number" PropertyName="CertificateNumber" SortKeySelector="item => item.CertificateNumber" Filterable="true" />
        <GridColumn TItem="CertificateModel" HeaderText="Issued" SortKeySelector="item => item.IssuedAt">
            @context.IssuedAt.ToString("yyyy-MM-dd")
        </GridColumn>
        <GridColumn TItem="CertificateModel" HeaderText="Expires" SortKeySelector="item => item.ExpiresAt">
            @(context.ExpiresAt?.ToString("yyyy-MM-dd") ?? "Never")
        </GridColumn>
        <GridColumn TItem="CertificateModel" HeaderText="Final Grade" SortKeySelector="item => item.FinalGrade" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
            <Badge Color="@GetGradeBadgeColor(context.FinalGrade)">@context.FinalGrade.ToString("F1")%</Badge>
        </GridColumn>
        <GridColumn TItem="CertificateModel" HeaderText="Valid" SortKeySelector="item => item.IsValid">
            <Badge Color="@(context.IsValid ? BadgeColor.Success : BadgeColor.Danger)">
                @(context.IsValid ? "Valid" : "Invalid")
            </Badge>
        </GridColumn>
    </Columns>
    <Actions>
        <div class="btn-group" role="group">
            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/certificates/edit?id={context.Id}")'>
                <Icon Name="IconName.Pencil" /> Edit
            </Button>
            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/certificates/details?id={context.Id}")'>
                <Icon Name="IconName.Eye" /> Details
            </Button>
            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => ConfirmDelete(context)">
                <Icon Name="IconName.Trash" /> Delete
            </Button>
        </div>
    </Actions>
</DataTableComponent>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal" 
                Title="Confirm Delete" 
                Message="@($"Are you sure you want to delete the certificate '{certificateToDelete?.CertificateNumber}' for '{certificateToDelete?.UserName}'? This action cannot be undone.")"
                ConfirmButtonText="Delete"
                ConfirmButtonColor="ButtonColor.Danger"
                OnConfirm="DeleteCertificate" />

@code {
    private IEnumerable<CertificateModel> certificates = default!;
    private ModalComponent deleteModal = default!;
    private CertificateModel? certificateToDelete;

    private async Task<GridDataProviderResult<CertificateModel>> CertificatesDataProvider(GridDataProviderRequest<CertificateModel> request)
    {
        if (certificates is null)
            certificates = await GetCertificates();

        return await Task.FromResult(request.ApplyTo(certificates));
    }

    private async Task<IEnumerable<CertificateModel>> GetCertificates()
    {
        try
        {
            var paginationRequest = new PaginationRequest
            {
                PageNumber = 1,
                PageSize = 1000
            };

            var result = await CertificateRepository.GetCertificatesPaginatedAsync(paginationRequest);
            return result?.Items ?? GetMockCertificates();
        }
        catch
        {
            return GetMockCertificates();
        }
    }

    private async Task ConfirmDelete(CertificateModel certificate)
    {
        certificateToDelete = certificate;
        await deleteModal.ShowAsync();
    }

    private Task DeleteCertificate()
    {
        if (certificateToDelete != null)
        {
            try
            {
                // Implement actual delete logic here
                // await CertificateRepository.DeleteAsync(certificateToDelete.Id);
                
                // For now, just remove from the mock list
                certificates = certificates.Where(c => c.Id != certificateToDelete.Id).ToList();
                StateHasChanged();
                
                // Show success toast
                ToastService.ShowSuccess("Success", $"Certificate '{certificateToDelete.CertificateNumber}' deleted successfully.");
            }
            catch (Exception ex)
            {
                // Show error toast
                ToastService.ShowError("Error", $"Error deleting certificate: {ex.Message}");
            }
            finally
            {
                certificateToDelete = null;
            }
        }

        return Task.CompletedTask;
    }

    private BadgeColor GetGradeBadgeColor(double grade) => grade switch
    {
        >= 90 => BadgeColor.Success,
        >= 80 => BadgeColor.Primary,
        >= 70 => BadgeColor.Warning,
        _ => BadgeColor.Danger
    };

    private IEnumerable<CertificateModel> GetMockCertificates()
    {
        return new List<CertificateModel>
        {
            new CertificateModel { Id = 1, UserId = "user1", UserName = "John Doe", CourseId = 101, CourseTitle = "Introduction to Blazor", CertificateNumber = "CERT-001-BLZ", IssuedAt = DateTime.Now.AddMonths(-3), ExpiresAt = DateTime.Now.AddYears(1), FinalGrade = 92.5, IsValid = true },
            new CertificateModel { Id = 2, UserId = "user2", UserName = "Jane Smith", CourseId = 102, CourseTitle = "Advanced C#", CertificateNumber = "CERT-002-CSH", IssuedAt = DateTime.Now.AddMonths(-6), ExpiresAt = DateTime.Now.AddYears(1), FinalGrade = 88.0, IsValid = true },
            new CertificateModel { Id = 3, UserId = "user1", UserName = "John Doe", CourseId = 103, CourseTitle = "Azure Fundamentals", CertificateNumber = "CERT-003-AZR", IssuedAt = DateTime.Now.AddMonths(-1), ExpiresAt = DateTime.Now.AddYears(1), FinalGrade = 95.0, IsValid = true }
        };
    }
}
