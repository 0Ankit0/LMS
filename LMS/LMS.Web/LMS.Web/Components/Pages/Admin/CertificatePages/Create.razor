@page "/admin/certificates/create"

@using LMS.Repositories
@using LMS.Data.DTOs
@using LMS.Web.Components.Shared
@using LMS.Web.Services

@inject ICertificateRepository CertificateRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Certificate - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Certificate</h1>
    <Button Color="ButtonColor.Secondary" Href="/admin/certificates">
        <Icon Name="IconName.ArrowLeft" />
        Back to Certificates
    </Button>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Certificate Information</h5>
            </div>
            <div class="card-body">
                <EditForm Model="Certificate" OnValidSubmit="AddCertificate">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />

                    <div class="mb-3">
                        <label for="userid" class="form-label">User <span class="text-danger">*</span></label>
                        <SearchableSelectComponent TItem="DropdownOption<string>" 
                                                   TValue="string" 
                                                   DataProvider="SearchUsersDataProvider"
                                                   ValueSelector="@(item => item.Value)" 
                                                   DisplaySelector="@(item => item.Text)"
                                                   @bind-SelectedValue="Certificate.UserId"
                                                   Placeholder="Select a user..." 
                                                   EmptyText="No users found" />
                        <ValidationMessage For="() => Certificate.UserId" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="courseid" class="form-label">Course <span class="text-danger">*</span></label>
                        <SearchableSelectComponent TItem="DropdownOption<int>" 
                                                   TValue="int" 
                                                   DataProvider="SearchCoursesDataProvider"
                                                   ValueSelector="@(item => item.Value)" 
                                                   DisplaySelector="@(item => item.Text)"
                                                   @bind-SelectedValue="Certificate.CourseId"
                                                   Placeholder="Select a course..." 
                                                   EmptyText="No courses found" />
                        <ValidationMessage For="() => Certificate.CourseId" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="finalgrade" class="form-label">Final Grade</label>
                        <InputNumber id="finalgrade" @bind-Value="Certificate.FinalGrade" class="form-control"
                                     step="0.01" />
                        <ValidationMessage For="() => Certificate.FinalGrade" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="expiresat" class="form-label">Expires At</label>
                        <InputDate id="expiresat" @bind-Value="Certificate.ExpiresAt" class="form-control" />
                        <ValidationMessage For="() => Certificate.ExpiresAt" class="text-danger" />
                    </div>

                    <div class="d-flex gap-2">
                        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Loading="@isSubmitting">
                            <Icon Name="IconName.CheckCircle" />
                            Create Certificate
                        </Button>
                        <Button Color="ButtonColor.Secondary" Href="/admin/certificates">Cancel</Button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateCertificateRequest Certificate { get; set; } = new();
    private bool isSubmitting = false;

    private async Task<AutoCompleteDataProviderResult<DropdownOption<string>>> SearchUsersDataProvider(AutoCompleteDataProviderRequest<DropdownOption<string>> request)
    {
        try
        {
            var users = await DropdownRepository.GetUsersAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<string>>
            {
                Data = users,
                TotalCount = users.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<string>>
            {
                Data = new List<DropdownOption<string>>(),
                TotalCount = 0
            };
        }
    }

    private async Task<AutoCompleteDataProviderResult<DropdownOption<int>>> SearchCoursesDataProvider(AutoCompleteDataProviderRequest<DropdownOption<int>> request)
    {
        try
        {
            var courses = await DropdownRepository.GetCoursesAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = courses,
                TotalCount = courses.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = new List<DropdownOption<int>>(),
                TotalCount = 0
            };
        }
    }

    private async Task AddCertificate()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;
        try
        {
            var result = await CertificateRepository.IssueCertificateAsync(Certificate);
            if (result != null)
            {
                ToastService.ShowSuccess("Success", "Certificate created successfully!");
                NavigationManager.NavigateTo("/admin/certificates");
            }
            else
            {
                ToastService.ShowError("Error", "Failed to create certificate. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error creating certificate: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}