@page "/admin/assessments"


@using LMS.Repositories
@inject IAssessmentRepository AssessmentRepository

<PageTitle>Assessments - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Assessments</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/assessments/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Assessment
    </Button>
</div>

<div class="card">
    <div class="card-body">
        @if (paginatedAssessments != null)
        {
            if (paginatedAssessments.Items.Any())
            {
                <Grid TItem="AssessmentModel" Class="table table-striped table-hover" Data="paginatedAssessments.Items">
                    <GridColumn TItem="AssessmentModel" HeaderText="Title" PropertyName="Title" />
                    <GridColumn TItem="AssessmentModel" HeaderText="Description" PropertyName="Description" />
                    <GridColumn TItem="AssessmentModel" HeaderText="Course ID" PropertyName="CourseId" />
                    <GridColumn TItem="AssessmentModel" HeaderText="Type" PropertyName="Type" />
                    <GridColumn TItem="AssessmentModel" HeaderText="Max Attempts" PropertyName="MaxAttempts" />
                    <GridColumn TItem="AssessmentModel" HeaderText="Passing Score" PropertyName="PassingScore" />
                    <GridColumn TItem="AssessmentModel" HeaderText="Randomized">
                        @((context as AssessmentModel)?.IsRandomized == true ? "Yes" : "No")
                    </GridColumn>
                    <GridColumn TItem="AssessmentModel" HeaderText="Available From" PropertyName="AvailableFrom" Format="yyyy-MM-dd" />

                    <GridColumn TItem="AssessmentModel" HeaderText="Actions">
                        <div class="btn-group" role="group">
                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/assessments/edit?id={context.Id}")'>
                                <Icon Name="IconName.Pencil" /> Edit
                            </Button>
                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/assessments/details?id={context.Id}")'>
                                <Icon Name="IconName.Eye" /> Details
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" Href='@($"/admin/assessments/delete?id={context.Id}")'>
                                <Icon Name="IconName.Trash" /> Delete
                            </Button>
                        </div>
                    </GridColumn>
                </Grid>

                <PaginationComponent TItem="AssessmentModel" PaginatedResult="paginatedAssessments"
                    OnPageChanged="OnPageChanged" OnPageSizeChanged="OnPageSizeChanged" />
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">No assessments found.</p>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private PaginatedResult<AssessmentModel>? paginatedAssessments;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessmentsAsync();
    }

    private async Task LoadAssessmentsAsync()
    {
        var request = new PaginationRequest
        {
            PageNumber = currentPage,
            PageSize = pageSize
        };
        paginatedAssessments = await AssessmentRepository.GetAssessmentsPaginatedAsync(request);

        if (paginatedAssessments == null || !paginatedAssessments.Items.Any())
        {
            paginatedAssessments = new PaginatedResult<AssessmentModel>
            {
                Items = new List<AssessmentModel>
                {
                    new AssessmentModel { Id = 1, Title = "Introduction to C# Quiz", Description = "Basic concepts of C#.", CourseId = 1, CourseName = "C# Programming", Type = "Quiz", MaxAttempts = 3, PassingScore = 70.0, IsRandomized = true, AvailableFrom = DateTime.Now.AddDays(-7) },
                    new AssessmentModel { Id = 2, Title = "Advanced SQL Exam", Description = "Complex SQL queries and database design.", CourseId = 2, CourseName = "Database Management", Type = "Exam", MaxAttempts = 1, PassingScore = 80.0, IsRandomized = false, AvailableFrom = DateTime.Now.AddDays(-14) },
                    new AssessmentModel { Id = 3, Title = "Web Development Project", Description = "Build a simple web application.", CourseId = 3, CourseName = "Full-Stack Web Dev", Type = "Project", MaxAttempts = 1, PassingScore = 60.0, IsRandomized = false, AvailableFrom = DateTime.Now.AddDays(-30) }
                },
                TotalCount = 3,
                PageNumber = currentPage,
                PageSize = pageSize
            };
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadAssessmentsAsync();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1;
        await LoadAssessmentsAsync();
    }
}
