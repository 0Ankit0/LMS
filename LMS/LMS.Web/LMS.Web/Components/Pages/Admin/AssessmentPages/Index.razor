@page "/admin/assessments"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject IAssessmentRepository AssessmentRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Assessments - Admin</PageTitle>

<Card>
    <CardHeader>
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Assessments</h5>
            <Button Color="ButtonColor.Primary" Href="/admin/assessments/create">
                <Icon Name="IconName.PlusCircle" />
                Add New Assessment
            </Button>
        </div>
    </CardHeader>
    <CardBody>
        <Grid TItem="AssessmentModel"
              DataProvider="AssessmentDataProvider"
              AllowPaging="true"
              AllowSorting="true"
              AllowFiltering="true">
            <GridColumn TItem="AssessmentModel" HeaderText="Title" PropertyName="Title" />
            <GridColumn TItem="AssessmentModel" HeaderText="Description" PropertyName="Description" />
            <GridColumn TItem="AssessmentModel" HeaderText="Course ID" PropertyName="CourseId" />
            <GridColumn TItem="AssessmentModel" HeaderText="Type" PropertyName="Type" />
            <GridColumn TItem="AssessmentModel" HeaderText="Max Attempts" PropertyName="MaxAttempts" />
            <GridColumn TItem="AssessmentModel" HeaderText="Passing Score" PropertyName="PassingScore" />
            <GridColumn TItem="AssessmentModel" HeaderText="Randomized">
                @((context as AssessmentModel)?.IsRandomized == true ? "Yes" : "No")
            </GridColumn>
            <GridColumn TItem="AssessmentModel" HeaderText="Available From" PropertyName="AvailableFrom"
                        Format="yyyy-MM-dd" />
            <GridColumn TItem="AssessmentModel" HeaderText="Actions">
                <div class="btn-group" role="group">
                    <Button Color="ButtonColor.Primary" Size="ButtonSize.Small"
                            Href='@($"/admin/assessments/edit?id={context.Id}")'>
                        <Icon Name="IconName.Pencil" /> Edit
                    </Button>
                    <Button Color="ButtonColor.Success" Size="ButtonSize.Small" Href='@($"/admin/assessments/manage?id={context.Id}")'>
                        <Icon Name="IconName.Wrench" /> Manage
                    </Button>
                    <Button Color="ButtonColor.Info" Size="ButtonSize.Small"
                            Href='@($"/admin/assessments/details?id={context.Id}")'>
                        <Icon Name="IconName.Eye" /> Details
                    </Button>
                    <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => ConfirmDelete(context)">
                        <Icon Name="IconName.Trash" /> Delete
                    </Button>
                </div>
            </GridColumn>
        </Grid>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal"
                Title="Confirm Delete"
                Message="@($"Are you sure you want to delete the assessment '{assessmentToDelete?.Title}'? This action cannot be undone.")"
                ConfirmButtonText="Delete"
                ConfirmButtonColor="ButtonColor.Danger"
                OnConfirm="DeleteAssessment" />

@code {
    private ModalComponent deleteModal = default!;
    private AssessmentModel? assessmentToDelete;

    private async Task<GridDataProviderResult<AssessmentModel>> AssessmentDataProvider(GridDataProviderRequest<AssessmentModel> request)
    {
        try
        {
            // Only pass supported properties to PaginationRequest
            var result = await AssessmentRepository.GetAssessmentsPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
                // Remove unsupported properties: Filter, SortBy, SortDirection
            });

            return new GridDataProviderResult<AssessmentModel>
            {
                Data = result.Items,
                TotalCount = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading assessments: {ex.Message}");
            return new GridDataProviderResult<AssessmentModel>
            {
                Data = Enumerable.Empty<AssessmentModel>(),
                TotalCount = 0
            };
        }
    }

    private async Task ConfirmDelete(AssessmentModel assessment)
    {
        assessmentToDelete = assessment;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteAssessment()
    {
        if (assessmentToDelete != null)
        {
            try
            {
                // Use the correct delete method from the repository
                await AssessmentRepository.DeleteAssessmentAsync(assessmentToDelete.Id);
                ToastService.ShowSuccess("Success", $"Assessment '{assessmentToDelete.Title}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting assessment: {ex.Message}");
            }
            finally
            {
                assessmentToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}