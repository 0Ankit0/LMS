@page "/admin/assessments"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject IAssessmentRepository AssessmentRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Assessments - Admin</PageTitle>

<Card>
    <CardHeader>
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Assessments</h5>
            <a href="/admin/assessments/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i>
                Add New Assessment
            </a>
        </div>
    </CardHeader>
    <CardBody>
        <DataTableComponent TItem="AssessmentModel" DataProvider="AssessmentDataProvider" AllowPaging="true"
                            AllowSorting="true" AllowFiltering="true" PageSize="10">
            <Columns>
                <GridColumn TItem="AssessmentModel" HeaderText="Title" PropertyName="Title">
                    @context.Title
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Description" PropertyName="Description">
                    @context.Description
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Course ID" PropertyName="CourseId">
                    @context.CourseId
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Type" PropertyName="Type">
                    @context.Type
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Max Attempts" PropertyName="MaxAttempts">
                    @context.MaxAttempts
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Passing Score" PropertyName="PassingScore">
                    @context.PassingScore
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Randomized">
                    @(context.IsRandomized ? "Yes" : "No")
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Available From" PropertyName="AvailableFrom"
                            Format="yyyy-MM-dd">
                    @context.AvailableFrom?.ToString("yyyy-MM-dd")
                </GridColumn>
                <GridColumn TItem="AssessmentModel" HeaderText="Actions" Sortable="false" Filterable="false">
                    <div class="btn-group" role="group">
                        <a href='@($"/admin/assessments/edit?id={context.Id}")' class="btn btn-primary btn-sm">
                            <i class="bi bi-pencil"></i> Edit
                        </a>
                        <a href='@($"/admin/assessments/manage?id={context.Id}")' class="btn btn-success btn-sm">
                            <i class="bi bi-wrench"></i> Manage
                        </a>
                        <a href='@($"/admin/assessments/details?id={context.Id}")' class="btn btn-info btn-sm">
                            <i class="bi bi-eye"></i> Details
                        </a>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(context)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </GridColumn>
            </Columns>
        </DataTableComponent>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal" Title="Confirm Delete"
                Message="@($"Are you sure you want to delete the assessment '{assessmentToDelete?.Title}'? This action cannot be undone.")"
                ConfirmButtonText="Delete" ConfirmButtonColor="ButtonColor.Danger" OnConfirm="DeleteAssessment" />

@code {
    private ModalComponent deleteModal = default!;
    private AssessmentModel? assessmentToDelete;

    private async Task<GridDataProviderResult<AssessmentModel>>
    AssessmentDataProvider(GridDataProviderRequest<AssessmentModel> request)
    {
        try
        {
            var result = await AssessmentRepository.GetAssessmentsPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
            });

            // If no results return, use dummy data
            if (result.Items == null || !result.Items.Any())
            {
                var dummy = AddDummyAssessments();
                return new GridDataProviderResult<AssessmentModel>
                {
                    Data = dummy,
                    TotalCount = dummy.Count
                };
            }

            return new GridDataProviderResult<AssessmentModel>
            {
                Data = result.Items,
                TotalCount = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading assessments: {ex.Message}");
            var dummy = AddDummyAssessments();
            return new GridDataProviderResult<AssessmentModel>
            {
                Data = dummy,
                TotalCount = dummy.Count
            };
        }
    }

    private async Task ConfirmDelete(AssessmentModel assessment)
    {
        assessmentToDelete = assessment;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteAssessment()
    {
        if (assessmentToDelete != null)
        {
            try
            {
                await AssessmentRepository.DeleteAssessmentAsync(assessmentToDelete.Id);
                ToastService.ShowSuccess("Success", $"Assessment '{assessmentToDelete.Title}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting assessment: {ex.Message}");
            }
            finally
            {
                assessmentToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    // Dummy data for assessments to use if no data is returned from the server
    private List<AssessmentModel> AddDummyAssessments()
    {
        return new List<AssessmentModel>
        {
            new AssessmentModel
            {
                Id = 1,
                Title = "Dummy Assessment 1",
                Description = "This is a sample assessment to test the grid display.",
                CourseId = 1,
                Type = "Quiz",
                MaxAttempts = 3,
                PassingScore = 70,
                IsRandomized = true,
                AvailableFrom = DateTime.Now.AddDays(-1),
                IsActive = true,
                // Additional properties can be set as needed.
                Questions = new List<QuestionModel>()
            },
            new AssessmentModel
            {
                Id = 2,
                Title = "Dummy Assessment 2",
                Description = "Another sample assessment with extended details.",
                CourseId = 2,
                Type = "Exam",
                MaxAttempts = 1,
                PassingScore = 80,
                IsRandomized = false,
                AvailableFrom = DateTime.Now.AddDays(-2),
                IsActive = true,
                Questions = new List<QuestionModel>()
            }
        };
    }
}