@page "/admin/assessments/manage"
@rendermode @(new InteractiveServerRenderMode())
@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject IAssessmentRepository AssessmentRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Manage Assessment - Admin</PageTitle>

@if (assessment != null)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0">Manage Assessment: @assessment.Title</h1>
        <Button Color="ButtonColor.Secondary" Href="/admin/assessments">
            <Icon Name="IconName.ArrowLeft" />
            Back to Assessments
        </Button>
    </div>

    <div class="row">
        <div class="col-md-4">
            <Card>
                <CardHeader>
                    <h5 class="mb-0">Add New Question</h5>
                </CardHeader>
                <CardBody>
                    <EditForm Model="newQuestion" OnValidSubmit="AddQuestion">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Question Text</label>
                            <InputTextArea @bind-Value="newQuestion.Text" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Question Type</label>
                            <InputSelect @bind-Value="newQuestion.Type" class="form-select">
                                @foreach (var type in Enum.GetValues<QuestionType>())
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                        </div>

                        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Add Question</Button>
                    </EditForm>
                </CardBody>
            </Card>
        </div>
        <div class="col-md-8">
            <Card>
                <CardHeader>
                    <h5 class="mb-0">Questions</h5>
                </CardHeader>
                <CardBody>
                    @if (assessment.Questions != null && assessment.Questions.Any())
                    {
                        <ul class="list-group">
                            @foreach (var question in assessment.Questions)
                            {
                                <li class="list-group-item">@question.Text</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No questions have been added to this assessment yet.</p>
                    }
                </CardBody>
            </Card>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private AssessmentModel? assessment;
    private CreateQuestionRequest newQuestion = new();

    protected override async Task OnInitializedAsync()
    {
        // Use GetAssessmentAsync (not GetAssessmentByIdAsync) and make assessment nullable
        assessment = await AssessmentRepository.GetAssessmentAsync(Id);
    }

    private async Task AddQuestion()
    {
        newQuestion.AssessmentId = Id;
        var result = await AssessmentRepository.CreateQuestionAsync(newQuestion);
        if (result != null)
        {
            // Refresh the assessment after adding a question
            assessment = await AssessmentRepository.GetAssessmentAsync(Id);
            newQuestion = new();
            ToastService.ShowSuccess("Success", "Question created successfully!");
        }
        else
        {
            ToastService.ShowError("Error", "Failed to create question. Please try again.");
        }
    }
}