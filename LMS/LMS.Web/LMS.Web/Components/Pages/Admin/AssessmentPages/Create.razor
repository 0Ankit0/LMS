@page "/admin/assessments/create"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@using Microsoft.AspNetCore.Components.Forms

@inject IAssessmentRepository AssessmentRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Assessment - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Assessment</h1>
    <Button Color="ButtonColor.Secondary" Href="/admin/assessments">
        <Icon Name="IconName.ArrowLeft" />
        Back to Assessments
    </Button>
</div>

<Card>
    <CardHeader>
        <h5 class="card-title mb-0">Assessment Information</h5>
    </CardHeader>
    <CardBody>
        <EditForm Model="Assessment" OnValidSubmit="AddAssessment">
            <AntiforgeryToken />
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" role="alert" />

            <div class="mb-3">
                <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                <InputText id="title" @bind-Value="Assessment.Title" class="form-control" aria-required="true"
                           placeholder="Enter assessment title" />
                <ValidationMessage For="() => Assessment.Title" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" @bind-Value="Assessment.Description" class="form-control"
                               rows="3" placeholder="Enter assessment description" />
                <ValidationMessage For="() => Assessment.Description" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="courseid" class="form-label">Course <span class="text-danger">*</span></label>
                <SearchableSelectComponent TItem="DropdownOption<int>"
                                           TValue="int?"
                                           DataProvider="SearchCoursesDataProvider"
                                           ValueSelector="@(item => (int?)item.Value)"
                                           DisplaySelector="@(item => item.Text)"
                                           @bind-SelectedValue="Assessment.CourseId"
                                           Placeholder="Select a course..."
                                           EmptyText="No courses found" />
                <ValidationMessage For="() => Assessment.CourseId" class="text-danger" />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="moduleid" class="form-label">Module (Optional)</label>
                    <SearchableSelectComponent TItem="DropdownOption<int>"
                                               TValue="int?"
                                               DataProvider="SearchModulesDataProvider"
                                               ValueSelector="@(item => (int?)item.Value)"
                                               DisplaySelector="@(item => item.Text)"
                                               @bind-SelectedValue="Assessment.ModuleId"
                                               Placeholder="Select a module (optional)..."
                                               EmptyText="No modules found" />
                    <ValidationMessage For="() => Assessment.ModuleId" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="lessonid" class="form-label">Lesson (Optional)</label>
                    <SearchableSelectComponent TItem="DropdownOption<int>"
                                               TValue="int?"
                                               DataProvider="SearchLessonsDataProvider"
                                               ValueSelector="@(item => (int?)item.Value)"
                                               DisplaySelector="@(item => item.Text)"
                                               @bind-SelectedValue="Assessment.LessonId"
                                               Placeholder="Select a lesson (optional)..."
                                               EmptyText="No lessons found" />
                    <ValidationMessage For="() => Assessment.LessonId" class="text-danger" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="type" class="form-label">Assessment Type</label>
                    <InputSelect id="type" @bind-Value="Assessment.Type" class="form-select">
                        @foreach (var enumValue in
                                                Enum.GetValues(typeof(AssessmentType)).Cast<AssessmentType>())
                        {
                            <option value="@((int)enumValue)">@enumValue.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Assessment.Type" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="maxattempts" class="form-label">Max Attempts</label>
                    <InputNumber id="maxattempts" @bind-Value="Assessment.MaxAttempts" class="form-control" />
                    <ValidationMessage For="() => Assessment.MaxAttempts" class="text-danger" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="timelimit" class="form-label">Time Limit (minutes)</label>
                    <InputNumber id="timelimit" @bind-Value="TimeLimitMinutes" class="form-control" />
                    <ValidationMessage For="() => TimeLimitMinutes" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="passingscore" class="form-label">Passing Score (%)</label>
                    <InputNumber id="passingscore" @bind-Value="Assessment.PassingScore" class="form-control"
                                 step="0.01" />
                    <ValidationMessage For="() => Assessment.PassingScore" class="text-danger" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-check">
                        <InputCheckbox id="israndomized" @bind-Value="Assessment.IsRandomized"
                                       class="form-check-input" />
                        <label for="israndomized" class="form-check-label">Randomize Questions</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-check">
                        <InputCheckbox id="showcorrectanswers" @bind-Value="Assessment.ShowCorrectAnswers"
                                       class="form-check-input" />
                        <label for="showcorrectanswers" class="form-check-label">Show Correct Answers</label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-check">
                        <InputCheckbox id="showscoreimmediately" @bind-Value="Assessment.ShowScoreImmediately"
                                       class="form-check-input" />
                        <label for="showscoreimmediately" class="form-check-label">
                            Show Score
                            Immediately
                        </label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="availablefrom" class="form-label">Available From</label>
                    <InputDate id="availablefrom" @bind-Value="Assessment.AvailableFrom" class="form-control" />
                    <ValidationMessage For="() => Assessment.AvailableFrom" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="availableuntil" class="form-label">Available Until</label>
                    <InputDate id="availableuntil" @bind-Value="Assessment.AvailableUntil"
                               class="form-control" />
                    <ValidationMessage For="() => Assessment.AvailableUntil" class="text-danger" />
                </div>
            </div>

            <div class="d-flex gap-2">
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Loading="@isSubmitting">
                    <Icon Name="IconName.CheckCircle" />
                    Create Assessment
                </Button>
                <Button Color="ButtonColor.Secondary" Href="/admin/assessments">Cancel</Button>
            </div>
        </EditForm>
    </CardBody>
</Card>

@code {
    [SupplyParameterFromForm]
    private CreateAssessmentRequest Assessment { get; set; } = new();
    private bool isSubmitting = false;

    private int? TimeLimitMinutes
    {
        get => Assessment.TimeLimit.TotalMinutes > 0 ? (int)Assessment.TimeLimit.TotalMinutes : null;
        set => Assessment.TimeLimit = value.HasValue ? TimeSpan.FromMinutes(value.Value) : TimeSpan.Zero;
    }

    private async Task<AutoCompleteDataProviderResult<DropdownOption<int>>> SearchCoursesDataProvider(AutoCompleteDataProviderRequest<DropdownOption<int>> request)
    {
        try
        {
            var courses = await DropdownRepository.GetCoursesAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = courses,
                TotalCount = courses.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = new List<DropdownOption<int>>(),
                TotalCount = 0
            };
        }
    }

    private async Task<AutoCompleteDataProviderResult<DropdownOption<int>>> SearchModulesDataProvider(AutoCompleteDataProviderRequest<DropdownOption<int>> request)
    {
        try
        {
            var modules = await DropdownRepository.GetModulesAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = modules,
                TotalCount = modules.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading modules: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = new List<DropdownOption<int>>(),
                TotalCount = 0
            };
        }
    }

    private async Task<AutoCompleteDataProviderResult<DropdownOption<int>>> SearchLessonsDataProvider(AutoCompleteDataProviderRequest<DropdownOption<int>> request)
    {
        try
        {
            var lessons = await DropdownRepository.GetLessonsAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = lessons,
                TotalCount = lessons.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lessons: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = new List<DropdownOption<int>>(),
                TotalCount = 0
            };
        }
    }

    private async Task AddAssessment()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        try
        {
            var result = await AssessmentRepository.CreateAssessmentAsync(Assessment);
            if (result != null)
            {
                ToastService.ShowSuccess("Success", "Assessment created successfully!");
                NavigationManager.NavigateTo("/admin/assessments");
            }
            else
            {
                ToastService.ShowError("Error", "Failed to create assessment. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error creating assessment: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}