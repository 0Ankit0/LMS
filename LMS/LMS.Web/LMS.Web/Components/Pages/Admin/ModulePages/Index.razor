@page "/admin/modules"
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject IModuleRepository ModuleRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Modules - Admin</PageTitle>

<Card>
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Modules</h5>
            <Button Color="ButtonColor.Primary" Href="/admin/modules/create">
                <Icon Name="IconName.PlusCircle" />
                Add New Module
            </Button>
        </div>
    </div>
    <CardBody>
        <DataTableComponent TItem="ModuleModel"
                            DataProvider="ModulesDataProvider"
                            AllowPaging="true"
                            AllowSorting="true"
                            AllowFiltering="true">
            <GridColumn TItem="ModuleModel" HeaderText="Title" PropertyName="Title" SortKeySelector="item => item.Title" Filterable="true">
                @context.Title
            </GridColumn>
            <GridColumn TItem="ModuleModel" HeaderText="Description" PropertyName="Description" Filterable="true">
                @context.Description
            </GridColumn>
            <GridColumn TItem="ModuleModel" HeaderText="Course ID" PropertyName="CourseId" SortKeySelector="item => item.CourseId" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @context.CourseId
            </GridColumn>
            <GridColumn TItem="ModuleModel" HeaderText="Order" PropertyName="OrderIndex" SortKeySelector="item => item.OrderIndex" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @context.OrderIndex
            </GridColumn>
            <GridColumn TItem="ModuleModel" HeaderText="Required" SortKeySelector="item => item.IsRequired">
                <Badge Color="@(context.IsRequired ? BadgeColor.Primary : BadgeColor.Secondary)">
                    @(context.IsRequired ? "Yes" : "No")
                </Badge>
            </GridColumn>
            <GridColumn TItem="ModuleModel" HeaderText="Active" SortKeySelector="item => item.IsActive">
                <Badge Color="@(context.IsActive ? BadgeColor.Success : BadgeColor.Secondary)">
                    @(context.IsActive ? "Yes" : "No")
                </Badge>
            </GridColumn>
            <GridColumn TItem="ModuleModel" HeaderText="Lessons" SortKeySelector="item => item.Lessons.Count" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @(context.Lessons?.Count ?? 0)
            </GridColumn>
            <GridColumn TItem="ModuleModel" HeaderText="Actions" Sortable="false" Filterable="false">
                <div class="btn-group" role="group">
                    <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/modules/edit?id={context.Id}")'>
                        <Icon Name="IconName.Pencil" /> Edit
                    </Button>
                    <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/modules/details?id={context.Id}")'>
                        <Icon Name="IconName.Eye" /> Details
                    </Button>
                    <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => ConfirmDelete(context)">
                        <Icon Name="IconName.Trash" /> Delete
                    </Button>
                </div>
            </GridColumn>
        </DataTableComponent>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal"
                Title="Confirm Delete"
                Message="@($"Are you sure you want to delete the module '{moduleToDelete?.Title}'? This action cannot be undone.")"
                ConfirmButtonText="Delete"
                ConfirmButtonColor="ButtonColor.Danger"
                OnConfirm="DeleteModule" />

@code {
    private IEnumerable<ModuleModel> modules = default!;
    private ModalComponent deleteModal = default!;
    private ModuleModel? moduleToDelete;

    private async Task<GridDataProviderResult<ModuleModel>> ModulesDataProvider(GridDataProviderRequest<ModuleModel> request)
    {
        try
        {
            var result = await ModuleRepository.GetModulesPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
            });

            return new GridDataProviderResult<ModuleModel>
            {
                Data = result.Items,
                TotalCount = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading modules: {ex.Message}");
            return new GridDataProviderResult<ModuleModel>
            {
                Data = Enumerable.Empty<ModuleModel>(),
                TotalCount = 0
            };
        }
    }

    private async Task ConfirmDelete(ModuleModel module)
    {
        moduleToDelete = module;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteModule()
    {
        if (moduleToDelete != null)
        {
            try
            {
                await ModuleRepository.DeleteModuleAsync(moduleToDelete.Id);
                ToastService.ShowSuccess("Success", $"Module '{moduleToDelete.Title}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting module: {ex.Message}");
            }
            finally
            {
                moduleToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}
