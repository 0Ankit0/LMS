@page "/admin/modules"


@using LMS.Repositories
@inject IModuleRepository ModuleRepository

<PageTitle>Modules - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Modules</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/modules/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Module
    </Button>
</div>

<div class="card">
    <div class="card-body">
        @if (paginatedModules != null)
        {
            if (paginatedModules.Items.Any())
            {
                <Grid TItem="ModuleModel" Class="table table-striped table-hover" Data="paginatedModules.Items">
                    <GridColumn TItem="ModuleModel" HeaderText="Title" PropertyName="Title" />
                    <GridColumn TItem="ModuleModel" HeaderText="Description" PropertyName="Description" />
                    <GridColumn TItem="ModuleModel" HeaderText="Course ID" PropertyName="CourseId" />
                    <GridColumn TItem="ModuleModel" HeaderText="Order" PropertyName="OrderIndex" />
                    <GridColumn TItem="ModuleModel" HeaderText="Required">
                        @((context as ModuleModel)?.IsRequired == true ? "Yes" : "No")
                    </GridColumn>
                    <GridColumn TItem="ModuleModel" HeaderText="Active">
                        @((context as ModuleModel)?.IsActive == true ? "Yes" : "No")
                    </GridColumn>
                    <GridColumn TItem="ModuleModel" HeaderText="Lessons" PropertyName="Lessons.Count" />

                    <GridColumn TItem="ModuleModel" HeaderText="Actions">
                        <div class="btn-group" role="group">
                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/modules/edit?id={context.Id}")'>
                                <Icon Name="IconName.Pencil" /> Edit
                            </Button>
                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/modules/details?id={context.Id}")'>
                                <Icon Name="IconName.Eye" /> Details
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" Href='@($"/admin/modules/delete?id={context.Id}")'>
                                <Icon Name="IconName.Trash" /> Delete
                            </Button>
                        </div>
                    </GridColumn>
                </Grid>

                <PaginationComponent TItem="ModuleModel" PaginatedResult="paginatedModules"
                    OnPageChanged="OnPageChanged" OnPageSizeChanged="OnPageSizeChanged" />
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">No modules found.</p>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private PaginatedResult<ModuleModel>? paginatedModules;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadModulesAsync();
    }

    private async Task LoadModulesAsync()
    {
        var request = new PaginationRequest
        {
            PageNumber = currentPage,
            PageSize = pageSize
        };
        paginatedModules = await ModuleRepository.GetModulesPaginatedAsync(request);

        if (paginatedModules == null || !paginatedModules.Items.Any())
        {
            paginatedModules = new PaginatedResult<ModuleModel>
            {
                Items = new List<ModuleModel>
                {
                    new ModuleModel { Id = 1, Title = "C# Basics", Description = "Fundamental concepts of C#.", CourseId = 1, CourseName = "Introduction to C#", OrderIndex = 1, IsRequired = true, IsActive = true, Lessons = new List<LessonModel>() },
                    new ModuleModel { Id = 2, Title = "Advanced C# Features", Description = "Exploring advanced topics like LINQ and async/await.", CourseId = 1, CourseName = "Introduction to C#", OrderIndex = 2, IsRequired = true, IsActive = true, Lessons = new List<LessonModel>() },
                    new ModuleModel { Id = 3, Title = "Introduction to ASP.NET Core", Description = "Building web applications with ASP.NET Core.", CourseId = 2, CourseName = "Web Development", OrderIndex = 1, IsRequired = true, IsActive = true, Lessons = new List<LessonModel>() }
                },
                TotalCount = 3,
                PageNumber = currentPage,
                PageSize = pageSize
            };
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadModulesAsync();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1;
        await LoadModulesAsync();
    }
}
