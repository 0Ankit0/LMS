@page "/admin/modules/create"

@using LMS.Repositories

@inject ICourseRepository CourseRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Module</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Module" OnValidSubmit="AddModule" FormName="create" Enhance>
            <AntiforgeryToken />
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="Module.Title" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Module.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Module.Description" class="form-control" />
                <ValidationMessage For="() => Module.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="courseid" class="form-label">Course <span class="text-danger">*</span></label>
                <SearchableSelectComponent TItem="DropdownOption" TValue="int" Items="@courseOptions"
                    ValueSelector="@(item => item.Value)" DisplaySelector="@(item => item.Text)"
                    SearchFunction="@SearchCourses" SelectedValue="@Module.CourseId"
                    OnSelectedValueChanged="@((int value) => Module.CourseId = value)" Placeholder="Select a course..."
                    class="form-control" />
                <ValidationMessage For="() => Module.CourseId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="orderindex" class="form-label">OrderIndex:</label>
                <InputNumber id="orderindex" @bind-Value="Module.OrderIndex" class="form-control" />
                <ValidationMessage For="() => Module.OrderIndex" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isrequired" class="form-label">IsRequired:</label>
                <InputCheckbox id="isrequired" @bind-Value="Module.IsRequired" class="form-check-input" />
                <ValidationMessage For="() => Module.IsRequired" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/admin/modules">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateModuleRequest Module { get; set; } = new();

    private List<DropdownOption> courseOptions = new();

    protected override async Task OnInitializedAsync()
    {
        // Load initial options
        courseOptions = await DropdownRepository.GetCoursesAsync(search: "", take: 20);
    }

    private async Task<IEnumerable<DropdownOption>> SearchCourses(string searchTerm)
    {
        return await DropdownRepository.GetCoursesAsync(searchTerm, take: 20);
    }

    private async Task AddModule()
    {
        try
        {
            var result = await CourseRepository.CreateModuleAsync(Module);
            if (result != null)
            {
                NavigationManager.NavigateTo("/admin/modules");
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add error display logic here
            Console.WriteLine($"Error creating module: {ex.Message}");
        }
    }
}
