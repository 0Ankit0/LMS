@page "/admin/modules/create"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services

@inject ICourseRepository CourseRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Module - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Module</h1>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/modules">
        <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
        Back to Modules
    </MudButton>
</div>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Module Information</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudForm Model="Module" @ref="moduleForm" OnValidSubmit="AddModule">
            <AntiforgeryToken />
            <DataAnnotationsValidator />
            <MudAlert Severity="Severity.Error" Class="my-3" Visible="@(!moduleForm.IsValid)">
                <MudText>Please correct the errors below.</MudText>
            </MudAlert>

            <MudTextField @bind-Value="Module.Title" Label="Title" Variant="Variant.Text" Required="true" RequiredError="Title is required!" />

            <MudTextField @bind-Value="Module.Description" Label="Description" Variant="Variant.Text" Lines="3" Placeholder="Enter module description" />

            <div class="row">
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Module.CourseId" Label="Course" Variant="Variant.Text" Required="true" RequiredError="Course is required!" Placeholder="Select a course...">
                        @foreach (var course in courses)
                        {
                            <MudSelectItem Value="@course.Value">@course.Text</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="Module.OrderIndex" Label="Order Index" Variant="Variant.Text" Placeholder="1" />
                </MudItem>
            </div>

            <MudCheckBox T="bool" @bind-Checked="Module.IsRequired" Label="Is Required" Color="Color.Primary" />

            <div class="d-flex gap-2">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                    Create Module
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/admin/modules">Cancel</MudButton>
            </div>
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    [SupplyParameterFromForm]
    private CreateModuleRequest Module { get; set; } = new();
    private bool isSubmitting = false;
    private MudBlazor.MudForm moduleForm;
    private List<DropdownOption<int>> courses = new();

    protected override async Task OnInitializedAsync()
    {
        courses = await DropdownRepository.GetCoursesAsync();
    }

    private async Task AddModule()
    {
        if (isSubmitting) return;
        isSubmitting = true;
        try
        {
            var result = await CourseRepository.CreateModuleAsync(Module);
            if (result != null)
            {
                ToastService.ShowSuccess("Success", "Module created successfully!");
                NavigationManager.NavigateTo("/admin/modules");
            }
            else
            {
                ToastService.ShowError("Error", "Failed to create module. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error creating module: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}