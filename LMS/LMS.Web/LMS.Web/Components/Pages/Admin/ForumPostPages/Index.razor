@page "/admin/forumposts"


@using LMS.Repositories
@inject IForumRepository ForumRepository

<PageTitle>Forum Posts - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Forum Posts</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/forumposts/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Forum Post
    </Button>
</div>

<DataTableComponent TItem="ForumPostModel" 
                    DataProvider="ForumPostsDataProvider"
                    PageSize="10">
    <Columns>
        <GridColumn TItem="ForumPostModel" HeaderText="Content" PropertyName="Content" />
        <GridColumn TItem="ForumPostModel" HeaderText="Topic" PropertyName="TopicTitle" />
        <GridColumn TItem="ForumPostModel" HeaderText="Author" PropertyName="AuthorName" />
        <GridColumn TItem="ForumPostModel" HeaderText="Parent Post" PropertyName="ParentPostId" />
        <GridColumn TItem="ForumPostModel" HeaderText="Created" PropertyName="CreatedAt" Format="yyyy-MM-dd HH:mm" />
    </Columns>
    <Actions>
        <div class="btn-group" role="group">
            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/forumposts/edit?id={context.Id}")'>
                <Icon Name="IconName.Pencil" /> Edit
            </Button>
            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/forumposts/details?id={context.Id}")'>
                <Icon Name="IconName.Eye" /> Details
            </Button>
            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" Href='@($"/admin/forumposts/delete?id={context.Id}")'>
                <Icon Name="IconName.Trash" /> Delete
            </Button>
        </div>
    </Actions>
</DataTableComponent>

@code {
    private IEnumerable<ForumPostModel> forumPosts = default!;

    private async Task<GridDataProviderResult<ForumPostModel>> ForumPostsDataProvider(GridDataProviderRequest<ForumPostModel> request)
    {
        if (forumPosts is null) // pull forum posts only one time for client-side filtering, sorting, and paging
            forumPosts = await GetForumPosts(); // call a service or an API to pull the forum posts

        return await Task.FromResult(request.ApplyTo(forumPosts));
    }

    private async Task<IEnumerable<ForumPostModel>> GetForumPosts()
    {
        try
        {
            var request = new PaginationRequest
            {
                PageNumber = 1,
                PageSize = 1000 // Get all for client-side pagination
            };

            var paginatedResult = await ForumRepository.GetAllForumPostsPaginatedAsync(request);
            return paginatedResult?.Items ?? GetMockForumPosts();
        }
        catch
        {
            return GetMockForumPosts();
        }
    }

    private IEnumerable<ForumPostModel> GetMockForumPosts()
    {
        return new List<ForumPostModel>
        {
            new ForumPostModel { Id = 1, Content = "This is the first post in the general discussion forum.", TopicTitle = "Welcome to the Forum!", AuthorName = "Admin", CreatedAt = DateTime.Now.AddDays(-10) },
            new ForumPostModel { Id = 2, Content = "I have a question about C# generics.", TopicTitle = "C# Generics", AuthorName = "John Doe", CreatedAt = DateTime.Now.AddDays(-5) },
            new ForumPostModel { Id = 3, Content = "Reply to John Doe: You can use `List<T>` for generic lists.", TopicTitle = "C# Generics", AuthorName = "Jane Smith", ParentPostId = 2, CreatedAt = DateTime.Now.AddDays(-4) }
        };
    }
}

