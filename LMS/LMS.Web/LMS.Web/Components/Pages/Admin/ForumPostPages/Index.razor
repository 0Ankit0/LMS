@page "/admin/forumposts"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())


@using LMS.Repositories
@inject IForumRepository ForumRepository

<PageTitle>Forum Posts - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Forum Posts</h1>
    <a href="/admin/forumposts/create" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i>
        Add New Forum Post
    </a>
</div>

<DataTableComponent TItem="ForumPostModel" DataProvider="ForumPostsDataProvider" PageSize="10">
    <DataTableColumn TItem="ForumPostModel" HeaderText="Content" PropertyName="Content">
        @context.Content
    </DataTableColumn>
    <DataTableColumn TItem="ForumPostModel" HeaderText="Topic" PropertyName="TopicTitle">
        @context.TopicTitle
    </DataTableColumn>
    <DataTableColumn TItem="ForumPostModel" HeaderText="Author" PropertyName="AuthorName">
        @context.AuthorName
    </DataTableColumn>
    <DataTableColumn TItem="ForumPostModel" HeaderText="Parent Post" PropertyName="ParentPostId">
        @context.ParentPostId
    </DataTableColumn>
    <DataTableColumn TItem="ForumPostModel" HeaderText="Created" PropertyName="CreatedAt" Format="yyyy-MM-dd HH:mm">
        @context.CreatedAt.ToString("yyyy-MM-dd HH:mm")
    </DataTableColumn>
    <DataTableColumn TItem="ForumPostModel" HeaderText="Actions" Sortable="false" Filterable="false">
        <div class="btn-group" role="group">
            <a href='@($"/admin/forumposts/edit?id={context.Id}")' class="btn btn-primary btn-sm">
                <i class="bi bi-pencil"></i> Edit
            </a>
            <a href='@($"/admin/forumposts/details?id={context.Id}")' class="btn btn-info btn-sm">
                <i class="bi bi-eye"></i> Details
            </a>
            <a href='@($"/admin/forumposts/delete?id={context.Id}")' class="btn btn-danger btn-sm">
                <i class="bi bi-trash"></i> Delete
            </a>
        </div>
    </DataTableColumn>
</DataTableComponent>

@code {
    private IEnumerable<ForumPostModel> forumPosts = default!;

    private async Task<GridDataProviderResult<ForumPostModel>> ForumPostsDataProvider(GridDataProviderRequest<ForumPostModel> request)
    {
        if (forumPosts is null)
            forumPosts = await GetForumPosts();

        return await Task.FromResult(request.ApplyTo(forumPosts));
    }

    private async Task<IEnumerable<ForumPostModel>> GetForumPosts()
    {
        try
        {
            var request = new PaginationRequest
            {
                PageNumber = 1,
                PageSize = 1000
            };

            var paginatedResult = await ForumRepository.GetAllForumPostsPaginatedAsync(request);
            return paginatedResult?.Items ?? GetMockForumPosts();
        }
        catch
        {
            return GetMockForumPosts();
        }
    }

    private IEnumerable<ForumPostModel> GetMockForumPosts()
    {
        return new List<ForumPostModel>
        {
            new ForumPostModel { Id = 1, Content = "This is the first post in the general discussion forum.", TopicTitle = "Welcome to the Forum!", AuthorName = "Admin", CreatedAt = DateTime.Now.AddDays(-10) },
            new ForumPostModel { Id = 2, Content = "I have a question about C# generics.", TopicTitle = "C# Generics", AuthorName = "John Doe", CreatedAt = DateTime.Now.AddDays(-5) },
            new ForumPostModel { Id = 3, Content = "Reply to John Doe: You can use `List<T>` for generic lists.", TopicTitle = "C# Generics", AuthorName = "Jane Smith", ParentPostId = 2, CreatedAt = DateTime.Now.AddDays(-4) }
        };
    }
}

