@page "/admin/forumposts/create"

@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services

@inject IForumRepository ForumRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject LMS.Web.Services.ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Forum Post - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Forum Post</h1>
    <Button Color="ButtonColor.Secondary" Href="/admin/forumposts">
        <Icon Name="IconName.ArrowLeft" />
        Back to Forum Posts
    </Button>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Forum Post Information</h5>
            </div>
            <div class="card-body">
                <EditForm Model="ForumPost" OnValidSubmit="AddForumPost">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />

                    <div class="mb-3">
                        <label for="content" class="form-label">Content <span class="text-danger">*</span></label>
                        <InputTextArea id="content" @bind-Value="ForumPost.Content" class="form-control" rows="6"
                            aria-required="true" placeholder="Enter post content" />
                        <ValidationMessage For="() => ForumPost.Content" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="topicid" class="form-label">Topic <span class="text-danger">*</span></label>
                        <SearchableSelectComponent TItem="DropdownOption<int>" 
                                                   TValue="int" 
                                                   DataProvider="SearchForumsDataProvider"
                                                   ValueSelector="@(item => item.Value)" 
                                                   DisplaySelector="@(item => item.Text)"
                                                   @bind-SelectedValue="ForumPost.TopicId"
                                                   Placeholder="Select a topic..." 
                                                   EmptyText="No topics found" />
                        <ValidationMessage For="() => ForumPost.TopicId" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="parentpostid" class="form-label">Parent Post ID (Optional)</label>
                        <InputNumber id="parentpostid" @bind-Value="ForumPost.ParentPostId" class="form-control"
                            placeholder="Enter parent post ID for replies" />
                        <ValidationMessage For="() => ForumPost.ParentPostId" class="text-danger" />
                        <div class="form-text">Leave empty for new topics, or enter a post ID to reply to an existing post.</div>
                    </div>

                    <div class="d-flex gap-2">
                        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Loading="@isSubmitting">
                            <Icon Name="IconName.CheckCircle" />
                            Create Forum Post
                        </Button>
                        <Button Color="ButtonColor.Secondary" Href="/admin/forumposts">Cancel</Button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateForumPostRequest ForumPost { get; set; } = new();
    private bool isSubmitting = false;

    private async Task<AutoCompleteDataProviderResult<DropdownOption<int>>> SearchForumsDataProvider(AutoCompleteDataProviderRequest<DropdownOption<int>> request)
    {
        try
        {
            var forums = await DropdownRepository.GetForumsAsync(search: request.Filter.Value, take: 20);
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = forums,
                TotalCount = forums.Count
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading forums: {ex.Message}");
            return new AutoCompleteDataProviderResult<DropdownOption<int>>
            {
                Data = new List<DropdownOption<int>>(),
                TotalCount = 0
            };
        }
    }

    private async Task AddForumPost()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;
        try
        {
            // For admin pages, we'll use a placeholder admin user ID
            // In a real application, you'd get this from the authentication context
            var adminUserId = "admin-user-id"; // This should come from authentication

            var result = await ForumRepository.CreatePostAsync(ForumPost, adminUserId);
            if (result != null)
            {
                ToastService.ShowSuccess("Success", "Forum post created successfully!");
                NavigationManager.NavigateTo("/admin/forumposts");
            }
            else
            {
                ToastService.ShowError("Error", "Failed to create forum post. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error creating forum post: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
