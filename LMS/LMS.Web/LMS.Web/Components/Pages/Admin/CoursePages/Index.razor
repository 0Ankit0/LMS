@page "/admin/courses"  
@using LMS.Repositories   
@inject ICourseRepository CourseRepository  

<PageTitle>Courses - Admin</PageTitle>  

<div class="d-flex justify-content-between align-items-center mb-4">  
    <h1 class="mb-0">Courses</h1>  
    <a href="/admin/courses/create" class="btn btn-primary">  
        <i class="bi bi-plus-circle me-2"></i>Add New Course  
    </a>  
</div>  

<div class="card">  
    <div class="card-body">  
        @if (paginatedResult != null)  
        {  
            <PaginationComponent TItem="CourseModel" CurrentPage="@currentPage" PageSize="@pageSize"  
                TotalCount="@paginatedResult.TotalCount" TotalPages="@paginatedResult.TotalPages"  
                OnPageChanged="OnPageChanged" OnPageSizeChanged="OnPageSizeChanged" />  

            @if (paginatedResult.Items.Any())  
            {  
                <QuickGrid Class="table table-striped table-hover" Items="paginatedResult.Items.AsQueryable()">  
                    <PropertyColumn Property="course => course.Title" Title="Title" />  
                    <PropertyColumn Property="course => course.Description" Title="Description" />  
                    <PropertyColumn Property="course => course.Level" Title="Level" />  
                    <PropertyColumn Property="course => course.Status" Title="Status" />  
                    <PropertyColumn Property="course => course.MaxEnrollments" Title="Max Enrollments" />  
                    <PropertyColumn Property="course => course.StartDate" Title="Start Date" Format="yyyy-MM-dd" />  
                    <PropertyColumn Property="course => course.EndDate" Title="End Date" Format="yyyy-MM-dd" />  
                    <PropertyColumn Property="course => course.InstructorName" Title="Instructor" />  

                    <TemplateColumn Title="Actions" Context="course">  
                        <div class="btn-group" role="group">  
                            <a href="@($"/admin/courses/edit?id={course.Id}")" class="btn btn-sm btn-outline-primary">  
                                <i class="bi bi-pencil"></i> Edit  
                            </a>  
                            <a href="@($"/admin/courses/details?id={course.Id}")" class="btn btn-sm btn-outline-info">  
                                <i class="bi bi-eye"></i> Details  
                            </a>  
                            <a href="@($"/admin/courses/delete?id={course.Id}")" class="btn btn-sm btn-outline-danger">  
                                <i class="bi bi-trash"></i> Delete  
                            </a>  
                        </div>  
                    </TemplateColumn>  
                </QuickGrid>  
            }  
            else  
            {  
                <div class="text-center py-4">  
                    <p class="text-muted">No courses found.</p>  
                </div>  
            }  
        }  
        else  
        {  
            <div class="text-center">  
                <div class="spinner-border" role="status">  
                    <span class="visually-hidden">Loading...</span>  
                </div>  
            </div>  
        }  
    </div>  
</div>  

@code {  
    private PaginatedResult<CourseModel>? paginatedResult;  
    private int currentPage = 1;  
    private int pageSize = 10;  
    private bool isLoading = false;  

    protected override async Task OnInitializedAsync()  
    {  
        await LoadDataAsync();  
    }  

    private async Task LoadDataAsync()  
    {  
        isLoading = true;  
        try  
        {  
            var request = new PaginationRequest  
            {  
                PageNumber = currentPage,  
                PageSize = pageSize  
            };  

            paginatedResult = await CourseRepository.GetCoursesPaginatedAsync(request);  
        }  
        finally  
        {  
            isLoading = false;  
        }  
    }  

    private async Task OnPageChanged(int page)  
    {  
        if (page != currentPage && !isLoading)  
        {  
            currentPage = page;  
            await LoadDataAsync();  
        }  
    }  

    private async Task OnPageSizeChanged(int newPageSize)  
    {  
        if (newPageSize != pageSize && !isLoading)  
        {  
            pageSize = newPageSize;  
            currentPage = 1; // Reset to first page when changing page size  
            await LoadDataAsync();  
        }  
    }  
}
