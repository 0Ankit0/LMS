@page "/admin/courses"
@rendermode @(new InteractiveServerRenderMode())
@using LMS.Repositories
@using LMS.Web.Components.Shared
@using LMS.Web.Services
@inject ICourseRepository CourseRepository
@inject LMS.Web.Services.ToastService ToastService

<PageTitle>Courses - Admin</PageTitle>

<Card>
    <CardHeader>
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Courses</h5>
            <Button Color="ButtonColor.Primary" Href="/admin/courses/create">
                <Icon Name="IconName.PlusCircle" />
                Add New Course
            </Button>
        </div>
    </CardHeader>
    <CardBody>
        <DataTableComponent TItem="CourseModel"
                            DataProvider="CoursesDataProvider"
                            PageSize="10"
                            AllowFiltering="true"
                            AllowPaging="true"
                            AllowSorting="true">
            <GridColumn TItem="CourseModel" HeaderText="Title" PropertyName="Title" SortKeySelector="item => item.Title" Filterable="true">
                @context.Title
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="Description" PropertyName="Description" Filterable="true">
                @context.Description
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="Level" PropertyName="Level" SortKeySelector="item => item.Level">
                @context.Level
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="Status" PropertyName="Status" SortKeySelector="item => item.Status">
                @context.Status
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="Max Enrollments" PropertyName="MaxEnrollments" SortKeySelector="item => item.MaxEnrollments" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">
                @context.MaxEnrollments
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="Start Date" PropertyName="StartDate" SortKeySelector="item => item.StartDate">
                @context.StartDate.ToString("yyyy-MM-dd")
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="End Date" PropertyName="EndDate" SortKeySelector="item => item.EndDate">
                @(context.EndDate?.ToString("yyyy-MM-dd") ?? "N/A")
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="Instructor" PropertyName="InstructorName" Filterable="true">
                @context.InstructorName
            </GridColumn>
            <GridColumn TItem="CourseModel" HeaderText="Actions" Sortable="false" Filterable="false">
                <div class="btn-group" role="group">
                    <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/courses/edit?id={context.Id}")'>
                        <Icon Name="IconName.Pencil" /> Edit
                    </Button>
                    <Button Color="ButtonColor.Success" Size="ButtonSize.Small" Href='@($"/admin/courses/manage?id={context.Id}")'>
                        <Icon Name="IconName.Wrench" /> Manage
                    </Button>
                    <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/courses/details?id={context.Id}")'>
                        <Icon Name="IconName.Eye" /> Details
                    </Button>
                    <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => ConfirmDelete(context)">
                        <Icon Name="IconName.Trash" /> Delete
                    </Button>
                </div>
            </GridColumn>
        </DataTableComponent>
    </CardBody>
</Card>

<!-- Delete Confirmation Modal -->
<ModalComponent @ref="deleteModal"
                Title="Confirm Delete"
                Message="@($"Are you sure you want to delete the course '{courseToDelete?.Title}'? This action cannot be undone.")"
                ConfirmButtonText="Delete"
                ConfirmButtonColor="ButtonColor.Danger"
                OnConfirm="DeleteCourse" />

@code {
    private ModalComponent deleteModal = default!;
    private CourseModel? courseToDelete;

    private async Task<GridDataProviderResult<CourseModel>> CoursesDataProvider(GridDataProviderRequest<CourseModel> request)
    {
        try
        {
            var result = await CourseRepository.GetCoursesPaginatedAsync(new PaginationRequest
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize
            });

            var data = (result == null || result.Items == null || !result.Items.Any()) ? AddDummyCourses() : result.Items;
            var totalCount = (result == null || result.Items == null || !result.Items.Any()) ? data.Count : result.TotalCount;

            return new GridDataProviderResult<CourseModel>
            {
                Data = data,
                TotalCount = totalCount
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error", $"Error loading courses: {ex.Message}");
            return new GridDataProviderResult<CourseModel>
            {
                Data = Enumerable.Empty<CourseModel>(),
                TotalCount = 0
            };
        }
    }

    private List<CourseModel> AddDummyCourses()
    {
        return new List<CourseModel>
        {
            new CourseModel { Id = 1, Title = "Sample Course 1", Description = "Dummy course 1", Level = "Beginner", Status = "Active", MaxEnrollments = 100, StartDate = DateTime.Today, EndDate = DateTime.Today.AddMonths(1), InstructorName = "John Doe" },
            new CourseModel { Id = 2, Title = "Sample Course 2", Description = "Dummy course 2", Level = "Intermediate", Status = "Inactive", MaxEnrollments = 50, StartDate = DateTime.Today.AddDays(-10), EndDate = DateTime.Today.AddMonths(2), InstructorName = "Jane Smith" }
        };
    }

    private async Task ConfirmDelete(CourseModel course)
    {
        courseToDelete = course;
        await deleteModal.ShowAsync();
    }

    private async Task DeleteCourse()
    {
        if (courseToDelete != null)
        {
            try
            {
                await CourseRepository.DeleteCourseAsync(courseToDelete.Id);
                ToastService.ShowSuccess("Success", $"Course '{courseToDelete.Title}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Error", $"Error deleting course: {ex.Message}");
            }
            finally
            {
                courseToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}