@using LMS.Repositories
@using LMS.Web.Services
@inject ICourseRepository CourseRepository
@inject IModuleRepository ModuleRepository
@inject ILessonRepository LessonRepository
@inject NavigationManager NavigationManager

@inject ToastService ToastService
@if (isLoading)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <MudSkeleton SkeletonType="SkeletonType.Text" Width="300px" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="180px" Height="40px" />
    </div>

    <div class="row">
        <div class="col-md-4">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        </div>
        <div class="col-md-8">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        </div>
    </div>
}
else if (course != null)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0">Manage Course: @course.Title</h1>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/courses">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
            Back to Courses
        </MudButton>
    </div>

    <div class="row">
        <div class="col-md-4">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Add New Module</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudForm Model="newModule" OnValidSubmit="AddModule" @ref="moduleForm">
                        <MudAlert Severity="Severity.Error" Class="mb-3" Visible="@(!moduleForm.IsValid)">
                            <MudText>Please correct the errors below.</MudText>
                        </MudAlert>
                        <MudTextField @bind-Value="newModule.Title" Label="Title" Variant="Variant.Text" />
                        <MudTextField @bind-Value="newModule.Description" Label="Description" Variant="Variant.Text" Lines="3" />
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add Module</MudButton>
                    </MudForm>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-md-8">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Modules</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (course.Modules.Any())
                    {
                        <MudExpansionPanels>
                            @foreach (var module in course.Modules)
                            {
                                <MudExpansionPanel Text="@module.Title">
                                    <MudText Typo="Typo.subtitle1" Class="mb-2">Lessons</MudText>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="() => ShowAddLessonModal(module.Id)">
                                        <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-1" /> Add Lesson
                                    </MudButton>
                                    <MudList T="LessonModel">
                                        @foreach (var lesson in module.Lessons)
                                        {
                                            <MudListItem T="LessonModel" Value="@lesson">@lesson.Title</MudListItem>
                                        }
                                    </MudList>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>
                    }
                    else
                    {
                        <MudText>No modules have been added to this course yet.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </div>
    </div>
}
else
{
    <p>Course not found.</p>
}

<MudDialog @bind-IsVisible="@showAddLessonModal" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Add New Lesson</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="newLesson" OnValidSubmit="AddLesson" @ref="lessonForm">
            <MudAlert Severity="Severity.Error" Class="mb-3" Visible="@(!lessonForm.IsValid)">
                <MudText>Please correct the errors below.</MudText>
            </MudAlert>
            <MudTextField @bind-Value="newLesson.Title" Label="Title" Variant="Variant.Text" />
            <MudTextField @bind-Value="newLesson.Description" Label="Description" Variant="Variant.Text" Lines="3" />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add Lesson</MudButton>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private CourseModel course;
    private CreateModuleRequest newModule = new();
    private CreateLessonRequest newLesson = new();
    private bool showAddLessonModal;
    private DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private int selectedModuleId;
    private bool isLoading = true;
    private MudForm moduleForm;
    private MudForm lessonForm;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Try to get course from server
            course = await CourseRepository.GetCourseByIdAsync(Id);

            if (course == null)
            {
                course = AddDummyCourses().FirstOrDefault(c => c.Id == Id) ?? AddDummyCourses().First();
            }
            else if (course.Modules == null || !course.Modules.Any())
            {
                course.Modules = AddDummyModules(course.Id);
            }
            else
            {
                foreach (var module in course.Modules)
                {
                    if (module.Lessons == null || !module.Lessons.Any())
                    {
                        module.Lessons = AddDummyLessons(module.Id);
                    }
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddModule()
    {
        newModule.CourseId = Id;
        var result = await ModuleRepository.CreateModuleAsync(newModule);
        if (result != null)
        {
            course = await CourseRepository.GetCourseByIdAsync(Id)
                     ?? AddDummyCourses().FirstOrDefault(c => c.Id == Id) ?? AddDummyCourses().First();
            newModule = new();
            ToastService.ShowSuccess("Success", "Module created successfully!");
        }
        else
        {
            ToastService.ShowError("Error", "Failed to create module. Please try again.");
        }
    }

    private void ShowAddLessonModal(int moduleId)
    {
        selectedModuleId = moduleId;
        showAddLessonModal = true;
    }

    private async Task AddLesson()
    {
        newLesson.ModuleId = selectedModuleId;
        var result = await LessonRepository.CreateLessonAsync(newLesson);
        if (result != null)
        {
            course = await CourseRepository.GetCourseByIdAsync(Id)
                     ?? AddDummyCourses().FirstOrDefault(c => c.Id == Id) ?? AddDummyCourses().First();
            newLesson = new();
            showAddLessonModal = false;
            ToastService.ShowSuccess("Success", "Lesson created successfully!");
        }
        else
        {
            ToastService.ShowError("Error", "Failed to create lesson. Please try again.");
        }
    }

    // Dummy data helpers
    private List<CourseModel> AddDummyCourses()
    {
        return new List<CourseModel>
        {
            new CourseModel
            {
                Id = 1,
                Title = "Introduction to Programming",
                Description = "Learn the basics of programming",
                Level = "Beginner",
                Status = "Published",
                MaxEnrollments = 100,
                StartDate = DateTime.Now.AddDays(7),
                EndDate = DateTime.Now.AddDays(67),
                InstructorId = "instructor-1",
                InstructorName = "John Doe",
                EstimatedDuration = TimeSpan.FromHours(40),
                Modules = AddDummyModules(1)
            },
            new CourseModel
            {
                Id = 2,
                Title = "Modern Web Development",
                Description = "Master modern web development techniques",
                Level = "Advanced",
                Status = "Published",
                MaxEnrollments = 50,
                StartDate = DateTime.Now.AddDays(14),
                EndDate = DateTime.Now.AddDays(104),
                InstructorId = "instructor-2",
                InstructorName = "Jane Smith",
                EstimatedDuration = TimeSpan.FromHours(60),
                Modules = AddDummyModules(2)
            },
            new CourseModel
            {
                Id = 3,
                Title = "Data Science Essentials",
                Description = "An introduction to data science and analytics",
                Level = "Intermediate",
                Status = "Draft",
                MaxEnrollments = 75,
                StartDate = DateTime.Now.AddDays(21),
                EndDate = DateTime.Now.AddDays(81),
                InstructorId = "instructor-3",
                InstructorName = "Dr. Robert Johnson",
                EstimatedDuration = TimeSpan.FromHours(50),
                Modules = AddDummyModules(3)
            }
        };
    }

    private List<ModuleModel> AddDummyModules(int courseId)
    {
        // Using helper to create modules ensures Title and Description are set
        var modules = new List<ModuleModel>
        {
            CreateModule(courseId * 10 + 1, $"Module 1 - Course {courseId}", $"This is the first module for course {courseId}", courseId),
            CreateModule(courseId * 10 + 2, $"Module 2 - Course {courseId}", $"This is the second module for course {courseId}", courseId)
        };
        return modules;
    }

    private ModuleModel CreateModule(int id, string title, string description, int courseId)
    {
        return new ModuleModel
        {
            Id = id,
            Title = title,
            Description = description,
            CourseId = courseId,
            Lessons = AddDummyLessons(id)
        };
    }

    private List<LessonModel> AddDummyLessons(int moduleId)
    {
        // Using helper for lessons as well
        var lessons = new List<LessonModel>
        {
            CreateLesson(moduleId * 100 + 1, $"Lesson 1 - Module {moduleId}", $"This is the first lesson for module {moduleId}", moduleId, "Video"),
            CreateLesson(moduleId * 100 + 2, $"Lesson 2 - Module {moduleId}", $"This is the second lesson for module {moduleId}", moduleId, "Reading")
        };
        return lessons;
    }

    private LessonModel CreateLesson(int id, string title, string description, int moduleId, string type)
    {
        return new LessonModel
        {
            Id = id,
            Title = title,
            Description = description,
            ModuleId = moduleId,
            Type = type
        };
    }
}