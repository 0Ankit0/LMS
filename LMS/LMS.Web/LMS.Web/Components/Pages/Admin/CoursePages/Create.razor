@page "/admin/courses/create"

@using LMS.Repositories
@inject ICourseRepository CourseRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Create Course - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create New Course</h1>
    <a href="/admin/courses" class="btn btn-outline-secondary">
        <i class="bi bi-arrow-left me-2"></i>Back to Courses
    </a>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Course Information</h5>
            </div>
            <div class="card-body">
                <EditForm Model="Course" OnValidSubmit="AddCourse">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />

                    <div class="row">
                        <div class="col-md-8 mb-3">
                            <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                            <InputText id="title" @bind-Value="Course.Title" class="form-control" aria-required="true"
                                placeholder="Enter course title" />
                            <ValidationMessage For="() => Course.Title" class="text-danger" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="level" class="form-label">Level</label>
                            <InputSelect id="level" @bind-Value="Course.Level" class="form-select">
                               @foreach (int level in Enum.GetValues(typeof(CourseLevel)))
                                {
                                    <option value="@level">@Enum.GetName(typeof(CourseLevel),@level)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Course.Level" class="text-danger" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description <span
                                class="text-danger">*</span></label>
                        <InputTextArea id="description" @bind-Value="Course.Description" class="form-control" rows="4"
                            aria-required="true" placeholder="Enter course description" />
                        <ValidationMessage For="() => Course.Description" class="text-danger" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="thumbnailurl" class="form-label">Thumbnail URL</label>
                            <InputText id="thumbnailurl" @bind-Value="Course.ThumbnailUrl" class="form-control"
                                placeholder="https://example.com/image.jpg" />
                            <ValidationMessage For="() => Course.ThumbnailUrl" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="instructorid" class="form-label">Instructor <span
                                    class="text-danger">*</span></label>
                            <SearchableSelectComponent TItem="DropdownOption<string>" TValue="string" Items="instructorOptions"
                                ValueSelector="option => option.Value" DisplaySelector="option => option.Text"
                                @bind-SelectedValue="SelectedInstructorId" Placeholder="Search and select instructor..."
                                SearchFunction="SearchInstructors"
                                IsInvalid="@(!string.IsNullOrEmpty(Course.InstructorId) && !IsValidInstructor())" />
                            <ValidationMessage For="() => Course.InstructorId" class="text-danger" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="status" class="form-label">Status</label>
                            <InputSelect id="status" @bind-Value="Course.Status" class="form-select">
                                @foreach (int status in Enum.GetValues(typeof(CourseStatus)))
                                {
                                    <option value="@status">@Enum.GetName(typeof(CourseStatus),@status)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Course.Status" class="text-danger" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="maxenrollments" class="form-label">Max Enrollments</label>
                            <InputNumber id="maxenrollments" @bind-Value="Course.MaxEnrollments" class="form-control"
                                placeholder="100" />
                            <ValidationMessage For="() => Course.MaxEnrollments" class="text-danger" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="estimatedduration" class="form-label">Duration (hours)</label>
                            <InputNumber id="estimatedduration" @bind-Value="EstimatedDurationHours"
                                class="form-control" placeholder="40" />
                            <ValidationMessage For="() => EstimatedDurationHours" class="text-danger" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="startdate" class="form-label">Start Date</label>
                            <InputDate id="startdate" @bind-Value="Course.StartDate" class="form-control" />
                            <ValidationMessage For="() => Course.StartDate" class="text-danger" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="enddate" class="form-label">End Date</label>
                            <InputDate id="enddate" @bind-Value="Course.EndDate" class="form-control" />
                            <ValidationMessage For="() => Course.EndDate" class="text-danger" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="prerequisites" class="form-label">Prerequisites</label>
                        <InputTextArea id="prerequisites" @bind-Value="Course.Prerequisites" class="form-control"
                            rows="3" placeholder="List any prerequisites..." />
                        <ValidationMessage For="() => Course.Prerequisites" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="learningobjectives" class="form-label">Learning Objectives</label>
                        <InputTextArea id="learningobjectives" @bind-Value="Course.LearningObjectives"
                            class="form-control" rows="3" placeholder="What will students learn..." />
                        <ValidationMessage For="() => Course.LearningObjectives" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <InputCheckbox id="isactive" @bind-Value="Course.IsActive" class="form-check-input" />
                            <label for="isactive" class="form-check-label">Is Active</label>
                            <ValidationMessage For="() => Course.IsActive" class="text-danger" />
                        </div>
                    </div>

                    <div class="d-flex gap-2">
                        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">
                            <Icon Name="IconName.CheckCircle" />
                            Create Course
                        </Button>
                        <Button Color="ButtonColor.Secondary" Href="/admin/courses">Cancel</Button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateCourseRequest Course { get; set; } = new();

    private List<DropdownOption<string>> instructorOptions = new();
    private string selectedInstructorId = string.Empty;

    private string SelectedInstructorId
    {
        get => Course.InstructorId;
        set
        {
            selectedInstructorId = value;
            Course.InstructorId = value ?? "";
        }
    }

    // Helper property for binding EstimatedDuration as hours
    private int EstimatedDurationHours
    {
        get => (int)Course.EstimatedDuration.TotalHours;
        set => Course.EstimatedDuration = TimeSpan.FromHours(value);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            instructorOptions = await DropdownRepository.GetInstructorsAsync(take: 50);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initial data: {ex.Message}");
        }
    }

    private async Task<IEnumerable<DropdownOption<string>>> SearchInstructors(string searchTerm)
    {
        try
        {
            return await DropdownRepository.GetInstructorsAsync(searchTerm, take: 20);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching instructors: {ex.Message}");
            return Enumerable.Empty<DropdownOption<string>>();
        }
    }

   private bool IsValidInstructor()
{
    return !string.IsNullOrEmpty(selectedInstructorId) && instructorOptions.Any(i => i.Value == selectedInstructorId);
}

    private async Task AddCourse()
    {
        try
        {
            var result = await CourseRepository.CreateCourseAsync(Course);
            if (result != null)
            {
                NavigationManager.NavigateTo("/admin/courses");
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add error display logic here
            Console.WriteLine($"Error creating course: {ex.Message}");
        }
    }
}