@page "/admin/tags"
@rendermode @(new InteractiveServerRenderMode())
@using LMS.Repositories

@inject ITagRepository TagRepository

<PageTitle>Tags - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Tags</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/tags/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Tag
    </Button>
</div>

<DataTableComponent TItem="TagModel"
                    DataProvider="TagsDataProvider"
                    PageSize="10">
    <GridColumn TItem="TagModel" HeaderText="Name" PropertyName="Name">
        @context.Name
    </GridColumn>
    <GridColumn TItem="TagModel" HeaderText="Color" PropertyName="Color">
        @context.Color
    </GridColumn>
    <GridColumn TItem="TagModel" HeaderText="Actions" Sortable="false" Filterable="false">
        <div class="btn-group" role="group">
            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/tags/edit?id={context.Id}")'>
                <Icon Name="IconName.Pencil" /> Edit
            </Button>
            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/tags/details?id={context.Id}")'>
                <Icon Name="IconName.Eye" /> Details
            </Button>
            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" Href='@($"/admin/tags/delete?id={context.Id}")'>
                <Icon Name="IconName.Trash" /> Delete
            </Button>
        </div>
    </GridColumn>
</DataTableComponent>

@code {
    private IEnumerable<TagModel> tags = default!;

    private async Task<GridDataProviderResult<TagModel>> TagsDataProvider(GridDataProviderRequest<TagModel> request)
    {
        if (tags is null)
            tags = await GetTags();

        return await Task.FromResult(request.ApplyTo(tags));
    }

    private async Task<IEnumerable<TagModel>> GetTags()
    {
        try
        {
            var request = new PaginationRequest
            {
                PageNumber = 1,
                PageSize = 1000
            };

            var paginatedResult = await TagRepository.GetTagsPaginatedAsync(request);
            return paginatedResult?.Items ?? GetMockTags();
        }
        catch
        {
            return GetMockTags();
        }
    }

    private IEnumerable<TagModel> GetMockTags()
    {
        return new List<TagModel>
        {
            new TagModel { Id = 1, Name = "Programming", Color = "#007bff", IsActive = true, CourseCount = 10 },
            new TagModel { Id = 2, Name = "Web Development", Color = "#28a745", IsActive = true, CourseCount = 15 },
            new TagModel { Id = 3, Name = "Data Science", Color = "#ffc107", IsActive = true, CourseCount = 8 }
        };
    }
}
