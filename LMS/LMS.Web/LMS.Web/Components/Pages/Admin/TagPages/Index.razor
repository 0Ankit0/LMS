@page "/admin/tags"
@using LMS.Repositories

@inject ITagRepository TagRepository

<PageTitle>Tags - Admin</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Tags</h1>
    <Button Color="ButtonColor.Primary" Href="/admin/tags/create">
        <Icon Name="IconName.PlusCircle" />
        Add New Tag
    </Button>
</div>

<div class="card">
    <div class="card-body">
        @if (paginatedTags != null)
        {
            if (paginatedTags.Items.Any())
            {
                <Grid TItem="TagModel" Class="table table-striped table-hover" Data="paginatedTags.Items">
                    <GridColumn TItem="TagModel" HeaderText="Name" PropertyName="Name" />
                    <GridColumn TItem="TagModel" HeaderText="Color" PropertyName="Color" />

                    <GridColumn TItem="TagModel" HeaderText="Actions">
                        <div class="btn-group" role="group">
                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" Href='@($"/admin/tags/edit?id={context.Id}")'>
                                <Icon Name="IconName.Pencil" /> Edit
                            </Button>
                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" Href='@($"/admin/tags/details?id={context.Id}")'>
                                <Icon Name="IconName.Eye" /> Details
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" Href='@($"/admin/tags/delete?id={context.Id}")'>
                                <Icon Name="IconName.Trash" /> Delete
                            </Button>
                        </div>
                    </GridColumn>
                </Grid>

                <PaginationComponent TItem="TagModel" PaginatedResult="paginatedTags" OnPageChanged="OnPageChanged"
                    OnPageSizeChanged="OnPageSizeChanged" />
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">No tags found.</p>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private PaginatedResult<TagModel>? paginatedTags;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadTagsAsync();
    }

    private async Task LoadTagsAsync()
    {
        var request = new PaginationRequest
        {
            PageNumber = currentPage,
            PageSize = pageSize
        };
        paginatedTags = await TagRepository.GetTagsPaginatedAsync(request);

        if (paginatedTags == null || !paginatedTags.Items.Any())
        {
            paginatedTags = new PaginatedResult<TagModel>
            {
                Items = new List<TagModel>
                {
                    new TagModel { Id = 1, Name = "Programming", Color = "#007bff", IsActive = true, CourseCount = 10 },
                    new TagModel { Id = 2, Name = "Web Development", Color = "#28a745", IsActive = true, CourseCount = 15 },
                    new TagModel { Id = 3, Name = "Data Science", Color = "#ffc107", IsActive = true, CourseCount = 8 }
                },
                TotalCount = 3,
                PageNumber = currentPage,
                PageSize = pageSize
            };
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadTagsAsync();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1;
        await LoadTagsAsync();
    }
}
