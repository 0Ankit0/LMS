@using LMS.Web.Repositories.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject IReportRepository ReportRepository
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@attribute [Authorize]
@page "/reports/enrollment-trends"

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">ðŸ“Š Enrollment Trends Report</h2>
        <p class="text-muted mb-0">Analyze enrollment patterns and trends over time</p>
    </div>
    <div class="export-buttons">
        <button class="btn btn-outline-report" @onclick="ExportToPdf">
            <i class="fas fa-file-pdf"></i> Export PDF
        </button>
        <button class="btn btn-outline-report" @onclick="ExportToExcel">
            <i class="fas fa-file-excel"></i> Export Excel
        </button>
    </div>
</div>

<!-- Filters -->
<div class="report-filters">
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Months to Analyze</label>
                <select class="form-select" @bind="months" @bind:after="LoadData">
                    <option value="6">Last 6 Months</option>
                    <option value="12" selected>Last 12 Months</option>
                    <option value="24">Last 24 Months</option>
                </select>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Course</label>
                <select class="form-select" @bind="selectedCourseId" @bind:after="LoadData">
                    <option value="">All Courses</option>
                    @if (courses?.Any() == true)
                    {
                        @foreach (var course in courses)
                        {
                            <option value="@course.Id">@course.Title</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Instructor</label>
                <select class="form-select" @bind="selectedInstructorId" @bind:after="LoadData">
                    <option value="">All Instructors</option>
                    @if (instructors?.Any() == true)
                    {
                        @foreach (var instructor in instructors)
                        {
                            <option value="@instructor.Id">@instructor.FullName</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Chart Type</label>
                <select class="form-select" @bind="chartType" @bind:after="UpdateChart">
                    <option value="line">Line Chart</option>
                    <option value="bar">Bar Chart</option>
                    <option value="area">Area Chart</option>
                </select>
            </div>
        </div>
    </div>
</div>

@if (loading)
{
    <div class="report-loading">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading enrollment trends data...</p>
    </div>
}
else if (reports?.Any() == true)
{
    <!-- Summary Statistics -->
    <div class="stats-grid mb-4">
        <div class="stat-card">
            <div class="stat-value">@reports.Sum(r => r.TotalEnrollments)</div>
            <div class="stat-label">Total Enrollments</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@reports.Sum(r => r.NewEnrollments)</div>
            <div class="stat-label">New Enrollments</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@($"{reports.Average(r => r.AverageProgressPercentage):F1}%")</div>
            <div class="stat-label">Avg Completion Rate</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@($"{CalculateGrowthRate():F1}%")</div>
            <div class="stat-label">Growth Rate</div>
        </div>
    </div>

    <!-- Trends Chart -->
    <div class="report-chart mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Enrollment Trends Over Time</h5>
            </div>
            <div class="card-body">
                <canvas id="trendsChart" width="800" height="400"></canvas>
            </div>
        </div>
    </div>

    <!-- Month-over-Month Analysis -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Month-over-Month Growth</h5>
                </div>
                <div class="card-body">
                    <canvas id="growthChart" width="400" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Completion Trends</h5>
                </div>
                <div class="card-body">
                    <canvas id="completionChart" width="400" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Table -->
    <div class="report-table">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Period</th>
                    <th>Date</th>
                    <th>New Enrollments</th>
                    <th>Total Enrollments</th>
                    <th>Completed</th>
                    <th>Completion Rate</th>
                    <th>Month Growth</th>
                    <th>Trend</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in reports.OrderByDescending(r => r.ReportDate))
                {
                    <tr>
                        <td>@report.Period</td>
                        <td>@report.ReportDate.ToString("MMM yyyy")</td>
                        <td>
                            <span class="badge bg-primary">@report.NewEnrollments</span>
                        </td>
                        <td>@report.TotalEnrollments</td>
                        <td>
                            <span class="badge bg-success">@report.CompletedEnrollments</span>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="progress me-2" style="width: 60px; height: 20px;">
                                    <div class="progress-bar bg-info"
                                         style="width: @(report.AverageProgressPercentage)%"></div>
                                </div>
                                <span>@($"{report.AverageProgressPercentage:F1}%")</span>
                            </div>
                        </td>
                        <td>
                            <span class="text-muted">N/A</span>
                        </td>
                        <td>
                            <i class="fas fa-minus text-muted" title="Stable"></i>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="report-no-data">
        <div class="text-center">
            <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
            <h5>No Data Available</h5>
            <p class="text-muted">No enrollment trends data found for the selected criteria.</p>
        </div>
    </div>
}

@code {
    private int months = 12;
    private int? selectedCourseId;
    private string selectedInstructorId = "";
    private string chartType = "line";
    private bool loading = true;

    private IEnumerable<EnrollmentSummaryReportDto>? reports;
    private IEnumerable<Course>? courses = Enumerable.Empty<Course>();
    private IEnumerable<User>? instructors = Enumerable.Empty<User>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && reports?.Any() == true)
        {
            await DrawCharts();
        }
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;

            // Get the current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                // Load enrollment trends report
                reports = await ReportRepository.GetEnrollmentTrendsReportAsync(
                    user, months, selectedCourseId, selectedInstructorId);

                if (reports == null || !reports.Any())
                {
                    reports = GenerateDummyData();
                }

                // Optionally load courses and instructors here if needed
                // courses = await ...;
                // instructors = await ...;

                await DrawCharts();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading enrollment trends data: {ex.Message}");
            reports = GenerateDummyData(); // Use dummy data on error
            await DrawCharts();
        }
        finally
        {
            loading = false;
        }
    }

    private IEnumerable<EnrollmentSummaryReportDto> GenerateDummyData()
    {
        var random = new Random();
        var dummyData = new List<EnrollmentSummaryReportDto>();

        var courseNames = new[] { "Mathematics 101", "Physics Fundamentals", "Chemistry Basics", "Computer Science" };

        for (int i = 0; i < months; i++)
        {
            var reportDate = DateTime.Today.AddMonths(-i);
            var newEnrollments = random.Next(10, 100);
            var totalEnrollments = random.Next(100, 1000);
            var completedEnrollments = random.Next(5, 50);
            var averageProgressPercentage = random.NextDouble() * 100;

            dummyData.Add(new EnrollmentSummaryReportDto
            {
                ReportDate = reportDate,
                NewEnrollments = newEnrollments,
                TotalEnrollments = totalEnrollments,
                CompletedEnrollments = completedEnrollments,
                AverageProgressPercentage = averageProgressPercentage,
                Period = reportDate.ToString("MMM yyyy"),
                CourseName = courseNames[random.Next(courseNames.Length)],
                CourseId = random.Next(1, 10)
            });
        }
        return dummyData.OrderBy(d => d.ReportDate);
    }

    private async Task UpdateChart()
    {
        if (reports?.Any() == true)
        {
            await DrawCharts();
        }
    }

    private async Task DrawCharts()
    {
        if (reports?.Any() == true)
        {
            var chartData = reports.OrderBy(r => r.ReportDate).Select(r => new
            {
                label = r.ReportDate.ToString("MMM yyyy"),
                newEnrollments = r.NewEnrollments,
                totalEnrollments = r.TotalEnrollments,
                completedEnrollments = r.CompletedEnrollments,
                completionRate = r.AverageProgressPercentage
            }).ToArray();

            await JSRuntime.InvokeVoidAsync("drawTrendsChart", "trendsChart", chartData, chartType);
            await JSRuntime.InvokeVoidAsync("drawGrowthChart", "growthChart", chartData);
            await JSRuntime.InvokeVoidAsync("drawCompletionChart", "completionChart", chartData);
        }
    }

    private double CalculateGrowthRate()
    {
        if (reports?.Count() < 2) return 0;

        var orderedReports = reports.OrderBy(r => r.ReportDate).ToList();
        var firstMonth = orderedReports.First().NewEnrollments;
        var lastMonth = orderedReports.Last().NewEnrollments;

        if (firstMonth == 0) return 0;

        return ((double)(lastMonth - firstMonth) / firstMonth) * 100;
    }

    private async Task ExportToPdf()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var pdfBytes = await ReportRepository.ExportReportToPdfAsync(user, "enrollmenttrends", new { months, selectedCourseId, selectedInstructorId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "EnrollmentTrends.pdf", Convert.ToBase64String(pdfBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to PDF: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var excelBytes = await ReportRepository.ExportReportToExcelAsync(user, "enrollmenttrends", new { months, selectedCourseId, selectedInstructorId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "EnrollmentTrends.xlsx", Convert.ToBase64String(excelBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
        }
    }
}