@using LMS.Web.Repositories.DTOs
@using MudBlazor
@using LMS.Web.Components.Account.Shared
@page "/reports/grade-distribution"

@inject IReportRepository ReportRepository
@inject IJSRuntime JSRuntime
@inject IdentityUserAccessor UserAccessor


<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">ðŸ“Š Grade Distribution Report</h2>
        <p class="text-muted mb-0">Analyze grade distributions and class performance metrics</p>
    </div>
    <div class="export-buttons">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToPdf">
            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Class="me-2" /> Export PDF
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToExcel">
            <MudIcon Icon="@Icons.Material.Filled.Description" Class="me-2" /> Export Excel
        </MudButton>
    </div>
</div>

<!-- Filters -->
<MudGrid Class="report-filters">
    <MudItem xs="12" md="3">
        <MudSelect T="string" Label="Report Type" @bind-Value="reportType" OnChange="OnReportTypeChanged">
            <MudSelectItem Value="@("single")">Single Class</MudSelectItem>
            <MudSelectItem Value="@("all")">All Classes</MudSelectItem>
        </MudSelect>
    </MudItem>
    @if (reportType == "single")
    {
        <MudItem xs="12" md="3">
            <MudNumericField Label="Class ID" @bind-Value="classId" Variant="Variant.Text" Placeholder="Enter Class ID" />
        </MudItem>
    }
    <MudItem xs="12" md="2">
        <MudDatePicker Label="Start Date" @bind-Date="startDate" DateFormat="yyyy-MM-dd" />
    </MudItem>
    <MudItem xs="12" md="2">
        <MudDatePicker Label="End Date" @bind-Date="endDate" DateFormat="yyyy-MM-dd" />
    </MudItem>
    @if (reportType == "all")
    {
        <MudItem xs="12" md="2">
            <MudTextField Label="Instructor" @bind-Value="instructorId" Variant="Variant.Text" Placeholder="Optional" />
        </MudItem>
    }
    <MudItem xs="12" md="2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadData" FullWidth="true">
            <MudIcon Icon="@Icons.Material.Filled.Assessment" Class="me-2" />
            Generate Report
        </MudButton>
    </MudItem>
</MudGrid>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Warning" Class="my-3">
        <MudIcon Icon="@Icons.Material.Filled.Warning" Class="me-2" /> @errorMessage
    </MudAlert>
}

@if (loading)
{
    <div class="report-loading d-flex flex-column align-items-center justify-content-center py-5">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        <MudText Class="mt-2">Loading grade distribution data...</MudText>
    </div>
}
else if (singleReport != null || multipleReports?.Any() == true)
{
    @if (reportType == "single" && singleReport != null)
    {
        <!-- Single Class Report -->
        <MudGrid Class="mb-4">
            <!-- Class Information -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="2" Class="h-100">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">ðŸ“š Class Information</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="string">
                            <MudListItem T="string"><strong>Class:</strong> @singleReport.ClassName</MudListItem>
                            <MudListItem T="string"><strong>Class ID:</strong> @singleReport.ClassId</MudListItem>
                            <MudListItem T="string"><strong>Instructor:</strong> @singleReport.InstructorName</MudListItem>
                            <MudListItem T="string"><strong>Total Students:</strong> @singleReport.TotalStudents</MudListItem>
                            <MudListItem T="string"><strong>Report Generated:</strong> @singleReport.ReportGeneratedDate.ToString("MMM dd, yyyy HH:mm")</MudListItem>
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Grade Statistics -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="2" Class="h-100">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">ðŸ“ˆ Grade Statistics</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="string">
                            <MudListItem T="string"><strong>Average Grade:</strong> <strong>@($"{singleReport.AverageGrade:F2}")</strong></MudListItem>
                            <MudListItem T="string"><strong>Median Grade:</strong> @($"{singleReport.MedianGrade:F2}")</MudListItem>
                            <MudListItem T="string"><strong>Highest Grade:</strong> <MudChip T="double" Color="Color.Success">@($"{singleReport.HighestGrade:F2}")</MudChip></MudListItem>
                            <MudListItem T="string"><strong>Lowest Grade:</strong> <MudChip T="double" Color="Color.Error">@($"{singleReport.LowestGrade:F2}")</MudChip></MudListItem>
                            <MudListItem T="string"><strong>Standard Deviation:</strong> @($"{singleReport.StandardDeviation:F2}")</MudListItem>
                            <MudListItem T="string"><strong>Grade Range:</strong> @singleReport.GradeRange</MudListItem>
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Grade Distribution Chart -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="8">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">ðŸ“Š Grade Distribution Chart</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid Justify="Justify.Center" Spacing="2">
                            <MudItem xs="12">
                                <div class="grade-bar">
                                    <MudProgressLinear Value="@GetBarHeight(singleReport.AGrades, singleReport.TotalStudents)" Color="Color.Success" Class="grade-bar-fill" Style=$"height: {GetBarHeight(singleReport.AGrades, singleReport.TotalStudents)}%;" />
                                    <MudText Typo="Typo.body2" Class="grade-label">A (@singleReport.AGrades)</MudText>
                                    <MudText Typo="Typo.caption" Class="grade-percentage">@(GetPercentage(singleReport.AGrades, singleReport.TotalStudents))%</MudText>
                                </div>
                            </MudItem>
                            <MudItem xs="12">
                                <div class="grade-bar">
                                    <MudProgressLinear Value="@GetBarHeight(singleReport.BGrades, singleReport.TotalStudents)" Color="Color.Info" Class="grade-bar-fill" Style=$"height: {GetBarHeight(singleReport.BGrades, singleReport.TotalStudents)}%;" />
                                    <MudText Typo="Typo.body2" Class="grade-label">B (@singleReport.BGrades)</MudText>
                                    <MudText Typo="Typo.caption" Class="grade-percentage">@(GetPercentage(singleReport.BGrades, singleReport.TotalStudents))%</MudText>
                                </div>
                            </MudItem>
                            <MudItem xs="12">
                                <div class="grade-bar">
                                    <MudProgressLinear Value="@GetBarHeight(singleReport.CGrades, singleReport.TotalStudents)" Color="Color.Warning" Class="grade-bar-fill" Style=$"height: {GetBarHeight(singleReport.CGrades, singleReport.TotalStudents)}%;" />
                                    <MudText Typo="Typo.body2" Class="grade-label">C (@singleReport.CGrades)</MudText>
                                    <MudText Typo="Typo.caption" Class="grade-percentage">@(GetPercentage(singleReport.CGrades, singleReport.TotalStudents))%</MudText>
                                </div>
                            </MudItem>
                            <MudItem xs="12">
                                <div class="grade-bar">
                                    <MudProgressLinear Value="@GetBarHeight(singleReport.DGrades, singleReport.TotalStudents)" Color="Color.Secondary" Class="grade-bar-fill" Style=$"height: {GetBarHeight(singleReport.DGrades, singleReport.TotalStudents)}%;" />
                                    <MudText Typo="Typo.body2" Class="grade-label">D (@singleReport.DGrades)</MudText>
                                    <MudText Typo="Typo.caption" Class="grade-percentage">@(GetPercentage(singleReport.DGrades, singleReport.TotalStudents))%</MudText>
                                </div>
                            </MudItem>
                            <MudItem xs="12">
                                <div class="grade-bar">
                                    <MudProgressLinear Value="@GetBarHeight(singleReport.FGrades, singleReport.TotalStudents)" Color="Color.Error" Class="grade-bar-fill" Style=$"height: {GetBarHeight(singleReport.FGrades, singleReport.TotalStudents)}%;" />
                                    <MudText Typo="Typo.body2" Class="grade-label">F (@singleReport.FGrades)</MudText>
                                    <MudText Typo="Typo.caption" Class="grade-percentage">@(GetPercentage(singleReport.FGrades, singleReport.TotalStudents))%</MudText>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="h-100">
                <MudCardHeader>
                        <MudText Typo="Typo.h6">ðŸŽ¯ Performance Summary</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @{
                            var passRate = GetPercentage(singleReport.AGrades + singleReport.BGrades + singleReport.CGrades + singleReport.DGrades, singleReport.TotalStudents);
                            var excellentRate = GetPercentage(singleReport.AGrades + singleReport.BGrades, singleReport.TotalStudents);
                        }
                        <MudText Typo="Typo.subtitle1">Pass Rate (D or above)</MudText>
                        <MudProgressLinear Value="@passRate" Color="Color.Success" Class="mb-1" />
                        <MudText Typo="Typo.caption" Class="text-muted">@($"{passRate:F1}%")</MudText>

                        <MudText Typo="Typo.subtitle1" Class="mt-3">Excellence Rate (B or above)</MudText>
                        <MudProgressLinear Value="@excellentRate" Color="Color.Info" Class="mb-1" />
                        <MudText Typo="Typo.caption" Class="text-muted">@($"{excellentRate:F1}%")</MudText>

                        <MudText Typo="Typo.subtitle1" Class="mt-3"><strong>Class Performance:</strong></MudText>
                        <MudChip T="double" Color="@GetPerformanceBadgeColor(singleReport.AverageGrade)">
                            @GetPerformanceLevel(singleReport.AverageGrade)
                        </MudChip>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
    else if (reportType == "all" && multipleReports?.Any() == true)
    {
        <!-- Multiple Classes Summary -->
        <MudGrid Class="stats-grid mb-4">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@multipleReports.Count()</MudText>
                        <MudText Typo="Typo.subtitle2">Total Classes</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@multipleReports.Sum(r => r.TotalStudents)</MudText>
                        <MudText Typo="Typo.subtitle2">Total Students</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@($"{multipleReports.Average(r => r.AverageGrade):F2}")</MudText>
                        <MudText Typo="Typo.subtitle2">Overall Average</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@($"{GetOverallPassRate():F1}%")</MudText>
                        <MudText Typo="Typo.subtitle2">Overall Pass Rate</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Classes Table -->
        <MudTable T="GradeDistributionReportDto" Items="@multipleReports" Hover="true" Breakpoint="Breakpoint.Sm" Class="report-table">
            <HeaderContent>
                <MudTh>Class</MudTh>
                <MudTh>Instructor</MudTh>
                <MudTh>Students</MudTh>
                <MudTh>Grade Distribution</MudTh>
                <MudTh>Statistics</MudTh>
                <MudTh>Performance</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Class">
                    <MudText Typo="Typo.body2"><strong>@context.ClassName</strong></MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">ID: @context.ClassId</MudText>
                </MudTd>
                <MudTd DataLabel="Instructor">@context.InstructorName</MudTd>
                <MudTd DataLabel="Students">
                    <MudChip T="int" Color="Color.Primary">@context.TotalStudents</MudChip>
                </MudTd>
                <MudTd DataLabel="Grade Distribution">
                    <MudChip T="int" Color="Color.Success" Class="me-1">A: @context.AGrades</MudChip>
                    <MudChip T="int" Color="Color.Info" Class="me-1">B: @context.BGrades</MudChip>
                    <MudChip T="int" Color="Color.Warning" Class="me-1">C: @context.CGrades</MudChip>
                    <MudChip T="int" Color="Color.Secondary" Class="me-1">D: @context.DGrades</MudChip>
                    <MudChip T="int" Color="Color.Error" Class="me-1">F: @context.FGrades</MudChip>
                </MudTd>
                <MudTd DataLabel="Statistics">
                    <MudText><strong>Avg:</strong> @($"{context.AverageGrade:F2}")</MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">Range: @context.GradeRange</MudText>
                </MudTd>
                <MudTd DataLabel="Performance">
                    @{
                        var classPassRate = GetPercentage(context.AGrades + context.BGrades + context.CGrades + context.DGrades, context.TotalStudents);
                    }
                    <MudProgressLinear Value="@classPassRate" Color="Color.Primary" Class="mb-1" Style="height: 6px;" />
                    <MudText Typo="Typo.caption" Class="text-muted">@($"{classPassRate:F1}% pass rate")</MudText>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 20, 50})" />
            </PagerContent>
        </MudTable>
    }
}
else if (!loading)
{
    <MudCard Elevation="2" Class="report-no-data">
        <MudCardContent Class="text-center py-5">
            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Large" Class="text-muted mb-3" />
            <MudText Typo="Typo.h5">Ready to Generate Report</MudText>
            <MudText Typo="Typo.body1" Class="text-muted">
                @if (reportType == "single")
                {
                    <span>Please enter a Class ID to generate the grade distribution report.</span>
                }
                else
                {
                    <span>Click "Generate Report" to view grade distribution for all classes.</span>
                }
            </MudText>
        </MudCardContent>
    </MudCard>
}

<style>
    .grade-bar {
        position: relative;
        height: 200px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-end;
        margin-bottom: 20px;
    }

    .grade-bar-fill {
        width: 60px;
        transition: height 0.3s ease;
        border-radius: 4px 4px 0 0;
        margin-bottom: 10px;
    }

    .grade-label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .grade-percentage {
        font-size: 0.9rem;
        color: #666;
    }
</style>

@code {
    private GradeDistributionReportDto? singleReport;
    private IEnumerable<GradeDistributionReportDto>? multipleReports;
    private bool loading = false;
    private string reportType = "single";
    private int? classId;
    private DateTime? startDate;
    private DateTime? endDate;
    private string instructorId = string.Empty;
    private string errorMessage = string.Empty;
    private User user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    }

    private void OnReportTypeChanged()
    {
        // Reset data when report type changes
        singleReport = null;
        multipleReports = null;
        errorMessage = string.Empty;
    }

    private async Task LoadData()
    {
        errorMessage = string.Empty;
        
        if (reportType == "single" && !classId.HasValue)
        {
            errorMessage = "Please enter a valid Class ID.";
            return;
        }

        loading = true;
        StateHasChanged();

        try
        {
            if (reportType == "single")
            {
                singleReport = await ReportRepository.GetGradeDistributionReportAsync(
                    user, 
                    classId!.Value, 
                    startDate, 
                    endDate
                );
                multipleReports = null;

                if (singleReport == null)
                {
                    singleReport = GenerateDummySingleReportData();
                }
            }
            else
            {
                multipleReports = await ReportRepository.GetAllClassesGradeDistributionReportAsync(
                    user, 
                    startDate, 
                    endDate, 
                    string.IsNullOrEmpty(instructorId) ? null : instructorId
                );
                singleReport = null;

                if (multipleReports == null || !multipleReports.Any())
                {
                    multipleReports = GenerateDummyMultipleReportsData();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            singleReport = null;
            multipleReports = null;

            if (reportType == "single")
            {
                singleReport = GenerateDummySingleReportData();
            }
            else
            {
                multipleReports = GenerateDummyMultipleReportsData();
            }
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private GradeDistributionReportDto GenerateDummySingleReportData()
    {
        var random = new Random();
        var totalStudents = random.Next(20, 100);
        var aGrades = random.Next(0, totalStudents / 4);
        var bGrades = random.Next(0, (totalStudents - aGrades) / 3);
        var cGrades = random.Next(0, (totalStudents - aGrades - bGrades) / 2);
        var dGrades = random.Next(0, (totalStudents - aGrades - bGrades - cGrades));
        var fGrades = totalStudents - aGrades - bGrades - cGrades - dGrades;

        var grades = new List<double>();
        for (int i = 0; i < aGrades; i++) grades.Add(random.NextDouble() * 10 + 90); // 90-100
        for (int i = 0; i < bGrades; i++) grades.Add(random.NextDouble() * 10 + 80); // 80-90
        for (int i = 0; i < cGrades; i++) grades.Add(random.NextDouble() * 10 + 70); // 70-80
        for (int i = 0; i < dGrades; i++) grades.Add(random.NextDouble() * 10 + 60); // 60-70
        for (int i = 0; i < fGrades; i++) grades.Add(random.NextDouble() * 60); // 0-60

        var averageGrade = grades.Any() ? grades.Average() : 0;
        var medianGrade = grades.OrderBy(g => g).Skip(grades.Count / 2).Take(1).FirstOrDefault();
        var highestGrade = grades.Any() ? grades.Max() : 0;
        var lowestGrade = grades.Any() ? grades.Min() : 0;
        var standardDeviation = grades.Any() ? Math.Sqrt(grades.Average(g => Math.Pow(g - averageGrade, 2))) : 0;

        return new GradeDistributionReportDto
        {
            ClassId = classId ?? 1,
            ClassName = "Dummy Class Name",
            InstructorName = "Dummy Instructor",
            TotalStudents = totalStudents,
            AGrades = aGrades,
            BGrades = bGrades,
            CGrades = cGrades,
            DGrades = dGrades,
            FGrades = fGrades,
            AverageGrade = averageGrade,
            MedianGrade = medianGrade,
            HighestGrade = highestGrade,
            LowestGrade = lowestGrade,
            StandardDeviation = standardDeviation,
            GradeRange = $"{lowestGrade:F0}-{highestGrade:F0}",
            ReportGeneratedDate = DateTime.Now
        };
    }

    private IEnumerable<GradeDistributionReportDto> GenerateDummyMultipleReportsData()
    {
        var random = new Random();
        var dummyData = new List<GradeDistributionReportDto>();
        var classNames = new[] { "Math 101", "Science 202", "History 303", "Art 404" };
        var instructorNames = new[] { "Dr. Smith", "Prof. Johnson", "Ms. Davis" };

        for (int i = 0; i < 5; i++)
        {
            var totalStudents = random.Next(15, 50);
            var aGrades = random.Next(0, totalStudents / 4);
            var bGrades = random.Next(0, (totalStudents - aGrades) / 3);
            var cGrades = random.Next(0, (totalStudents - aGrades - bGrades) / 2);
            var dGrades = random.Next(0, (totalStudents - aGrades - bGrades - cGrades));
            var fGrades = totalStudents - aGrades - bGrades - cGrades - dGrades;

            var grades = new List<double>();
            for (int j = 0; j < aGrades; j++) grades.Add(random.NextDouble() * 10 + 90);
            for (int j = 0; j < bGrades; j++) grades.Add(random.NextDouble() * 10 + 80);
            for (int j = 0; j < cGrades; j++) grades.Add(random.NextDouble() * 10 + 70);
            for (int j = 0; j < dGrades; j++) grades.Add(random.NextDouble() * 10 + 60);
            for (int j = 0; j < fGrades; j++) grades.Add(random.NextDouble() * 60);

            var averageGrade = grades.Any() ? grades.Average() : 0;
            var medianGrade = grades.OrderBy(g => g).Skip(grades.Count / 2).Take(1).FirstOrDefault();
            var highestGrade = grades.Any() ? grades.Max() : 0;
            var lowestGrade = grades.Any() ? grades.Min() : 0;
            var standardDeviation = grades.Any() ? Math.Sqrt(grades.Average(g => Math.Pow(g - averageGrade, 2))) : 0;

            dummyData.Add(new GradeDistributionReportDto
            {
                ClassId = i + 1,
                ClassName = classNames[random.Next(classNames.Length)],
                InstructorName = instructorNames[random.Next(instructorNames.Length)],
                TotalStudents = totalStudents,
                AGrades = aGrades,
                BGrades = bGrades,
                CGrades = cGrades,
                DGrades = dGrades,
                FGrades = fGrades,
                AverageGrade = averageGrade,
                MedianGrade = medianGrade,
                HighestGrade = highestGrade,
                LowestGrade = lowestGrade,
                StandardDeviation = standardDeviation,
                GradeRange = $"{lowestGrade:F0}-{highestGrade:F0}",
                ReportGeneratedDate = DateTime.Now
            });
        }
        return dummyData;
    }

    private double GetBarHeight(int gradeCount, int totalStudents)
    {
        if (totalStudents == 0) return 0;
        return Math.Max(5, (gradeCount / (double)totalStudents) * 100);
    }

    private double GetPercentage(int count, int total)
    {
        if (total == 0) return 0;
        return (count / (double)total) * 100;
    }

    private MudBlazor.Color GetPerformanceBadgeColor(double averageGrade)
    {
        return averageGrade switch
        {
            >= 90 => MudBlazor.Color.Success,
            >= 80 => MudBlazor.Color.Info,
            >= 70 => MudBlazor.Color.Warning,
            >= 60 => MudBlazor.Color.Secondary,
            _ => MudBlazor.Color.Error
        };
    }

    private string GetPerformanceLevel(double averageGrade)
    {
        return averageGrade switch
        {
            >= 90 => "Excellent",
            >= 80 => "Good",
            >= 70 => "Satisfactory",
            >= 60 => "Below Average",
            _ => "Poor"
        };
    }

    private double GetOverallPassRate()
    {
        if (multipleReports?.Any() != true) return 0;
        
        var totalStudents = multipleReports.Sum(r => r.TotalStudents);
        var totalPassing = multipleReports.Sum(r => r.AGrades + r.BGrades + r.CGrades + r.DGrades);
        
        return totalStudents > 0 ? (totalPassing / (double)totalStudents) * 100 : 0;
    }

    private async Task ExportToPdf()
    {
        try
        {
            if (reportType == "single" && singleReport != null)
            {
                var data = new {
                    Class = singleReport.ClassName,
                    Instructor = singleReport.InstructorName,
                    TotalStudents = singleReport.TotalStudents,
                    AverageGrade = singleReport.AverageGrade.ToString("F2"),
                    MedianGrade = singleReport.MedianGrade.ToString("F2"),
                    AGrades = singleReport.AGrades,
                    BGrades = singleReport.BGrades,
                    CGrades = singleReport.CGrades,
                    DGrades = singleReport.DGrades,
                    FGrades = singleReport.FGrades
                };

                var jsonData = System.Text.Json.JsonSerializer.Serialize(data);
                await JSRuntime.InvokeVoidAsync("downloadPdf", "Grade Distribution Report", jsonData);
            }
            else if (reportType == "all" && multipleReports?.Any() == true)
            {
                var data = multipleReports.Select(r => new {
                    Class = r.ClassName,
                    Instructor = r.InstructorName,
                    TotalStudents = r.TotalStudents,
                    AverageGrade = r.AverageGrade.ToString("F2"),
                    AGrades = r.AGrades,
                    BGrades = r.BGrades,
                    CGrades = r.CGrades,
                    DGrades = r.DGrades,
                    FGrades = r.FGrades
                });

                var jsonData = System.Text.Json.JsonSerializer.Serialize(data);
                await JSRuntime.InvokeVoidAsync("downloadPdf", "Grade Distribution Report - All Classes", jsonData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            if (reportType == "single" && singleReport != null)
            {
                var jsonData = System.Text.Json.JsonSerializer.Serialize(singleReport);
                await JSRuntime.InvokeVoidAsync("downloadExcel", "Grade Distribution Report", jsonData);
            }
            else if (reportType == "all" && multipleReports?.Any() == true)
            {
                var jsonData = System.Text.Json.JsonSerializer.Serialize(multipleReports);
                await JSRuntime.InvokeVoidAsync("downloadExcel", "Grade Distribution Report - All Classes", jsonData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }
}
