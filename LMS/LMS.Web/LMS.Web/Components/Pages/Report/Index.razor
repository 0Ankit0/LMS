@using BlazorBootstrap;
@using LMS.Web.Repositories.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@page "/reports"
@attribute [Authorize]
@inject IReportRepository ReportRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject IJSRuntime JSRuntime


<div class="report-dashboard">
    <!-- Dashboard Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">ðŸ“Š Reports Dashboard</h2>
            <p class="text-muted mb-0">Comprehensive analytics and reporting for your LMS</p>
        </div>
        <div class="text-end">
            <small class="text-muted">Last Updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</small>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="stats-grid mb-4">
        <Card>
            <CardBody>
                <div class="stat-card">
                    <div class="stat-icon">
                        <Icon Name="IconName.People" Size="IconSize.x3" />
                    </div>
                    <div class="stat-content">
                        <div class="stat-value">@totalStudents</div>
                        <div class="stat-label">Total Students</div>
                        <div class="stat-change">
                            <Icon Name="IconName.ArrowUp" Color="IconColor.Success" />
                            <span class="text-success">+5.2%</span>
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
        
        <Card>
            <CardBody>
                <div class="stat-card">
                    <div class="stat-icon">
                        <Icon Name="IconName.Book" Size="IconSize.x3" />
                    </div>
                    <div class="stat-content">
                        <div class="stat-value">@totalCourses</div>
                        <div class="stat-label">Active Courses</div>
                        <div class="stat-change">
                            <Icon Name="IconName.ArrowUp" Color="IconColor.Success" />
                            <span class="text-success">+12.1%</span>
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
        
        <Card>
            <CardBody>
                <div class="stat-card">
                    <div class="stat-icon">
                        <Icon Name="IconName.MortarboardFill" Size="IconSize.x3" />
                    </div>
                    <div class="stat-content">
                        <div class="stat-value">@($"{completedCoursesPercent:F1}%")</div>
                        <div class="stat-label">Avg Completion Rate</div>
                        <div class="stat-change">
                            <Icon Name="IconName.ArrowUp" Color="IconColor.Success" />
                            <span class="text-success">+3.8%</span>
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
        
        <Card>
            <CardBody>
                <div class="stat-card">
                    <div class="stat-icon">
                        <Icon Name="IconName.StarFill" Size="IconSize.x3" />
                    </div>
                    <div class="stat-content">
                        <div class="stat-value">@($"{averageSatisfaction:F1}")</div>
                        <div class="stat-label">Avg Rating</div>
                        <div class="stat-change">
                            <Icon Name="IconName.ArrowUp" Color="IconColor.Success" />
                            <span class="text-success">+0.3</span>
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
        
        <Card>
            <CardBody>
                <div class="stat-card">
                    <div class="stat-icon">
                        <Icon Name="IconName.Award" Size="IconSize.x3" />
                    </div>
                    <div class="stat-content">
                        <div class="stat-value">@certificatesIssued</div>
                        <div class="stat-label">Certificates Issued</div>
                        <div class="stat-change">
                            <Icon Name="IconName.ArrowUp" Color="IconColor.Success" />
                            <span class="text-success">+18.5%</span>
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
        
        <Card>
            <CardBody>
                <div class="stat-card">
                    <div class="stat-icon">
                        <Icon Name="IconName.GraphUp" Size="IconSize.x3" />
                    </div>
                    <div class="stat-content">
                        <div class="stat-value">@totalEnrollments</div>
                        <div class="stat-label">Total Enrollments</div>
                        <div class="stat-change">
                            <Icon Name="IconName.ArrowUp" Color="IconColor.Success" />
                            <span class="text-success">+7.2%</span>
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
    </div>

    <!-- Analytics Charts -->
    <div class="row mb-4">
        <div class="col-md-8">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.GraphUp" />
                    <strong>Enrollment Trends (Last 6 Months)</strong>
                </CardHeader>
                <CardBody>
                    <canvas id="enrollmentTrendsChart" width="400" height="200"></canvas>
                </CardBody>
            </Card>
        </div>
        <div class="col-md-4">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.PieChart" />
                    <strong>Performance Distribution</strong>
                </CardHeader>
                <CardBody>
                    <canvas id="performanceChart" width="400" height="200"></canvas>
                </CardBody>
            </Card>
        </div>
    </div>

    <!-- Course Performance Overview -->
    <div class="row mb-4">
        <div class="col-md-6">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Trophy" />
                    <strong>Top Performing Courses</strong>
                </CardHeader>
                <CardBody>
                    @if (topCourses?.Any() == true)
                    {
                        @foreach (var course in topCourses.Take(5))
                        {
                            <div class="course-performance-item">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="fw-medium">@course.CourseName</span>
                                    <Badge Color="BadgeColor.Success">@($"{course.CompletionRate:F1}%")</Badge>
                                </div>
                                <Progress Value="course.CompletionRate" Color="ProgressColor.Success" Height="6" />
                                <small class="text-muted">@course.TotalEnrollments students enrolled</small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-3">
                            <Icon Name="IconName.BarChart" Size="IconSize.x2" Class="mb-2" />
                            <p>No course data available</p>
                        </div>
                    }
                </CardBody>
            </Card>
        </div>
        <div class="col-md-6">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.ExclamationTriangle" />
                    <strong>Courses Needing Attention</strong>
                </CardHeader>
                <CardBody>
                    @if (lowPerformingCourses?.Any() == true)
                    {
                        @foreach (var course in lowPerformingCourses.Take(5))
                        {
                            <div class="course-performance-item">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="fw-medium">@course.CourseName</span>
                                    <Badge Color="BadgeColor.Warning">@($"{course.CompletionRate:F1}%")</Badge>
                                </div>
                                <Progress Value="course.CompletionRate" Color="ProgressColor.Warning" Height="6" />
                                <small class="text-muted">@course.TotalEnrollments students enrolled</small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-3">
                            <Icon Name="IconName.CheckCircle" Size="IconSize.x2" Class="mb-2" />
                            <p>All courses performing well!</p>
                        </div>
                    }
                </CardBody>
            </Card>
        </div>
    </div>

    <!-- Report Categories -->
    <div class="row">
        <!-- Academic Reports -->
        <div class="col-md-6 col-lg-4 mb-4">
            <Card Class="h-100">
                <CardHeader>
                    <Icon Name="IconName.Book" />
                    <strong>Academic Reports</strong>
                </CardHeader>
                <CardBody>
                    <p class="text-muted mb-3">Course completion, assessment performance, and enrollment analytics</p>
                    <div class="d-grid gap-2">
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/course-completion">
                            <Icon Name="IconName.CheckCircle" /> Course Completion
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/assessment-performance">
                            <Icon Name="IconName.ClipboardData" /> Assessment Performance
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/enrollment-summary">
                            <Icon Name="IconName.People" /> Enrollment Summary
                        </Button>
                    </div>
                </CardBody>
            </Card>
        </div>

        <!-- Student Reports -->
        <div class="col-md-6 col-lg-4 mb-4">
            <Card Class="h-100">
                <CardHeader>
                    <Icon Name="IconName.PersonFill" />
                    <strong>Student Reports</strong>
                </CardHeader>
                <CardBody>
                    <p class="text-muted mb-3">Student information, progress tracking, and performance analysis</p>
                    <div class="d-grid gap-2">
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/student-information">
                            <Icon Name="IconName.Person" /> Student Information
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/student-progress">
                            <Icon Name="IconName.GraphUp" /> Student Progress
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/low-performance">
                            <Icon Name="IconName.ExclamationTriangle" /> Low Performance
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/student-engagement">
                            <Icon Name="IconName.Heart" /> Student Engagement
                        </Button>
                    </div>
                </CardBody>
            </Card>
        </div>

        <!-- Attendance Reports -->
        <div class="col-md-6 col-lg-4 mb-4">
            <Card Class="h-100">
                <CardHeader>
                    <Icon Name="IconName.ClipboardCheck" />
                    <strong>Attendance Reports</strong>
                </CardHeader>
                <CardBody>
                    <p class="text-muted mb-3">Class attendance tracking and student attendance patterns</p>
                    <div class="d-grid gap-2">
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/attendance">
                            <Icon Name="IconName.Calendar3" /> Class Attendance
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/student-attendance">
                            <Icon Name="IconName.PersonCheck" /> Student Attendance
                        </Button>
                    </div>
                </CardBody>
            </Card>
        </div>

        <!-- Forum Reports -->
        <div class="col-md-6 col-lg-4 mb-4">
            <Card Class="h-100">
                <CardHeader>
                    <Icon Name="IconName.ChatDots" />
                    <strong>Forum Reports</strong>
                </CardHeader>
                <CardBody>
                    <p class="text-muted mb-3">Forum activity, participation, and engagement metrics</p>
                    <div class="d-grid gap-2">
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/forum-activity">
                            <Icon Name="IconName.ChatSquareText" /> Forum Activity
                        </Button>
                    </div>
                </CardBody>
            </Card>
        </div>

        <!-- Analytics -->
        <div class="col-md-6 col-lg-4 mb-4">
            <Card Class="h-100">
                <CardHeader>
                    <Icon Name="IconName.BarChart" />
                    <strong>Analytics</strong>
                </CardHeader>
                <CardBody>
                    <p class="text-muted mb-3">Advanced analytics, trends, and data insights</p>
                    <div class="d-grid gap-2">
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/popular-courses">
                            <Icon Name="IconName.Star" /> Popular Courses
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/learning-analytics">
                            <Icon Name="IconName.Activity" /> Learning Analytics
                        </Button>
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/grade-distribution">
                            <Icon Name="IconName.PieChart" /> Grade Distribution
                        </Button>
                    </div>
                </CardBody>
            </Card>
        </div>

        <!-- Teacher Reports -->
        <div class="col-md-6 col-lg-4 mb-4">
            <Card Class="h-100">
                <CardHeader>
                    <Icon Name="IconName.Person" />
                    <strong>Teacher Reports</strong>
                </CardHeader>
                <CardBody>
                    <p class="text-muted mb-3">Teacher performance, course effectiveness, and teaching analytics</p>
                    <div class="d-grid gap-2">
                        <Button Color="ButtonColor.Light" Outline="true" Class="btn-sm" To="/reports/teacher-performance">
                            <Icon Name="IconName.PersonBadge" /> Teacher Performance
                        </Button>
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>

    <!-- Recent Activity -->
    <Card Class="mt-4">
        <CardHeader>
            <Icon Name="IconName.Activity" />
            <strong>Recent Activity</strong>
        </CardHeader>
        <CardBody>
            <div class="row">
                <div class="col-md-6">
                    <h6>Most Viewed Reports</h6>
                    <div class="list-group list-group-flush">
                        <div class="list-group-item d-flex justify-content-between py-2 border-0">
                            <span><Icon Name="IconName.File" Class="me-2" />Course Completion Report</span>
                            <Badge Color="BadgeColor.Primary">245 views</Badge>
                        </div>
                        <div class="list-group-item d-flex justify-content-between py-2 border-0">
                            <span><Icon Name="IconName.GraphUp" Class="me-2" />Student Progress Report</span>
                            <Badge Color="BadgeColor.Primary">189 views</Badge>
                        </div>
                        <div class="list-group-item d-flex justify-content-between py-2 border-0">
                            <span><Icon Name="IconName.Calendar" Class="me-2" />Attendance Report</span>
                            <Badge Color="BadgeColor.Primary">156 views</Badge>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h6>System Status</h6>
                    <div class="list-group list-group-flush">
                        <div class="list-group-item d-flex justify-content-between py-2 border-0">
                            <span><Icon Name="IconName.Database" Class="me-2" />Database Status</span>
                            <Badge Color="BadgeColor.Success">Online</Badge>
                        </div>
                        <div class="list-group-item d-flex justify-content-between py-2 border-0">
                            <span><Icon Name="IconName.Gear" Class="me-2" />Report Generation</span>
                            <Badge Color="BadgeColor.Success">Operational</Badge>
                        </div>
                        <div class="list-group-item d-flex justify-content-between py-2 border-0">
                            <span><Icon Name="IconName.ArrowRepeat" Class="me-2" />Last Data Sync</span>
                            <small class="text-muted">2 minutes ago</small>
                        </div>
                    </div>
                </div>
            </div>
        </CardBody>
    </Card>
</div>

@code {
    private User user = default!;
    
    // Dashboard metrics
    private int totalStudents = 0;
    private int totalCourses = 0;
    private int certificatesIssued = 0;
    private int totalEnrollments = 0;
    private double averageSatisfaction = 0.0;
    private double completedCoursesPercent = 0.0;
    
    // Chart data
    private IEnumerable<CourseCompletionReportDto>? topCourses;
    private IEnumerable<CourseCompletionReportDto>? lowPerformingCourses;
    private IEnumerable<EnrollmentSummaryReportDto>? enrollmentTrends;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DrawCharts();
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Get the current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = await UserManager.GetUserAsync(authState.User);

            if (currentUser != null)
            {
                user = currentUser;
                // Load real data or fallback to dummy data
                await LoadRealDataWithFallback();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            // Load dummy data on error
            LoadDummyData();
        }
    }

    private async Task LoadRealDataWithFallback()
    {
        try
        {
            // Load summary data from various reports
            var studentsInfo = await ReportRepository.GetAllStudentsInformationReportAsync(user);
            var coursesData = await ReportRepository.GetAllCoursesCompletionReportAsync(user);
            var teachersData = await ReportRepository.GetAllTeachersPerformanceReportAsync(user);
            var enrollmentData = await ReportRepository.GetEnrollmentSummaryReportAsync(user, DateTime.Today.AddMonths(-6), DateTime.Today, "Monthly");

            // If any data is empty, use dummy data
            if (!studentsInfo.Any() || !coursesData.Any() || !teachersData.Any() || !enrollmentData.Any())
            {
                LoadDummyData();
                return;
            }

            // Use real data
            totalStudents = studentsInfo.Count();
            totalCourses = coursesData.Count();
            certificatesIssued = coursesData.Sum(c => c.CertificatesIssued);
            totalEnrollments = coursesData.Sum(c => c.TotalEnrollments);
            completedCoursesPercent = coursesData.Average(c => c.CompletionRate);
            averageSatisfaction = teachersData.Average(t => t.StudentSatisfactionRating);

            topCourses = coursesData.OrderByDescending(c => c.CompletionRate).Take(10);
            lowPerformingCourses = coursesData.Where(c => c.CompletionRate < 60).OrderBy(c => c.CompletionRate).Take(10);
            enrollmentTrends = enrollmentData.OrderBy(e => e.ReportDate);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading real data: {ex.Message}");
            LoadDummyData();
        }
    }

    private void LoadDummyData()
    {
        var random = new Random();
        
        // Generate dummy metrics
        totalStudents = 1250 + random.Next(-50, 100);
        totalCourses = 45 + random.Next(-5, 10);
        certificatesIssued = 320 + random.Next(-20, 50);
        totalEnrollments = 2850 + random.Next(-100, 200);
        completedCoursesPercent = 72.5 + random.NextDouble() * 15;
        averageSatisfaction = 4.2 + random.NextDouble() * 0.6;

        // Generate dummy course data
        var courseNames = new[] { "Mathematics 101", "Physics Fundamentals", "Chemistry Basics", "Computer Science", "Biology Advanced", "History of Art", "Literature Studies", "Economics 101", "Statistics", "Psychology" };
        var dummyCourses = new List<CourseCompletionReportDto>();

        for (int i = 0; i < courseNames.Length; i++)
        {
            dummyCourses.Add(new CourseCompletionReportDto
            {
                CourseName = courseNames[i],
                CourseId = i + 1,
                TotalEnrollments = random.Next(50, 200),
                CompletedEnrollments = random.Next(20, 150),
                CompletionRate = 40 + random.NextDouble() * 50,
                CertificatesIssued = random.Next(15, 120),
                AverageCompletionTime = random.Next(30, 120), // days
                AverageFinalGrade = 65 + random.NextDouble() * 30,
                InstructorName = "Dr. Smith",
                CourseStartDate = DateTime.Today.AddDays(-random.Next(30, 365)),
                CourseStatus = "Active"
            });
        }

        topCourses = dummyCourses.OrderByDescending(c => c.CompletionRate).Take(5);
        lowPerformingCourses = dummyCourses.Where(c => c.CompletionRate < 60).OrderBy(c => c.CompletionRate).Take(5);

        // Generate dummy enrollment trends
        var dummyEnrollments = new List<EnrollmentSummaryReportDto>();
        for (int i = 0; i < 6; i++)
        {
            var reportDate = DateTime.Today.AddMonths(-5 + i);
            dummyEnrollments.Add(new EnrollmentSummaryReportDto
            {
                ReportDate = reportDate,
                NewEnrollments = random.Next(50, 150),
                TotalEnrollments = random.Next(400, 600),
                CompletedEnrollments = random.Next(20, 80),
                DroppedEnrollments = random.Next(5, 25),
                Period = "Monthly"
            });
        }
        enrollmentTrends = dummyEnrollments;
    }

    private async Task DrawCharts()
    {
        try
        {
            // Draw enrollment trends chart
            if (enrollmentTrends?.Any() == true)
            {
                var enrollmentChartData = enrollmentTrends.Select(e => new
                {
                    label = e.ReportDate.ToString("MMM yyyy"),
                    newEnrollments = e.NewEnrollments,
                    totalEnrollments = e.TotalEnrollments,
                    completedEnrollments = e.CompletedEnrollments
                }).ToArray();

                await JSRuntime.InvokeVoidAsync("drawLineChart", "enrollmentTrendsChart", enrollmentChartData);
            }

            // Draw performance distribution chart
            var performanceData = new
            {
                excellent = topCourses?.Count(c => c.CompletionRate >= 80) ?? 2,
                good = topCourses?.Count(c => c.CompletionRate >= 60 && c.CompletionRate < 80) ?? 5,
                average = topCourses?.Count(c => c.CompletionRate >= 40 && c.CompletionRate < 60) ?? 2,
                poor = topCourses?.Count(c => c.CompletionRate < 40) ?? 1
            };

            await JSRuntime.InvokeVoidAsync("drawDoughnutChart", "performanceChart", performanceData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error drawing charts: {ex.Message}");
        }
    }
}
