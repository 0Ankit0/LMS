@using BlazorBootstrap
@using LMS.Data.DTOs
@using LMS.Data.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using LMS.Repositories
@page "/reports/enrollment-summary"
@inject IReportRepository ReportRepository
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@attribute [Authorize]

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">ðŸ‘¥ Enrollment Summary Report</h2>
        <p class="text-muted mb-0">Track enrollment statistics and trends over time</p>
    </div>
    <div class="export-buttons">
        <Button Color="ButtonColor.Danger" Outline="true" @onclick="ExportToPdf">
            <Icon Name="IconName.FilePdf" /> Export PDF
        </Button>
        <Button Color="ButtonColor.Success" Outline="true" @onclick="ExportToExcel">
            <Icon Name="IconName.FileExcel" /> Export Excel
        </Button>
    </div>
</div>

@if (loading)
{
    <div class="text-center py-5">
        <Spinner Color="SpinnerColor.Primary" Size="SpinnerSize.Medium" />
        <p class="mt-2">Loading enrollment data...</p>
    </div>
}
else
{
    <Card>
        <CardBody>
            <h5>Enrollment Summary</h5>
            <p>This report will show enrollment statistics and trends.</p>
        </CardBody>
    </Card>
}

@code {
    private bool loading = true;
    private IEnumerable<EnrollmentSummaryReportDto> reports;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        await Task.Delay(1000); // Simulate loading

        // In a real scenario, you'd fetch data from a service here.
        // For this stub, we'll just use dummy data.
        reports = GenerateDummyData();

        loading = false;
    }

    private IEnumerable<EnrollmentSummaryReportDto> GenerateDummyData()
    {
        var random = new Random();
        var dummyData = new List<EnrollmentSummaryReportDto>();

        var courseNames = new[] { "Mathematics 101", "Physics Fundamentals", "Chemistry Basics", "Computer Science" };
        var periods = new[] { "Daily", "Weekly", "Monthly" };

        for (int i = 0; i < 5; i++)
        {
            dummyData.Add(new EnrollmentSummaryReportDto
            {
                ReportDate = DateTime.Today.AddDays(-i * 7),
                TotalEnrollments = random.Next(100, 500),
                NewEnrollments = random.Next(10, 50),
                CompletedEnrollments = random.Next(5, 30),
                ActiveEnrollments = random.Next(50, 200),
                DroppedEnrollments = random.Next(0, 10),
                SuspendedEnrollments = random.Next(0, 5),
                CourseName = courseNames[random.Next(courseNames.Length)],
                CourseId = random.Next(1, 10),
                Period = periods[random.Next(periods.Length)],
                AverageProgressPercentage = random.NextDouble() * 100,
                CertificatesIssued = random.Next(0, 20)
            });
        }
        return dummyData;
    }

    private async Task ExportToPdf()
    {
        await Task.CompletedTask; // Stub implementation
    }

    private async Task ExportToExcel()
    {
        await Task.CompletedTask; // Stub implementation
    }
}
