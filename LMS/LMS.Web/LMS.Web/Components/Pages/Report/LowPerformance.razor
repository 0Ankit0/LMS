@using LMS.Web.Repositories.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject IReportRepository ReportRepository
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@attribute [Authorize]
@page "/reports/low-performance"

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">‚ö†Ô∏è Low Performance Students Report</h2>
        <p class="text-muted mb-0">Identify students who need additional support and intervention</p>
    </div>
    <div class="export-buttons">
        <button class="btn btn-outline-report" @onclick="ExportToPdf">
            <i class="fas fa-file-pdf"></i> Export PDF
        </button>
        <button class="btn btn-outline-report" @onclick="ExportToExcel">
            <i class="fas fa-file-excel"></i> Export Excel
        </button>
    </div>
</div>

<!-- Filters -->
<div class="report-filters">
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Performance Threshold (%)</label>
                <input type="number" class="form-control" @bind="threshold" @bind:after="LoadData"
                       min="0" max="100" step="5" placeholder="50" />
                <small class="form-text text-muted">Students below this threshold will be included</small>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Start Date</label>
                <input type="date" class="form-control" @bind="startDate" @bind:after="LoadData" />
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">End Date</label>
                <input type="date" class="form-control" @bind="endDate" @bind:after="LoadData" />
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Course</label>
                <select class="form-select" @bind="selectedCourseId" @bind:after="LoadData">
                    <option value="">All Courses</option>
                    @if (courses?.Any() == true)
                    {
                        @foreach (var course in courses)
                        {
                            <option value="@course.Id">@course.Title</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>
</div>

@if (loading)
{
    <div class="report-loading">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading low performance students data...</p>
    </div>
}
else if (reports?.Any() == true)
{
    <!-- Alert Summary -->
    <div class="alert alert-warning mb-4">
        <div class="d-flex align-items-center">
            <i class="fas fa-exclamation-triangle fa-2x me-3"></i>
            <div>
                <h5 class="mb-1">‚ö†Ô∏è Attention Required</h5>
                <p class="mb-0">
                    <strong>@reports.Count()</strong> students are performing below the @threshold% threshold and may need additional support.
                </p>
            </div>
        </div>
    </div>

    <!-- Summary Statistics -->
    <div class="stats-grid mb-4">
        <div class="stat-card stat-card-danger">
            <div class="stat-value">@reports.Count()</div>
            <div class="stat-label">At-Risk Students</div>
        </div>
        <div class="stat-card stat-card-warning">
            <div class="stat-value">@($"{reports.Average(r => r.AverageAssessmentScore):F1}%")</div>
            <div class="stat-label">Avg Performance</div>
        </div>
        <div class="stat-card stat-card-info">
            <div class="stat-value">@($"{reports.Average(r => r.ProgressPercentage):F1}%")</div>
            <div class="stat-label">Avg Progress</div>
        </div>
        <div class="stat-card stat-card-secondary">
            <div class="stat-value">@reports.Count(r => r.Status == "Active")</div>
            <div class="stat-label">Still Active</div>
        </div>
    </div>

    <!-- Risk Level Distribution -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Performance Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="performanceChart" width="400" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Risk Categories</h5>
                </div>
                <div class="card-body">
                    <div class="risk-categories">
                        <div class="risk-category">
                            <div class="risk-indicator bg-danger"></div>
                            <span>Critical (&lt;30%): @reports.Count(r => r.AverageAssessmentScore < 30)</span>
                        </div>
                        <div class="risk-category">
                            <div class="risk-indicator bg-warning"></div>
                            <span>High Risk (30-40%): @reports.Count(r => r.AverageAssessmentScore >= 30 && r.AverageAssessmentScore < 40)</span>
                        </div>
                        <div class="risk-category">
                            <div class="risk-indicator bg-info"></div>
                            <span>Moderate Risk (40-@(threshold)%): @reports.Count(r => r.AverageAssessmentScore >= 40 && r.AverageAssessmentScore < threshold)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Table -->
    <div class="report-table">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Student</th>
                    <th>Email</th>
                    <th>Course</th>
                    <th>Progress</th>
                    <th>Avg Score</th>
                    <th>Risk Level</th>
                    <th>Time Spent</th>
                    <th>Status</th>
                    <th>Last Activity</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in reports.OrderBy(r => r.AverageAssessmentScore))
                {
                    <tr class="@GetRowClass(report.AverageAssessmentScore)">
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="student-avatar me-2">
                                    @report.StudentName.Substring(0, 1).ToUpper()
                                </div>
                                <strong>@report.StudentName</strong>
                            </div>
                        </td>
                        <td>@report.Email</td>
                        <td>@report.CourseName</td>
                        <td>
                            <div class="progress-container">
                                <div class="progress">
                                    <div class="progress-bar @GetProgressBarClass(report.ProgressPercentage)"
                                         style="width: @(report.ProgressPercentage)%"></div>
                                </div>
                                <span class="progress-text">@($"{report.ProgressPercentage:F1}%")</span>
                            </div>
                        </td>
                        <td>
                            <span class="badge @GetScoreBadgeClass(report.AverageAssessmentScore)">
                                @($"{report.AverageAssessmentScore:F1}%")
                            </span>
                        </td>
                        <td>
                            <span class="badge @GetRiskBadgeClass(report.AverageAssessmentScore)">
                                @GetRiskLevel(report.AverageAssessmentScore)
                            </span>
                        </td>
                        <td>@report.TimeSpent.ToString(@"hh\:mm")</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(report.Status)">
                                @report.Status
                            </span>
                        </td>
                        <td>@(report.EnrolledAt.ToString("MMM dd, yyyy"))</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary btn-sm" title="Contact Student">
                                    <i class="fas fa-envelope"></i>
                                </button>
                                <button class="btn btn-outline-info btn-sm" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn btn-outline-warning btn-sm" title="Add Note">
                                    <i class="fas fa-sticky-note"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Intervention Recommendations -->
    <div class="card mt-4">
        <div class="card-header">
            <h5 class="mb-0">üí° Recommended Interventions</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="intervention-card">
                        <h6>üìß Immediate Actions</h6>
                        <ul class="list-unstyled">
                            <li>‚Ä¢ Send personalized check-in emails</li>
                            <li>‚Ä¢ Schedule one-on-one meetings</li>
                            <li>‚Ä¢ Provide additional resources</li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="intervention-card">
                        <h6>üéØ Academic Support</h6>
                        <ul class="list-unstyled">
                            <li>‚Ä¢ Assign peer mentors</li>
                            <li>‚Ä¢ Offer tutoring sessions</li>
                            <li>‚Ä¢ Create study groups</li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="intervention-card">
                        <h6>üìö Learning Resources</h6>
                        <ul class="list-unstyled">
                            <li>‚Ä¢ Provide supplementary materials</li>
                            <li>‚Ä¢ Suggest alternative learning paths</li>
                            <li>‚Ä¢ Offer extension deadlines</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="report-no-data">
        <div class="text-center">
            <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
            <h5>Great News!</h5>
            <p class="text-muted">No students are performing below the @threshold% threshold.</p>
            <p class="text-muted">All students are meeting performance expectations.</p>
        </div>
    </div>
}

@code {
    private double threshold = 50.0;
    private DateTime? startDate = DateTime.Today.AddMonths(-3);
    private DateTime? endDate = DateTime.Today;
    private int? selectedCourseId;
    private bool loading = true;

    private IEnumerable<StudentProgressReportDto>? reports;
    private IEnumerable<Course>? courses = Enumerable.Empty<Course>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && reports?.Any() == true)
        {
            await DrawChart();
        }
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                reports = await ReportRepository.GetLowPerformanceStudentsReportAsync(
                    user, threshold, startDate, endDate, selectedCourseId);

                if (reports == null || !reports.Any())
                {
                    reports = GenerateDummyData();
                }

                // Optionally load courses here if needed
                // courses = await ...;

                await DrawChart();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading low performance students data: {ex.Message}");
            reports = GenerateDummyData(); // Use dummy data on error
            await DrawChart();
        }
        finally
        {
            loading = false;
        }
    }

    private IEnumerable<StudentProgressReportDto> GenerateDummyData()
    {
        var random = new Random();
        var dummyData = new List<StudentProgressReportDto>();

        var studentNames = new[] { "John Doe", "Jane Smith", "Peter Jones", "Alice Brown", "Bob White" };
        var courseNames = new[] { "Math 101", "Physics 201", "Chemistry 301", "History 101" };
        var statuses = new[] { "Active", "Paused", "Dropped" };

        for (int i = 0; i < 10; i++)
        {
            var avgScore = random.NextDouble() * (threshold - 10) + 10; // Score below threshold
            var progress = random.NextDouble() * 50; // Low progress

            dummyData.Add(new StudentProgressReportDto
            {
                StudentId = $"STU{1000 + i}",
                StudentName = studentNames[random.Next(studentNames.Length)],
                Email = $"student{i}@example.com",
                CourseId = random.Next(1, 5),
                CourseName = courseNames[random.Next(courseNames.Length)],
                ProgressPercentage = progress,
                AverageAssessmentScore = avgScore,
                TimeSpent = TimeSpan.FromHours(random.Next(5, 50)),
                Status = statuses[random.Next(statuses.Length)],
                EnrolledAt = DateTime.Today.AddDays(-random.Next(30, 365))
                // Removed LastActivity property assignment (not present in StudentProgressReportDto)
            });
        }
        return dummyData;
    }

    private async Task DrawChart()
    {
        if (reports?.Any() == true)
        {
            var performanceData = new
            {
                critical = reports.Count(r => r.AverageAssessmentScore < 30),
                high = reports.Count(r => r.AverageAssessmentScore >= 30 && r.AverageAssessmentScore < 40),
                moderate = reports.Count(r => r.AverageAssessmentScore >= 40 && r.AverageAssessmentScore < threshold)
            };

            await JSRuntime.InvokeVoidAsync("drawPerformanceChart", "performanceChart", performanceData);
        }
    }

    private string GetRowClass(double score)
    {
        if (score < 30) return "table-danger";
        if (score < 40) return "table-warning";
        return "";
    }

    private string GetProgressBarClass(double progress)
    {
        if (progress >= 60) return "bg-success";
        if (progress >= 40) return "bg-warning";
        return "bg-danger";
    }

    private string GetScoreBadgeClass(double score)
    {
        if (score < 30) return "bg-danger";
        if (score < 40) return "bg-warning";
        if (score < 60) return "bg-info";
        return "bg-success";
    }

    private string GetRiskBadgeClass(double score)
    {
        if (score < 30) return "bg-danger";
        if (score < 40) return "bg-warning";
        return "bg-info";
    }

    private string GetRiskLevel(double score)
    {
        if (score < 30) return "Critical";
        if (score < 40) return "High Risk";
        return "Moderate Risk";
    }

    private string GetStatusBadgeClass(string status)
    {
        switch (status.ToLower())
        {
            case "completed": return "bg-success";
            case "active": return "bg-primary";
            case "dropped": return "bg-danger";
            case "paused": return "bg-warning";
            default: return "bg-secondary";
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var pdfBytes = await ReportRepository.ExportReportToPdfAsync(user, "lowperformance", new { threshold, startDate, endDate, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "LowPerformanceStudents.pdf", Convert.ToBase64String(pdfBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to PDF: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var excelBytes = await ReportRepository.ExportReportToExcelAsync(user, "lowperformance", new { threshold, startDate, endDate, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "LowPerformanceStudents.xlsx", Convert.ToBase64String(excelBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
        }
    }
}