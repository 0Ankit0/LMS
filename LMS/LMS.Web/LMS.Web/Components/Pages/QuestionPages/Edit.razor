@page "/questions/edit"
@using Microsoft.EntityFrameworkCore
@using LMS.Data.Entities
@inject IDbContextFactory<LMS.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Question</h2>
<hr />
@if (Question is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Question" OnValidSubmit="UpdateQuestion" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Question.Id" value="@Question.Id" />
                <div class="mb-3">
                    <label for="text" class="form-label">Text:</label>
                    <InputText id="text" @bind-Value="Question.Text" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Question.Text" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="assessmentid" class="form-label">AssessmentId:</label>
                    <InputNumber id="assessmentid" @bind-Value="Question.AssessmentId" class="form-control" />
                    <ValidationMessage For="() => Question.AssessmentId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputSelect id="type" @bind-Value="Question.Type" class="form-control">
                        @foreach (var enumValue in Enum.GetValues(typeof(QuestionType)))
                        {
                            <option value="@enumValue">@enumValue.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Question.Type" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="points" class="form-label">Points:</label>
                    <InputNumber id="points" @bind-Value="Question.Points" class="form-control" />
                    <ValidationMessage For="() => Question.Points" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="orderindex" class="form-label">OrderIndex:</label>
                    <InputNumber id="orderindex" @bind-Value="Question.OrderIndex" class="form-control" />
                    <ValidationMessage For="() => Question.OrderIndex" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="explanation" class="form-label">Explanation:</label>
                    <InputText id="explanation" @bind-Value="Question.Explanation" class="form-control" />
                    <ValidationMessage For="() => Question.Explanation" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isrequired" class="form-label">IsRequired:</label>
                    <InputCheckbox id="isrequired" @bind-Value="Question.IsRequired" class="form-check-input" />
                    <ValidationMessage For="() => Question.IsRequired" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Question.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => Question.CreatedAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/questions">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Question? Question { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Question ??= await context.Questions.FirstOrDefaultAsync(m => m.Id == Id);

        if (Question is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateQuestion()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Question!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!QuestionExists(Question!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/questions");
    }

    private bool QuestionExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Questions.Any(e => e.Id == id);
    }
}
