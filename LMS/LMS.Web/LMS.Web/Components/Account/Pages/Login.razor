@page "/Account/Login"
@page "/login"

@using System.ComponentModel.DataAnnotations
@using LMS.Web.Components.Layout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LMS.Data.Entities
@layout AuthLayout
@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="row justify-content-center m-0 p-0">
    <h1 class="text-center">Login</h1>
    <div class="col-12 col-md-8 col-lg-5 col-xl-4">
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username"
                    aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control"
                    autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="Input.Password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me?
                </label>
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
            <div class="mt-2 text-end">
                <a href="/user/account/forgotpassword">Forgot your password?</a>
            </div>
        </EditForm>
        <div class="mt-3 text-center">
            <span>Don't have an account?</span>
            <a href="/Account/Register" class="ms-1">Register</a>
        </div>
        <StatusMessage Message="@errorMessage" />
    </div>
</div>
<style>
    .password-eye:focus {
        outline: 2px solid #0d6efd;
    }
</style>
@code {
    private string? errorMessage;

    private bool _showPassword = false;
    private bool _shouldRedirect = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginRequest Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext.User?.Identity?.IsAuthenticated == true)
        {
            _shouldRedirect = true;
            return;
        }
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if ( _shouldRedirect)
        {
            RedirectManager.RedirectTo("/home");
        }
    }
    private void TogglePassword()
    {
        _showPassword = !_showPassword;
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

}