@using MudBlazor
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<MudAppBar Elevation="0" Color="Color.Primary" Class="mud-theme-provider">
    <MudText Typo="Typo.h6" Class="ml-2">LMS</MudText>
    <MudSpacer />
    <MudIconButton Icon="@ThemeIcon" Color="Color.Inherit" OnClick="ToggleTheme" />
</MudAppBar>

@code {
    private bool IsDarkMode { get; set; }
    private string ThemeIcon => IsDarkMode ? Icons.Material.Filled.Brightness7 : Icons.Material.Filled.Brightness4;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsDarkMode = await LocalStorage.GetItemAsync<bool>("IsDarkMode");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading theme preference: {ex.Message}");
            }
        }
    }

    private async Task ToggleTheme()
    {
        try
        {
            IsDarkMode = !IsDarkMode;
            await LocalStorage.SetItemAsync("IsDarkMode", IsDarkMode);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling theme: {ex.Message}");
        }
    }
}



