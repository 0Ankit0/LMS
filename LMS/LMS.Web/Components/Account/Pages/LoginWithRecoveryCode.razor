@page "/Account/LoginWithRecoveryCode"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity


@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Recovery code verification</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Recovery code verification</MudText>
<MudDivider />
<StatusMessage Message="@message" />
<MudText Class="mb-6">
    You have requested to log in with a recovery code. This login will not be remembered until you provide
    an authenticator app code at log in or disable 2FA and log in again.
</MudText>
<MudGrid>
    <MudItem xs="12" md="4">
        <MudCard>
            <MudCardContent>
                <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Input.RecoveryCode" 
                                        Label="Recovery Code" 
                                        Variant="Variant.Outlined" 
                                        AutoComplete="off" 
                                        For="@(() => Input.RecoveryCode)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton ButtonType="ButtonType.Submit" 
                                     Variant="Variant.Filled" 
                                     Color="Color.Primary" 
                                     FullWidth="true" 
                                     Size="Size.Large">
                                Log in
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private string? message;
    private User user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            message = "Error: Invalid recovery code entered.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Recovery Code")]
        public string RecoveryCode { get; set; } = "";
    }
}



