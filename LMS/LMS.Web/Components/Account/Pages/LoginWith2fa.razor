@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity


@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Two-factor authentication</MudText>
<MudDivider />
<StatusMessage Message="@message" />
<MudText Class="mb-6">Your login is protected with an authenticator app. Enter your authenticator code below.</MudText>
<MudGrid>
    <MudItem xs="12" md="4">
        <MudCard>
            <MudCardContent>
                <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    <input type="hidden" name="RememberMe" value="@RememberMe" />
                    <DataAnnotationsValidator />
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Input.TwoFactorCode" 
                                        Label="Authenticator code" 
                                        Variant="Variant.Outlined" 
                                        AutoComplete="off"
                                        For="@(() => Input.TwoFactorCode)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudCheckBox @bind-Value="Input.RememberMachine" 
                                       Label="Remember this machine" 
                                       Color="Color.Primary" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton ButtonType="ButtonType.Submit" 
                                     Variant="Variant.Filled" 
                                     Color="Color.Primary" 
                                     FullWidth="true" 
                                     Size="Size.Large">
                                Log in
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<MudText Class="mt-4">
    Don't have access to your authenticator device? You can
    <MudLink Href="@($"Account/LoginWithRecoveryCode?ReturnUrl={ReturnUrl}")" Color="Color.Primary">log in with a recovery code</MudLink>.
</MudText>

@code {
    private string? message;
    private User user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}



