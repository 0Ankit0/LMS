@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities


@inject IdentityRedirectManager RedirectManager
@inject UserManager<User> UserManager

<PageTitle>Reset password</PageTitle>

<MudText Typo="Typo.h4" Class="mb-2">Reset password</MudText>
<MudText Typo="Typo.h6" Class="mb-4">Reset your password.</MudText>
<MudDivider />
<MudGrid>
    <MudItem xs="12" md="4">
        <MudCard>
            <MudCardContent>
                <StatusMessage Message="@Message" />
                <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <input type="hidden" name="Input.Code" value="@Input.Code" />
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Input.Email" 
                                        Label="Email" 
                                        Variant="Variant.Outlined" 
                                        InputType="InputType.Email"
                                        AutoComplete="username"
                                        For="@(() => Input.Email)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Input.Password" 
                                        Label="Password" 
                                        Variant="Variant.Outlined" 
                                        InputType="InputType.Password"
                                        AutoComplete="new-password"
                                        For="@(() => Input.Password)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Input.ConfirmPassword" 
                                        Label="Confirm password" 
                                        Variant="Variant.Outlined" 
                                        InputType="InputType.Password"
                                        AutoComplete="new-password"
                                        For="@(() => Input.ConfirmPassword)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton ButtonType="ButtonType.Submit" 
                                     Variant="Variant.Filled" 
                                     Color="Color.Primary" 
                                     FullWidth="true" 
                                     Size="Size.Large">
                                Reset
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}



