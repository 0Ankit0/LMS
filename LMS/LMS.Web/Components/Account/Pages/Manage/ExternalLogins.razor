@page "/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity


@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<User> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage your external logins</PageTitle>

<StatusMessage />
@if (currentLogins?.Count > 0)
{
    <MudText Typo="Typo.h5" Class="mb-4">Registered Logins</MudText>
    <MudTable Items="currentLogins" Class="mb-6">
        <HeaderContent>
            <MudTh>Provider</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="login">
            <MudTd>@login.ProviderDisplayName</MudTd>
            <MudTd>
                @if (showRemoveButton)
                {
                    <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                        <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                        <MudButton ButtonType="ButtonType.Submit" 
                                 Variant="Variant.Filled" 
                                 Color="Color.Error" 
                                 Size="Size.Small">
                            Remove
                        </MudButton>
                    </form>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}
@if (otherLogins?.Count > 0)
{
    <MudText Typo="Typo.h6" Class="mb-4">Add another service to log in.</MudText>
    <MudDivider />
    <MudCard Class="mt-4">
        <MudCardContent>
            <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
                <AntiforgeryToken />
                <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap">
                    @foreach (var provider in otherLogins)
                    {
                        <MudButton ButtonType="ButtonType.Submit" 
                                 Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 name="Provider" 
                                 value="@provider.Name">
                            @provider.DisplayName
                        </MudButton>
                    }
                </MudStack>
            </form>
        </MudCardContent>
    </MudCard>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private User user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<User> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }
}



