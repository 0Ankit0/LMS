@page "/admin/lessons/create"
@page "/admin/lessons/edit/{id:int}"
@layout AdminLayout

@inject ICourseRepository CourseRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>@(IsEdit ? "Edit Lesson - Admin" : "Create Lesson - Admin")</PageTitle>

@if (isLoading)
{
    <MudStack Direction="Row" Spacing="2" Class="mb-4">
        <MudSkeleton SkeletonType="SkeletonType.Text" Width="200px" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="180px" Height="40px" />
    </MudStack>
    <MudCard Elevation="2">
        <MudCardHeader>
            <MudSkeleton SkeletonType="SkeletonType.Text" Width="180px" Height="32px" />
        </MudCardHeader>
        <MudCardContent>
            <!-- Title -->
            <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="56px" />
            <!-- Description -->
            <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="56px" />
            <!-- Module Autocomplete -->
            <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="40px" />
            <!-- Lesson Type & Duration -->
            <MudStack Direction="Row" Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="40px" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="40px" />
                </MudItem>
            </MudStack>
            <!-- Content -->
            <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="80px" />
            <!-- Video & Document URL -->
            <MudStack Direction="Row" Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="40px" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="40px" />
                </MudItem>
            </MudStack>
            <!-- External URL & Order Index -->
            <MudStack Direction="Row" Spacing="2">
                <MudItem xs="12" md="6">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="40px" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSkeleton SkeletonType="SkeletonType.Text" Width="100%" Height="40px" />
                </MudItem>
            </MudStack>
            <!-- IsRequired Checkbox -->
            <MudSkeleton SkeletonType="SkeletonType.Text" Width="120px" Height="32px" />
            <!-- Buttons -->
            <MudStack Direction="Row" Spacing="2" Class="mt-3">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="180px" Height="40px" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="120px" Height="40px" />
            </MudStack>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudStack Direction="Row" Spacing="2" Class="mb-4">
        <MudText Typo="Typo.h4">@(IsEdit ? "Edit Lesson" : "Create New Lesson")</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/lessons">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
            Back to Lessons
        </MudButton>
    </MudStack>
    <MudCard Elevation="2">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Lesson Information</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (editContext != null)
            {
                <EditForm EditContext="@editContext" OnValidSubmit="SaveLesson">
                    <MudAlert Severity="Severity.Error" Class="my-3" Visible="@(hasSubmitAttempted && editContext != null && !editContext.Validate())">
                        <MudText>Please correct the errors below.</MudText>
                    </MudAlert>
                    <MudTextField @bind-Value="Lesson.Title" Label="Title" Variant="Variant.Text" Required="true" RequiredError="Title is required!" />
                    <MudTextField @bind-Value="Lesson.Description" Label="Description" Variant="Variant.Text" Lines="3" Placeholder="Enter lesson description" />
                    <MudAutocomplete T="int?" Value="Lesson.ModuleId" ValueChanged="@(v => Lesson.ModuleId = v ?? 0)" Label="Module" Variant="Variant.Text" Required="true" RequiredError="Module is required!" Placeholder="Search module..."
                        ToStringFunc="@(id => modules.FirstOrDefault(m => m.Value == id)?.Text ?? string.Empty)"
                        SearchFunc="SearchModules" />
                    <MudStack Direction="Row" Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudSelect T="int" @bind-Value="Lesson.Type" Label="Lesson Type" Variant="Variant.Text">
                                @foreach (var enumValue in Enum.GetValues(typeof(LessonType)).Cast<int>())
                                {
                                    <MudSelectItem T="int" Value="@enumValue">@((LessonType)enumValue)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudNumericField @bind-Value="EstimatedDurationMinutes" Label="Duration (minutes)" Variant="Variant.Text" Placeholder="30" />
                        </MudItem>
                    </MudStack>
                    <MudTextField @bind-Value="Lesson.Content" Label="Content" Variant="Variant.Text" Lines="5" Placeholder="Enter lesson content..." />
                    <MudStack Direction="Row" Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Lesson.VideoUrl" Label="Video URL" Variant="Variant.Text" Placeholder="https://example.com/video.mp4" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Lesson.DocumentUrl" Label="Document URL" Variant="Variant.Text" Placeholder="https://example.com/document.pdf" />
                        </MudItem>
                    </MudStack>
                    <MudStack Direction="Row" Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Lesson.ExternalUrl" Label="External URL" Variant="Variant.Text" Placeholder="https://external-resource.com" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudNumericField @bind-Value="Lesson.OrderIndex" Label="Order Index" Variant="Variant.Text" Placeholder="1" />
                        </MudItem>
                    </MudStack>
                    <MudCheckBox T="bool" @bind-Value="Lesson.IsRequired" Label="Is Required" Color="Color.Primary" />
                    <MudStack Direction="Row" Spacing="2">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                            @(IsEdit ? "Update Lesson" : "Create Lesson")
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/admin/lessons">Cancel</MudButton>
                    </MudStack>
                </EditForm>
            }
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery] public int? id { get; set; }
    [SupplyParameterFromForm]
    private CreateLessonRequest Lesson { get; set; } = new();
    private bool isSubmitting = false;
    private bool hasSubmitAttempted = false;
    private EditContext? editContext;
    private bool IsEdit => id.HasValue && id.Value > 0;
    private List<DropdownOption<int>> modules = new();
    private bool isLoading = true;

    // Helper property for binding EstimatedDuration as minutes
    private int EstimatedDurationMinutes
    {
        get => (int)Lesson.EstimatedDuration.TotalMinutes;
        set => Lesson.EstimatedDuration = TimeSpan.FromMinutes(value);
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Lesson);
        modules = (await DropdownRepository.GetModulesAsync()).Select(m => new DropdownOption<int>
        {
            Value = m.Value,
            Text = m.Text,
            Description = m.Description,
            IsDisabled = m.IsDisabled
        }).ToList();
        if (IsEdit)
        {
            var lesson = await CourseRepository.GetLessonByIdAsync(id.Value);
            if (lesson != null)
            {
                Lesson = new CreateLessonRequest
                {
                    Title = lesson.Title,
                    Description = lesson.Description,
                    Content = lesson.Content,
                    ModuleId = lesson.ModuleId ?? 0,
                    Type = lesson.Type == "Video" ? 1 : lesson.Type == "Interactive" ? 2 : 3,
                    VideoUrl = lesson.VideoUrl,
                    DocumentUrl = lesson.DocumentUrl,
                    ExternalUrl = lesson.ExternalUrl,
                    EstimatedDuration = lesson.EstimatedDuration.HasValue ? TimeSpan.FromMinutes(lesson.EstimatedDuration.Value) : TimeSpan.Zero,
                    OrderIndex = lesson.OrderIndex,
                    IsRequired = lesson.IsRequired
                };
                editContext = new EditContext(Lesson);
            }
            else
            {
                Snackbar.Add("Lesson not found.", Severity.Error);
                NavigationManager.NavigateTo("/admin/lessons");
                return;
            }
        }
        isLoading = false;
    }

    private async Task SaveLesson()
    {
        hasSubmitAttempted = true;
        if (editContext != null && !editContext.Validate())
        {
            isSubmitting = false;
            return;
        }
        if (isSubmitting) return;
        isSubmitting = true;
        try
        {
            if (IsEdit)
            {
                var result = await CourseRepository.UpdateLessonAsync(id.Value, Lesson);
                if (result != null)
                {
                    Snackbar.Add("Lesson updated successfully!", Severity.Success);
                    NavigationManager.NavigateTo("/admin/lessons");
                }
                else
                {
                    Snackbar.Add("Failed to update lesson. Please try again.", Severity.Error);
                }
            }
            else
            {
                var result = await CourseRepository.CreateLessonAsync(Lesson);
                if (result != null)
                {
                    Snackbar.Add("Lesson created successfully!", Severity.Success);
                    NavigationManager.NavigateTo("/admin/lessons");
                }
                else
                {
                    Snackbar.Add("Failed to create lesson. Please try again.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving lesson: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private Task<IEnumerable<int?>> SearchModules(string value, CancellationToken token)
    {
        IEnumerable<int?> result = string.IsNullOrWhiteSpace(value)
            ? modules.Select(m => (int?)m.Value)
            : modules.Where(m => m.Text.Contains(value, StringComparison.OrdinalIgnoreCase)).Select(m => (int?)m.Value);
        return Task.FromResult(result);
    }
}



