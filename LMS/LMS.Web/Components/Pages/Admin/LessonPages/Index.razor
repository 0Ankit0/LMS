@page "/admin/lessons"
@layout AdminLayout
@attribute [OutputCache(Duration = 60)]
@inject ILessonRepository LessonRepository
@inject ISnackbar Snackbar

<PageTitle>Lessons - Admin</PageTitle>
<title>Lessons - Admin</title>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Lessons</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/lessons/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Lesson
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        <MudTable T="LessonModel" ServerData="@LessonsDataProvider" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
            <HeaderContent>
                <MudTh><MudTableSortLabel T="LessonModel" SortBy="new Func<LessonModel, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LessonModel" SortBy="new Func<LessonModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LessonModel" SortBy="new Func<LessonModel, object>(x => x.ModuleId)">Module ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LessonModel" SortBy="new Func<LessonModel, object>(x => x.Type)">Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LessonModel" SortBy="new Func<LessonModel, object>(x => x.EstimatedDuration)">Duration</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LessonModel" SortBy="new Func<LessonModel, object>(x => x.OrderIndex)">Order</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LessonModel" SortBy="new Func<LessonModel, object>(x => x.IsRequired)">Required</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Module ID">@context.ModuleId</MudTd>
                <MudTd DataLabel="Type">
                    <MudChip T="string" Color="@GetTypeBadgeColor(context.Type)">@context.Type</MudChip>
                </MudTd>
                <MudTd DataLabel="Duration">@(context.EstimatedDuration?.ToString() ?? "N/A") minutes</MudTd>
                <MudTd DataLabel="Order">@context.OrderIndex</MudTd>
                <MudTd DataLabel="Required">
                    <MudChip T="bool" Color="@(context.IsRequired? Color.Primary: Color.Secondary)">
                        @(context.IsRequired ? "Yes" : "No")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButtonGroup>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href='@($"/admin/lessons/edit?id={context.Id}")'>
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Info" Href='@($"/admin/lessons/details?id={context.Id}")'>
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" /> Details
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                        </MudButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the lesson <strong>@lessonToDelete?.Title</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteLesson">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    private LessonModel? lessonToDelete;
    private bool _loading = false;

    private async Task<MudBlazor.TableData<LessonModel>> LessonsDataProvider(MudBlazor.TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        
        try
        {
            var pageNumber = state.Page < 1 ? 1 : state.Page;
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;
            var result = await LessonRepository.GetLessonsPaginatedAsync(new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize
            });
            var data = result.Items ?? new List<LessonModel>();
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;
            
            return new MudBlazor.TableData<LessonModel>
            {
                Items = data,
                TotalItems = totalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading lessons: {ex.Message}", Severity.Error);
            return new MudBlazor.TableData<LessonModel>
            {
                Items = Enumerable.Empty<LessonModel>(),
                TotalItems = 0
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private MudBlazor.Color GetTypeBadgeColor(string? type)
    {
        return type switch
        {
            "Video" => MudBlazor.Color.Primary,
            "Interactive" => MudBlazor.Color.Success,
            "Assignment" => MudBlazor.Color.Warning,
            "Quiz" => MudBlazor.Color.Info,
            _ => MudBlazor.Color.Secondary
        };
    }

    private async Task ConfirmDelete(LessonModel lesson)
    {
        lessonToDelete = lesson;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        lessonToDelete = null;
    }

    private async Task DeleteLesson()
    {
        if (lessonToDelete != null)
        {
            try
            {
                await LessonRepository.DeleteLessonAsync(lessonToDelete.Id);
                Snackbar.Add($"Lesson '{lessonToDelete.Title}' deleted successfully.", Severity.Success);
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting lesson: {ex.Message}", Severity.Error);
            }
            finally
            {
                lessonToDelete = null;
                showDeleteConfirm = false;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}
