@page "/admin/tags/create"
@page "/admin/tags/edit/{id:int}"

@layout AdminLayout

@inject ITagRepository TagRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>@(IsEdit ? "Edit Tag" : "Create Tag") - Admin</PageTitle>

<MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
    <MudText Typo="Typo.h4">@(IsEdit ? "Edit Tag" : "Create New Tag")</MudText>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/tags">
        <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
        Back to Tags
    </MudButton>
</MudStack>

<MudGrid>
    <MudItem xs="12" lg="8">
        <MudCard Elevation="2">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Tag Information</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (editContext != null)
                {
                    <EditForm EditContext="@editContext" OnValidSubmit="SaveTag">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <MudGrid>
                            <MudItem xs="12" md="8">
                                <MudTextField @bind-Value="Tag.Name" Label="Name" Variant="Variant.Text" Required="true" RequiredError="Name is required!" Placeholder="Enter tag name" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField @bind-Value="Tag.Color" Label="Color" Variant="Variant.Text" InputType="InputType.Color" />
                            </MudItem>
                        </MudGrid>
                        <MudStack direction="Row" Spacing="2">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                                @(IsEdit ? "Update Tag" : "Create Tag")
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/admin/tags">Cancel</MudButton>
                        </MudStack>
                    </EditForm>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    [SupplyParameterFromQuery] public int? id { get; set; }
    private CreateTagRequest Tag { get; set; } = new();
    private bool isSubmitting = false;
    private bool IsEdit => id.HasValue && id > 0;
    private EditContext? editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Tag);
        if (IsEdit)
        {
            var tagId = id ?? 0;
            try
            {
                var existingTag = await TagRepository.GetTagByIdAsync(tagId);
                if (existingTag != null)
                {
                    Tag = new CreateTagRequest
                    {
                        Name = existingTag.Name,
                        Color = existingTag.Color
                    };
                    editContext = new EditContext(Tag);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading tag: {ex.Message}", Severity.Error);
                NavigationManager.NavigateTo("/admin/tags");
                return;
            }
        }
    }

    private async Task SaveTag()
    {
        if (isSubmitting) return;
        isSubmitting = true;
        try
        {
            if (IsEdit)
            {
                var tagId = id ?? 0;
                await TagRepository.UpdateTagAsync(tagId, Tag);
                Snackbar.Add("Tag updated successfully!", Severity.Success);
            }
            else
            {
                var result = await TagRepository.CreateTagAsync(Tag);
                if (result != null)
                {
                    Snackbar.Add("Tag created successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to create tag. Please try again.", Severity.Error);
                    return;
                }
            }
            NavigationManager.NavigateTo("/admin/tags");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving tag: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}



