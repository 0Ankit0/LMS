@page "/admin/enrollments/create"
@page "/admin/enrollments/edit/{id:int}"
@rendermode @(new InteractiveServerRenderMode())
@using MudBlazor
@using LMS.Repositories
@inject IDropdownRepository DropdownRepository
@inject IEnrollmentRepository EnrollmentRepository
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>@(IsEdit ? "Edit Enrollment" : "Create Enrollment") - Admin</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <MudSkeleton SkeletonType="SkeletonType.Text" Width="200px" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="180px" Height="40px" />
    </div>
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" />
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0">@(IsEdit ? "Edit Enrollment" : "Create New Enrollment")</h1>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/enrollments">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
            Back to Enrollments
        </MudButton>
    </div>
    <MudCard Elevation="2">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Enrollment Information</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="Enrollment" OnValidSubmit="SaveEnrollment">
                <MudAlert Severity="Severity.Error" Class="mb-3" >
                    <MudText>Please correct the errors below.</MudText>
                </MudAlert>
                <MudAutocomplete T="string" @bind-Value="Enrollment.UserId" Label="User" Variant="Variant.Text" Required="true" RequiredError="User is required!" Placeholder="Search user..."
                    ToStringFunc="@(id => Users.FirstOrDefault(u => u.Value == id)?.Text ?? string.Empty)"
                    SearchFunc="SearchUsers" Disabled="@IsEdit" />
                <MudAutocomplete T="int?" Value="Enrollment.CourseId" ValueChanged="@(v => Enrollment.CourseId = v ?? 0)" Label="Course" Variant="Variant.Text" Required="true" RequiredError="Course is required!" Placeholder="Search course..."
                    ToStringFunc="@(id => Courses.FirstOrDefault(c => c.Value == id)?.Text ?? string.Empty)"
                    SearchFunc="SearchCourses" Disabled="@IsEdit" />
                @if (IsEdit)
                {
                    <MudSelect @bind-Value="EnrollmentStatusValue" Label="Status" Variant="Variant.Text">
                        @foreach (var status in Enum.GetNames(typeof(EnrollmentStatusEnum)))
                        {
                            <MudSelectItem Value="@status">@status</MudSelectItem>
                        }
                    </MudSelect>
                }
                <div class="d-flex gap-2">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                        @(IsEdit ? "Update Enrollment" : "Create Enrollment")
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/admin/enrollments">Cancel</MudButton>
                </div>
            </EditForm>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery] public int? id { get; set; }
    private CreateEnrollmentRequest Enrollment { get; set; } = new();
    private bool isSubmitting = false;
    private bool isLoading = true;
    private bool IsEdit => ( id) > 0;
    private List<DropdownOption<string>> Users = new();
    private List<DropdownOption<int>> Courses = new();
    private string EnrollmentStatusValue { get; set; } = "Active";

    protected override async Task OnInitializedAsync()
    {
        Users = await DropdownRepository.GetUsersAsync();
        Courses = await DropdownRepository.GetCoursesAsync();
        if (IsEdit)
        {
            var enrollment = await EnrollmentRepository.GetEnrollmentByIdAsync(id.Value);
            if (enrollment != null)
            {
                Enrollment = new CreateEnrollmentRequest
                {
                    UserId = enrollment.UserId,
                    CourseId = enrollment.CourseId
                };
                EnrollmentStatusValue = enrollment.Status;
            }
            else
            {
                Snackbar.Add("Enrollment not found.", Severity.Error);
                NavigationManager.NavigateTo("/admin/enrollments");
                return;
            }
        }
        await Task.Delay(500); // Simulate data loading
        isLoading = false;
    }

    private async Task SaveEnrollment()
    {
        if (isSubmitting) return;
        isSubmitting = true;
        try
        {
            if (IsEdit)
            {
                await EnrollmentRepository.UpdateEnrollmentStatusAsync(id.Value, EnrollmentStatusValue);
                Snackbar.Add("Enrollment updated successfully!", Severity.Success);
            }
            else
            {
                var result = await EnrollmentRepository.CreateEnrollmentAsync(Enrollment.UserId, Enrollment);
                if (result != null)
                {
                    Snackbar.Add("Enrollment created successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to create enrollment. Please try again.", Severity.Error);
                    return;
                }
            }
            NavigationManager.NavigateTo("/admin/enrollments");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving enrollment: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private Task<IEnumerable<int?>> SearchCourses(string value, CancellationToken token)
    {
        IEnumerable<int?> result = string.IsNullOrWhiteSpace(value)
            ? Courses.Select(c => (int?)c.Value)
            : Courses.Where(c => c.Text.Contains(value, StringComparison.OrdinalIgnoreCase)).Select(c => (int?)c.Value);
        return Task.FromResult(result);
    }
    private Task<IEnumerable<string>> SearchUsers(string value, CancellationToken token)
    {
        IEnumerable<string> result = string.IsNullOrWhiteSpace(value)
            ? Users.Select(u => u.Value)
            : Users.Where(u => u.Text.Contains(value, StringComparison.OrdinalIgnoreCase)).Select(u => u.Value);
        return Task.FromResult(result);
    }
    public enum EnrollmentStatusEnum { Active, Completed, Dropped }
}