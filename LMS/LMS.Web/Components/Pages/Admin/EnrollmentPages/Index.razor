@page "/admin/enrollments"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@inject IEnrollmentRepository EnrollmentRepository
@inject ISnackbar Snackbar

<PageTitle>Enrollments - Admin</PageTitle>
<title>Enrollments - Admin</title>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Enrollments</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/enrollments/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Enrollment
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        <MudTable T="EnrollmentModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
            <HeaderContent>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.UserId)">User ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.UserName)">User Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.CourseId)">Course ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.CourseTitle)">Course Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.EnrolledAt)">Enrolled</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.ProgressPercentage)">Progress %</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="EnrollmentModel" SortBy="new Func<EnrollmentModel, object>(x => x.FinalGrade)">Final Grade</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="User ID">@context.UserId</MudTd>
                <MudTd DataLabel="User Name">@context.UserName</MudTd>
                <MudTd DataLabel="Course ID">@context.CourseId</MudTd>
                <MudTd DataLabel="Course Title">@context.CourseTitle</MudTd>
                <MudTd DataLabel="Enrolled">@context.EnrolledAt.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="string" Color="@GetStatusBadgeColor(context.Status)">@context.Status</MudChip>
                </MudTd>
                <MudTd DataLabel="Progress %">
                    <div class="d-flex align-items-center">
                        <div class="me-2" style="width: 60px;">
                            <MudProgressLinear Value="(int)context.ProgressPercentage" Color="Color.Primary" />
                        </div>
                        <span>@(context.ProgressPercentage.ToString("F1"))%</span>
                    </div>
                </MudTd>
                <MudTd DataLabel="Final Grade">
                    @(context.FinalGrade?.ToString("F1") ?? "N/A")
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButtonGroup>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href='@($"/admin/enrollments/edit?id={context.Id}")'>
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Info" Href='@($"/admin/enrollments/details?id={context.Id}")'>
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" /> Details
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                        </MudButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the enrollment for <strong>@enrollmentToDelete?.UserName</strong> in <strong>@enrollmentToDelete?.CourseTitle</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteEnrollment">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private EnrollmentModel? enrollmentToDelete;
    private bool _loading = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    private async Task<TableData<EnrollmentModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        
        try
        {
            var pageNumber = state.Page < 1 ? 1 : state.Page;
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;
            var paginationRequest = new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize
            };
            var result = await EnrollmentRepository.GetEnrollmentsPaginatedAsync(paginationRequest);
            var data = result?.Items ?? new List<EnrollmentModel>();
            var totalCount = result?.TotalCount ?? data.Count;
            
            return new TableData<EnrollmentModel>
            {
                Items = data,
                TotalItems = totalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading enrollments: {ex.Message}", Severity.Error);
            var dummy = new List<EnrollmentModel>();
            return new TableData<EnrollmentModel>
            {
                Items = dummy,
                TotalItems = dummy.Count
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ConfirmDelete(EnrollmentModel enrollment)
    {
        enrollmentToDelete = enrollment;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        enrollmentToDelete = null;
    }

    private async Task DeleteEnrollment()
    {
        if (enrollmentToDelete != null)
        {
            try
            {
                await EnrollmentRepository.DeleteEnrollmentAsync(enrollmentToDelete.Id);
                Snackbar.Add($"Enrollment for '{enrollmentToDelete.UserName}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                enrollmentToDelete = null;
                // Refresh the table after deletion
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting enrollment: {ex.Message}", Severity.Error);
            }
        }
    }

    private MudBlazor.Color GetStatusBadgeColor(string? status)
    {
        return status?.ToLower() switch
        {
            "active" => MudBlazor.Color.Success,
            "completed" => MudBlazor.Color.Info,
            "dropped" => MudBlazor.Color.Error,
            _ => MudBlazor.Color.Secondary
        };
    }
}