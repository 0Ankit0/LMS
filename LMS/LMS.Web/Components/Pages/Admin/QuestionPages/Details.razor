@page "/questions/details"
@rendermode @(new InteractiveServerRenderMode())
@using LMS.Data.Entities
@inject IAssessmentRepository AssessmentRepository
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Details</MudText>

<MudStack Spacing="2" Class="mb-4">
    <MudText Typo="Typo.h5">Question</MudText>
    <MudDivider />
</MudStack>
@if (isLoading)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
}
else if (question is not null)
{
    <MudCard Elevation="2">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Question Details</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Text</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.Text</MudText>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Assessment ID</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.AssessmentId</MudText>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Type</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.Type</MudText>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Points</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.Points</MudText>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Order Index</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.OrderIndex</MudText>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Explanation</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.Explanation</MudText>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Is Required</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.IsRequired</MudText>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudText Typo="Typo.subtitle2">Created At</MudText>
                </MudItem>
                <MudItem xs="12" sm="9">
                    <MudText>@question.CreatedAt</MudText>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/admin/questions/edit?id={question.Id}")">Edit</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/questions">Back to List</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    <MudText>Question not found.</MudText>
}

@code {
    private QuestionModel? question;
    private bool isLoading = true;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allQuestions = await AssessmentRepository.GetAllQuestionsAsync();
            question = allQuestions.FirstOrDefault(q => q.Id == Id);
            if (question is null)
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
        finally
        {
            isLoading = false;
        }
    }
}



