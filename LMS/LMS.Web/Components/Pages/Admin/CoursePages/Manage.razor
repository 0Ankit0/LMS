@page "/admin/courses/manage/{id:int}"
@layout AdminLayout
@inject ICourseRepository CourseRepository
@inject IModuleRepository ModuleRepository
@inject ILessonRepository LessonRepository
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@if (isLoading)
{
    <MudStack Row Justify="Justify.SpaceBetween" Class="align-items-center mb-4">
        <MudSkeleton SkeletonType="SkeletonType.Text" Width="300px" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="180px" Height="40px" />
    </MudStack>

    <MudGrid Spacing="4">
        <MudItem xs="12" md="4">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        </MudItem>
        <MudItem xs="12" md="8">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        </MudItem>
    </MudGrid>
}
else if (course != null)
{
    <MudStack Row AlignItems="AlignItems.Center" JustifyContent="Justify.SpaceBetween" Class="mb-6">
        <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-gray-100">Manage Course: @course.Title</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/courses">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="mr-2" />
            Back to Courses
        </MudButton>
    </MudStack>

    <MudGrid Spacing="4">
        <MudItem xs="12" md="4">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Add New Module</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <EditForm Model="newModule" OnValidSubmit="AddModule">
                        <MudAlert Severity="Severity.Error" Class="mb-3" >
                            <MudText>Please correct the errors below.</MudText>
                        </MudAlert>
                        <MudTextField @bind-Value="newModule.Title" Label="Title" Variant="Variant.Text" />
                        <MudTextField @bind-Value="newModule.Description" Label="Description" Variant="Variant.Text" Lines="3" />
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add Module</MudButton>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="8">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Modules</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (course.Modules.Any())
                    {
                        <MudExpansionPanels>
                            @foreach (var module in course.Modules)
                            {
                                <MudExpansionPanel Text="@module.Title">
                                    <MudText Typo="Typo.subtitle1" Class="mb-2">Lessons</MudText>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="() => ShowAddLessonModal(module.Id)">
                                        <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-1" /> Add Lesson
                                    </MudButton>
                                    <MudList T="LessonModel">
                                        @foreach (var lesson in module.Lessons)
                                        {
                                            <MudListItem T="LessonModel" Value="@lesson">@lesson.Title</MudListItem>
                                        }
                                    </MudList>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>
                    }
                    else
                    {
                        <MudText>No modules have been added to this course yet.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Warning" Class="my-4">Course not found.</MudAlert>
}

<MudDialog @bind-Visible="@showAddLessonModal" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Add New Lesson</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="newLesson" OnValidSubmit="AddLesson" >
            <MudAlert Severity="Severity.Error" Class="mb-3" >
                <MudText>Please correct the errors below.</MudText>
            </MudAlert>
            <MudTextField @bind-Value="newLesson.Title" Label="Title" Variant="Variant.Text" />
            <MudTextField @bind-Value="newLesson.Description" Label="Description" Variant="Variant.Text" Lines="3" />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add Lesson</MudButton>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name ="id")]
    public int Id { get; set; }

    private CourseModel? course;
    private CreateModuleRequest newModule = new();
    private CreateLessonRequest newLesson = new();
    private bool showAddLessonModal;
    private DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private int selectedModuleId;
    private bool isLoading = true;
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Try to get course from server
            course = await CourseRepository.GetCourseByIdAsync(Id);

            if (course == null)
            {
                // Course not found, redirect or show error
                Snackbar.Add("Course not found", Severity.Error);
                NavigationManager.NavigateTo("/admin/courses");
                return;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddModule()
    {
        newModule.CourseId = Id;
        var result = await ModuleRepository.CreateModuleAsync(newModule);
        if (result != null)
        {
            course = await CourseRepository.GetCourseByIdAsync(Id) ?? course;
            newModule = new();
            Snackbar.Add("Module created successfully!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to create module. Please try again.", Severity.Error);
        }
    }

    private void ShowAddLessonModal(int moduleId)
    {
        selectedModuleId = moduleId;
        showAddLessonModal = true;
    }

    private async Task AddLesson()
    {
        newLesson.ModuleId = selectedModuleId;
        var result = await LessonRepository.CreateLessonAsync(newLesson);
        if (result != null)
        {
            course = await CourseRepository.GetCourseByIdAsync(Id) ?? course;
            newLesson = new();
            showAddLessonModal = false;
            Snackbar.Add("Lesson created successfully!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to create lesson. Please try again.", Severity.Error);
        }
    }
}


