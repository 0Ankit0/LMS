@page "/admin/courses"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())
@using LMS.Repositories
@inject ICourseRepository CourseRepository
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Courses - Admin</PageTitle>
<title>Courses - Admin</title>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Courses</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/courses/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Course
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        <MudTable T="CourseModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
            <HeaderContent>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Level)">Level</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.MaxEnrollments)">Max Enrollments</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.StartDate)">Start Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.EndDate)">End Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.InstructorName)">Instructor</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(context.ThumbnailUrl))
                        {
                            <img src="@context.ThumbnailUrl" alt="@context.Title" style="width: 32px; height: 32px; object-fit: cover; border-radius: 4px; margin-right: 8px;" />
                        }
                        else if (!string.IsNullOrEmpty(context.IconName))
                        {
                            <MudIcon Icon="@context.IconName" Class="me-2" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.School" Class="me-2" />
                        }
                        <div>
                            <MudText Typo="Typo.body1">@context.Title</MudText>
                            @if (context.EstimatedDuration.HasValue && context.EstimatedDuration > 0)
                            {
                                <MudText Typo="Typo.caption" Class="text-muted">@(context.EstimatedDuration/60)h duration</MudText>
                            }
                        </div>
                    </div>
                </MudTd>
                <MudTd DataLabel="Description">
                    <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        @context.Description
                    </div>
                </MudTd>
                <MudTd DataLabel="Level">
                    <MudChip T="string" Color="@GetLevelBadgeColor(context.Level)" Size="Size.Small">@context.Level</MudChip>
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="string" Color="@GetStatusBadgeColor(context.Status)" Size="Size.Small">@context.Status</MudChip>
                </MudTd>
                <MudTd DataLabel="Max Enrollments">@context.MaxEnrollments</MudTd>
                <MudTd DataLabel="Start Date">@(context.StartDate?.ToString("MMM dd, yyyy") ?? "N/A")</MudTd>
                <MudTd DataLabel="End Date">@(context.EndDate?.ToString("MMM dd, yyyy") ?? "N/A")</MudTd>
                <MudTd DataLabel="Instructor">@context.InstructorName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButtonGroup>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"/admin/courses/edit?id={context.Id}")">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" Href="@($"/admin/courses/manage?id={context.Id}")">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-1" /> Manage
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                        </MudButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-Visible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the course <strong>@courseToDelete?.Title</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteCourse">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private CourseModel? courseToDelete;
    private bool _loading = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    private async Task<TableData<CourseModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        
        try
        {
            var pageNumber = state.Page + 1; // Convert from 0-based to 1-based indexing
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;
            var paginationRequest = new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize
            };
            var result = await CourseRepository.GetCoursesPaginatedAsync(paginationRequest);

            var data = result.Items ?? new List<CourseModel>();
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;

            return new TableData<CourseModel>
            {
                Items = data,
                TotalItems = totalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading courses: {ex.Message}", Severity.Error);
            var empty = new List<CourseModel>();
            return new TableData<CourseModel>
            {
                Items = empty,
                TotalItems = empty.Count()
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ConfirmDelete(CourseModel course)
    {
        courseToDelete = course;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        courseToDelete = null;
    }

    private async Task DeleteCourse()
    {
        if (courseToDelete != null)
        {
            try
            {
                await CourseRepository.DeleteCourseAsync(courseToDelete.Id);
                Snackbar.Add($"Course '{courseToDelete.Title}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                courseToDelete = null;
                // Refresh the table
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting course: {ex.Message}", Severity.Error);
            }
        }
    }

    private Color GetLevelBadgeColor(string level)
    {
        return level switch
        {
            "Beginner" => Color.Success,
            "Intermediate" => Color.Warning,
            "Advanced" => Color.Error,
            _ => Color.Default
        };
    }

    private Color GetStatusBadgeColor(string status)
    {
        return status switch
        {
            "Published" => Color.Success,
            "Draft" => Color.Warning,
            "Archived" => Color.Secondary,
            _ => Color.Default
        };
    }
}


