@page "/admin/courses"
@attribute [OutputCache(Duration = 60)]
@rendermode InteractiveServer
@using LMS.Repositories
@inject ICourseRepository CourseRepository
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Courses - Admin</PageTitle>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Courses</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/courses/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Course
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        @if (_loading)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        }
        else
        {
            <MudTable T="CourseModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                <HeaderContent>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Level)">Level</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.MaxEnrollments)">Max Enrollments</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.StartDate)">Start Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.EndDate)">End Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CourseModel" SortBy="new Func<CourseModel, object>(x => x.InstructorName)">Instructor</MudTableSortLabel></MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Level">@context.Level</MudTd>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                    <MudTd DataLabel="Max Enrollments">@context.MaxEnrollments</MudTd>
                    <MudTd DataLabel="Start Date">@context.StartDate.ToString("yyyy-MM-dd")</MudTd>
                    <MudTd DataLabel="End Date">@(context.EndDate?.ToString("yyyy-MM-dd") ?? "N/A")</MudTd>
                    <MudTd DataLabel="Instructor">@context.InstructorName</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButtonGroup>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"/admin/courses/edit?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" Href="@($"/admin/courses/manage?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-1" /> Manage
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" Href="@($"/admin/courses/details?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" /> Details
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                            </MudButton>
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the course <strong>@courseToDelete?.Title</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteCourse">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private CourseModel? courseToDelete;
    private bool _loading = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    private async Task<TableData<CourseModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();

        try
        {
            var paginationRequest = new PaginationRequest
            {
                PageNumber = state.Page,
                PageSize = state.PageSize,
                // Sorting logic commented out
                // SortColumn = state.SortLabel,
                // SortDirection = state.SortDirection == MudBlazor.SortDirection.Ascending ? "asc" : "desc"
            };

            var result = await CourseRepository.GetCoursesPaginatedAsync(paginationRequest);

            var data = (result.Items == null || !result.Items.Any()) ? AddDummyCourses() : result.Items;
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;

            _loading = false;
            return new TableData<CourseModel>
            {
                Items = data,
                TotalItems = totalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading courses: {ex.Message}", Severity.Error);
            var dummy = AddDummyCourses();
            _loading = false;
            return new TableData<CourseModel>
            {
                Items = dummy,
                TotalItems = dummy.Count()
            };
        }
    }

    private List<CourseModel> AddDummyCourses()
    {
        return new List<CourseModel>
        {
            new CourseModel
            {
                Id = 1,
                Title = "Introduction to Programming",
                Description = "Learn the basics of programming",
                Level = "Beginner",
                Status = "Published",
                MaxEnrollments = 100,
                StartDate = DateTime.Now.AddDays(7),
                EndDate = DateTime.Now.AddDays(67),
                InstructorName = "John Doe"
            },
            new CourseModel
            {
                Id = 2,
                Title = "Modern Web Development",
                Description = "Master modern web development techniques",
                Level = "Advanced",
                Status = "Published",
                MaxEnrollments = 50,
                StartDate = DateTime.Now.AddDays(14),
                EndDate = DateTime.Now.AddDays(104),
                InstructorName = "Jane Smith"
            },
            new CourseModel
            {
                Id = 3,
                Title = "Data Science Essentials",
                Description = "An introduction to data science and analytics",
                Level = "Intermediate",
                Status = "Draft",
                MaxEnrollments = 75,
                StartDate = DateTime.Now.AddDays(21),
                EndDate = DateTime.Now.AddDays(81),
                InstructorName = "Dr. Robert Johnson"
            }
        };
    }

    private void ConfirmDelete(CourseModel course)
    {
        courseToDelete = course;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        courseToDelete = null;
    }

    private async Task DeleteCourse()
    {
        if (courseToDelete != null)
        {
            try
            {
                await CourseRepository.DeleteCourseAsync(courseToDelete.Id);
                Snackbar.Add($"Course '{courseToDelete.Title}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                courseToDelete = null;
                // Refresh the table after deletion
                await ServerData(new TableState { Page = 0, PageSize = 10 }, CancellationToken.None);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting course: {ex.Message}", Severity.Error);
            }
        }
    }
}}