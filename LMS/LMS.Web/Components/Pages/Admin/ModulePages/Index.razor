@page "/admin/modules"
@layout AdminLayout
@attribute [OutputCache(Duration = 60)]
@inject IModuleRepository ModuleRepository
@inject ISnackbar Snackbar

<PageTitle>Modules - Admin</PageTitle>
<title>Modules - Admin</title>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Modules</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/modules/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Module
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        @if (_loading)
        {
            int columnCount = 8; // Number of columns in the table
            int rowCount = 3;
            <div class="mb-3">
                @for (int r = 0; r < rowCount; r++)
                {
                    <div class="row @(r > 0 ? "mt-2" : null)">
                        @for (int c = 0; c < columnCount; c++)
                        {
                            <div class="col"> <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="32px"  Width="20px"/> </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <MudTable T="ModuleModel" ServerData="@ModulesDataProvider" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                <HeaderContent>
                    <MudTh><MudTableSortLabel T="ModuleModel" SortBy="new Func<ModuleModel, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="ModuleModel" SortBy="new Func<ModuleModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="ModuleModel" SortBy="new Func<ModuleModel, object>(x => x.CourseId)">Course ID</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="ModuleModel" SortBy="new Func<ModuleModel, object>(x => x.OrderIndex)">Order</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="ModuleModel" SortBy="new Func<ModuleModel, object>(x => x.IsRequired)">Required</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="ModuleModel" SortBy="new Func<ModuleModel, object>(x => x.IsActive)">Active</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="ModuleModel" SortBy="new Func<ModuleModel, object>(x => x.Lessons.Count)">Lessons</MudTableSortLabel></MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Course ID">@context.CourseId</MudTd>
                    <MudTd DataLabel="Order">@context.OrderIndex</MudTd>
                    <MudTd DataLabel="Required">
                        <MudChip T="bool" Color="@(context.IsRequired? Color.Primary: Color.Secondary)">
                            @(context.IsRequired ? "Yes" : "No")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Active">
                        <MudChip T="bool" Color="@(context.IsActive? Color.Success: Color.Secondary)">
                            @(context.IsActive ? "Yes" : "No")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Lessons">@context.Lessons.Count</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButtonGroup>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href='@($"/admin/modules/edit?id={context.Id}")'>
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" Href='@($"/admin/modules/details?id={context.Id}")'>
                                <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" /> Details
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                            </MudButton>
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the module <strong>@moduleToDelete?.Title</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteModule">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _loading = false;
    private bool showDeleteConfirm = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    private ModuleModel? moduleToDelete;

    private async Task<MudBlazor.TableData<ModuleModel>> ModulesDataProvider(MudBlazor.TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var pageNumber = state.Page + 1; // Convert from 0-based to 1-based indexing
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;
            var result = await ModuleRepository.GetModulesPaginatedAsync(new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize
            });
            var data = (result.Items == null || !result.Items.Any()) ? AddDummyModules() : result.Items;
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;
            _loading = false;
            return new MudBlazor.TableData<ModuleModel>
            {
                Items = data,
                TotalItems = totalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading modules: {ex.Message}", Severity.Error);
            _loading = false;
            return new MudBlazor.TableData<ModuleModel>
            {
                Items = Enumerable.Empty<ModuleModel>(),
                TotalItems = 0
            };
        }
    }

    private List<ModuleModel> AddDummyModules()
    {
        return new List<ModuleModel>
        {
            new ModuleModel
            {
                Id = 1,
                Title = "Introduction to Programming Fundamentals",
                Description = "Basic programming concepts and principles",
                CourseId = 1,
                OrderIndex = 1,
                IsRequired = true,
                IsActive = true,
                Lessons = new List<LessonModel>()
            },
            new ModuleModel
            {
                Id = 2,
                Title = "Data Structures and Algorithms",
                Description = "Learn about common data structures and algorithms",
                CourseId = 1,
                OrderIndex = 2,
                IsRequired = true,
                IsActive = true,
                Lessons = new List<LessonModel>()
            },
            new ModuleModel
            {
                Id = 3,
                Title = "Web Development Basics",
                Description = "HTML, CSS, and JavaScript fundamentals",
                CourseId = 2,
                OrderIndex = 1,
                IsRequired = false,
                IsActive = false,
                Lessons = new List<LessonModel>()
            }
        };
    }

    private async Task ConfirmDelete(ModuleModel module)
    {
        moduleToDelete = module;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        moduleToDelete = null;
    }

    private async Task DeleteModule()
    {
        if (moduleToDelete != null)
        {
            try
            {
                await ModuleRepository.DeleteModuleAsync(moduleToDelete.Id);
                Snackbar.Add($"Module '{moduleToDelete.Title}' deleted successfully.", Severity.Success);
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting module: {ex.Message}", Severity.Error);
            }
            finally
            {
                moduleToDelete = null;
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}
