@page "/admin/admissions"
@page "/admin/admissions/applications"
@page "/admin/admissions/applications/{applicationId:int}"
@using LMS.Data.DTOs.UserManagement
@using LMS.Repositories
@inject IUserRepository UserRepository
@inject IAdmissionsRepository AdmissionsRepository
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin,Instructor")]
@rendermode InteractiveServer

<PageTitle>Admissions Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="admissions-admin">
    <MudStack Spacing="4">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h4">Admissions Management</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Review and manage admission applications</MudText>
        </MudStack>

    @if (ApplicationId.HasValue)
    {
        <!-- Application Detail View -->
        @if (selectedApplication != null)
        {
            <div class="application-detail">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="BackToApplications">
                        Back to Applications
                    </MudButton>
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                        <MudText Typo="Typo.h4">Application #@selectedApplication.Id</MudText>
                        <MudChip T="string" Color="@GetStatusColor(selectedApplication.Status)" Variant="Variant.Filled">
                            @selectedApplication.Status
                        </MudChip>
                    </MudStack>
                </MudStack>

                <div class="application-sections">
                    <!-- Personal Information -->
                    <div class="section">
                        <h3>Personal Information</h3>
                        <div class="info-grid">
                            <div class="info-item">
                                <strong>Name:</strong>
                                <span>@selectedApplication.FirstName @selectedApplication.LastName</span>
                            </div>
                            <div class="info-item">
                                <strong>Email:</strong>
                                <span>@selectedApplication.Email</span>
                            </div>
                            <div class="info-item">
                                <strong>Phone:</strong>
                                <span>@(selectedApplication.PhoneNumber ?? "Not provided")</span>
                            </div>
                            <div class="info-item">
                                <strong>Date of Birth:</strong>
                                <span>@selectedApplication.DateOfBirth?.ToString("MMMM dd, yyyy")</span>
                            </div>
                            <div class="info-item">
                                <strong>Gender:</strong>
                                <span>@(selectedApplication.Gender ?? "Not specified")</span>
                            </div>
                            <div class="info-item">
                                <strong>Address:</strong>
                                <span>@(selectedApplication.Address ?? "Not provided")</span>
                            </div>
                        </div>
                    </div>

                    <!-- Academic History -->
                    <div class="section">
                        <h3>Academic History</h3>
                        <div class="info-grid">
                            <div class="info-item">
                                <strong>Education Level:</strong>
                                <span>@selectedApplication.EducationLevel</span>
                            </div>
                            <div class="info-item">
                                <strong>Previous Institution:</strong>
                                <span>@(selectedApplication.PreviousInstitution ?? "Not provided")</span>
                            </div>
                            <div class="info-item">
                                <strong>Field of Study:</strong>
                                <span>@(selectedApplication.FieldOfStudy ?? "Not provided")</span>
                            </div>
                            <div class="info-item">
                                <strong>GPA:</strong>
                                <span>@(selectedApplication.GPA?.ToString("F2") ?? "Not provided")</span>
                            </div>
                            <div class="info-item">
                                <strong>Graduation Year:</strong>
                                <span>@(selectedApplication.GraduationYear?.ToString() ?? "Not provided")</span>
                            </div>
                        </div>
                    </div>

                    <!-- Program Selection -->
                    <div class="section">
                        <h3>Program Selection</h3>
                        <div class="info-grid">
                            <div class="info-item">
                                <strong>Preferred Program:</strong>
                                <span>@GetProgramName(selectedApplication.PreferredProgram)</span>
                            </div>
                            <div class="info-item">
                                <strong>Intended Start Date:</strong>
                                <span>@selectedApplication.IntendedStartDate</span>
                            </div>
                            <div class="info-item">
                                <strong>Study Mode:</strong>
                                <span>@selectedApplication.StudyMode</span>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedApplication.PersonalStatement))
                        {
                            <div class="personal-statement">
                                <strong>Personal Statement:</strong>
                                <div class="statement-content">@selectedApplication.PersonalStatement</div>
                            </div>
                        }
                    </div>

                    <!-- Review & Decision -->
                    <div class="section">
                        <h3>Review & Decision</h3>
                        <div class="review-form">
                            @if (selectedApplication.Status == "Submitted" || selectedApplication.Status == "UnderReview")
                            {
                                <MudCard Class="pa-4">
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6" Class="mb-4">Make Decision</MudText>
                                        <MudStack Spacing="4">
                                            <MudSelect T="string" @bind-Value="decisionStatus" Label="Decision" Variant="Variant.Outlined" Placeholder="Select Decision">
                                                <MudSelectItem T="string" Value="@("UnderReview")">Under Review</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Accepted")">Accept</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Rejected")">Reject</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Waitlisted")">Waitlist</MudSelectItem>
                                            </MudSelect>
                                            <MudTextField @bind-Value="reviewerNotes" Label="Reviewer Notes" Variant="Variant.Outlined" 
                                                    Lines="4" Placeholder="Add notes about your decision..." />
                                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitDecision" 
                                                    Disabled="@(string.IsNullOrEmpty(decisionStatus))">
                                                Submit Decision
                                            </MudButton>
                                        </MudStack>
                                    </MudCardContent>
                                </MudCard>
                            }
                            else
                            {
                                <MudCard Class="pa-4">
                                    <MudCardContent>
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                                            <MudText Typo="Typo.h6">Current Status:</MudText>
                                            <MudChip T="string" Color="@GetStatusColor(selectedApplication.Status)" Variant="Variant.Filled">
                                                @selectedApplication.Status
                                            </MudChip>
                                        </MudStack>
                                        @if (!string.IsNullOrEmpty(selectedApplication.ReviewerNotes))
                                        {
                                            <MudStack Spacing="2">
                                                <MudText Typo="Typo.subtitle1">Reviewer Notes:</MudText>
                                                <MudText Typo="Typo.body1">@selectedApplication.ReviewerNotes</MudText>
                                            </MudStack>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <!-- Applications List View -->
        <div class="applications-list">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudSelect T="string" @bind-Value="statusFilter" @bind-Value:after="FilterApplications" Label="Status Filter" Variant="Variant.Outlined" Placeholder="All Status">
                        <MudSelectItem T="string" Value="@("")">All Status</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Submitted")">Submitted</MudSelectItem>
                        <MudSelectItem T="string" Value="@("UnderReview")">Under Review</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Accepted")">Accepted</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Rejected")">Rejected</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Waitlisted")">Waitlisted</MudSelectItem>
                    </MudSelect>
                    <MudTextField @bind-Value="searchTerm" @bind-Value:after="FilterApplications" 
                                Label="Search" Placeholder="Search by name or email..." Variant="Variant.Outlined" />
                </MudStack>
                <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Success" OnClick="ExportApplications">
                    Export
                </MudButton>
            </MudStack>

            @if (filteredApplications?.Any() == true)
            {
                <MudPaper Class="applications-table">
                    <MudTable Items="@filteredApplications" T="AdmissionApplicationModel" Hover="true" RowClass="cursor-pointer">
                        <HeaderContent>
                            <MudTh>Application ID</MudTh>
                            <MudTh>Applicant Name</MudTh>
                            <MudTh>Email</MudTh>
                            <MudTh>Program</MudTh>
                            <MudTh>Submitted Date</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Application ID">@("#" + context.Id)</MudTd>
                            <MudTd DataLabel="Applicant Name">@context.FirstName @context.LastName</MudTd>
                            <MudTd DataLabel="Email">@context.Email</MudTd>
                            <MudTd DataLabel="Program">@GetProgramName(context.PreferredProgram)</MudTd>
                            <MudTd DataLabel="Submitted Date">@context.SubmittedAt?.ToString("MMM dd, yyyy")</MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip T="string" Color="@GetStatusColor(context.Status)">
                                    @context.Status
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudStack Row="true" Spacing="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" 
                                                   Color="Color.Primary" 
                                                   Size="Size.Small" 
                                                   OnClick="@(() => ViewApplication(context.Id))" />
                                    @if (context.Status == "Submitted")
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Assessment" 
                                                       Color="Color.Warning" 
                                                       Size="Size.Small" 
                                                       OnClick="@(() => QuickReview(context.Id))" />
                                    }
                                </MudStack>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            }
            else if (isLoading)
            {
                <MudPaper Class="loading-state p-4">
                    <MudText>Loading applications...</MudText>
                </MudPaper>
            }
            else
            {
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="empty-state">
                    <MudIcon Icon="fas fa-inbox" Size="Size.Large" Class="mb-4" />
                    <MudText Typo="Typo.h5">No Applications Found</MudText>
                    <MudText>No applications have been submitted yet.</MudText>
                </MudStack>
            }
        </div>
    }
    </MudStack>
</MudContainer>

@code {
    [Parameter] public int? ApplicationId { get; set; }

    private List<AdmissionApplicationModel>? allApplications;
    private List<AdmissionApplicationModel>? filteredApplications;
    private AdmissionApplicationModel? selectedApplication;
    private bool isLoading = true;
    
    // Filters
    private string statusFilter = "";
    private string searchTerm = "";
    
    // Decision form
    private string decisionStatus = "";
    private string reviewerNotes = "";

    // Real admission programs data would be loaded here
    private readonly List<ProgramModel> availablePrograms = new()
    {
        new() { Id = "CS", Name = "Computer Science" },
        new() { Id = "MBA", Name = "Master of Business Administration" },
        new() { Id = "ENG", Name = "Engineering" },
        new() { Id = "MATH", Name = "Mathematics" },
        new() { Id = "BIO", Name = "Biology" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadApplications();
        
        if (ApplicationId.HasValue)
        {
            await LoadApplicationDetail();
        }
        
        isLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ApplicationId.HasValue)
        {
            await LoadApplicationDetail();
        }
        else
        {
            selectedApplication = null;
        }
    }

    private async Task LoadApplications()
    {
        try
        {
            // Load applications from database
            await Task.Delay(1); // Placeholder for async operation
            allApplications = new List<AdmissionApplicationModel>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading applications: {ex.Message}");
        }
    }

    private async Task LoadApplicationDetail()
    {
        if (!ApplicationId.HasValue) return;

        try
        {
            await Task.Delay(200);
            selectedApplication = allApplications?.FirstOrDefault(a => a.Id == ApplicationId.Value);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading application detail: {ex.Message}");
        }
    }

    private void FilterApplications()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (allApplications == null) return;

        var filtered = allApplications.AsEnumerable();

        if (!string.IsNullOrEmpty(statusFilter))
        {
            filtered = filtered.Where(a => a.Status == statusFilter);
        }

        if (!string.IsNullOrEmpty(searchTerm))
        {
            var search = searchTerm.ToLower();
            filtered = filtered.Where(a => 
                a.FirstName.ToLower().Contains(search) ||
                a.LastName.ToLower().Contains(search) ||
                a.Email.ToLower().Contains(search));
        }

        filteredApplications = filtered.ToList();
    }

    private void ViewApplication(int applicationId)
    {
        Navigation.NavigateTo($"/admin/admissions/applications/{applicationId}");
    }

    private void BackToApplications()
    {
        Navigation.NavigateTo("/admin/admissions");
    }

    private void QuickReview(int applicationId)
    {
        try
        {
            var application = allApplications?.FirstOrDefault(a => a.Id == applicationId);
            if (application != null)
            {
                application.Status = "UnderReview";
                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating status: {ex.Message}");
        }
    }

    private void SubmitDecision()
    {
        if (string.IsNullOrEmpty(decisionStatus) || !ApplicationId.HasValue || selectedApplication == null) return;

        try
        {
            selectedApplication.Status = decisionStatus;
            selectedApplication.ReviewerNotes = reviewerNotes;
            
            // Reset form
            decisionStatus = "";
            reviewerNotes = "";
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting decision: {ex.Message}");
        }
    }

    private void ExportApplications()
    {
        try
        {
            // This would generate and download a CSV/Excel file
            Console.WriteLine("Export functionality would be implemented here");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting applications: {ex.Message}");
        }
    }

    private string GetProgramName(string? programId)
    {
        if (string.IsNullOrEmpty(programId))
            return "Not specified";
            
        var program = availablePrograms.FirstOrDefault(p => p.Id == programId);
        return program?.Name ?? "Unknown Program";
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Submitted" => "primary",
            "UnderReview" => "warning",
            "Accepted" => "success",
            "Rejected" => "danger",
            "Waitlisted" => "info",
            _ => "secondary"
        };
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Submitted" => Color.Primary,
            "UnderReview" => Color.Warning,
            "Accepted" => Color.Success,
            "Rejected" => Color.Error,
            "Waitlisted" => Color.Info,
            _ => Color.Default
        };
    }

    // Admission application management methods are connected to AdmissionsRepository
    // Note: Full data model implementation is pending - currently returns placeholder data

    // Helper classes
    public class AdmissionApplicationModel
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Email { get; set; } = "";
        public string? PhoneNumber { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public string? Gender { get; set; }
        public string? Address { get; set; }
        public string? EducationLevel { get; set; }
        public double? GPA { get; set; }
        public string? PreviousInstitution { get; set; }
        public string? FieldOfStudy { get; set; }
        public int? GraduationYear { get; set; }
        public string? PreferredProgram { get; set; }
        public string? IntendedStartDate { get; set; }
        public string StudyMode { get; set; } = "FullTime";
        public string? PersonalStatement { get; set; }
        public string Status { get; set; } = "Submitted";
        public DateTime? SubmittedAt { get; set; }
        public string? ReviewerNotes { get; set; }
    }

    public class ProgramModel
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
    }
}





