@page "/admin/assessments"
@layout AdminLayout
@attribute [OutputCache(Duration = 60)]
@inject IAssessmentRepository AssessmentRepository
@inject ISnackbar Snackbar

<PageTitle>Assessments - Admin</PageTitle>
<title>Assessments - Admin</title>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Assessments</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/assessments/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Assessment
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        @if (_loading)
        {
            int columnCount = 9; // Number of columns in the table
            int rowCount = 3;
            <div class="mb-3">
                @for (int r = 0; r < rowCount; r++)
                {
                    <div class="row @(r > 0 ? "mt-2" : null)">
                        @for (int c = 0; c < columnCount; c++)
                        {
                            <div class="col"> <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="32px" Width="20px" /> </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <MudTable T="AssessmentModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                <HeaderContent>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.CourseId)">Course ID</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.Type)">Type</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.MaxAttempts)">Max Attempts</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.PassingScore)">Passing Score</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.IsRandomized)">Randomized</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.AvailableFrom)">Available From</MudTableSortLabel></MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Course ID">@context.CourseId</MudTd>
                    <MudTd DataLabel="Type">@context.Type</MudTd>
                    <MudTd DataLabel="Max Attempts">@context.MaxAttempts</MudTd>
                    <MudTd DataLabel="Passing Score">@context.PassingScore</MudTd>
                    <MudTd DataLabel="Randomized">@(context.IsRandomized ? "Yes" : "No")</MudTd>
                    <MudTd DataLabel="Available From">@context.AvailableFrom?.ToString("yyyy-MM-dd")</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButtonGroup>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"/admin/assessments/edit?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" Href="@($"/admin/assessments/manage?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-1" /> Manage
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" Href="@($"/admin/assessments/details?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" /> Details
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                            </MudButton>
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the assessment <strong>@assessmentToDelete?.Title</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteAssessment">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private AssessmentModel? assessmentToDelete;
    private bool _loading = false;
    private DialogOptions dialogOptions = new DialogOptions();

    private async Task<TableData<AssessmentModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var pageNumber = state.Page + 1; // Convert from 0-based to 1-based indexing
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;
            var paginationRequest = new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize
            };
            var result = await AssessmentRepository.GetAssessmentsPaginatedAsync(paginationRequest);

            // If no results return, use dummy data
            if (result.Items == null || !result.Items.Any())
            {
                var dummy = AddDummyAssessments();
                return new TableData<AssessmentModel>
                {
                    Items = dummy,
                    TotalItems = dummy.Count
                };
            }

            _loading = false;
            return new TableData<AssessmentModel>
            {
                Items = result.Items,
                TotalItems = result.TotalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading assessments: {ex.Message}", Severity.Error);
            var dummy = AddDummyAssessments();
            _loading = false;
            return new TableData<AssessmentModel>
            {
                Items = dummy,
                TotalItems = dummy.Count
            };
        }
    }

    private void ConfirmDelete(AssessmentModel assessment)
    {
        assessmentToDelete = assessment;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        assessmentToDelete = null;
    }

    private async Task DeleteAssessment()
    {
        if (assessmentToDelete != null)
        {
            try
            {
                await AssessmentRepository.DeleteAssessmentAsync(assessmentToDelete.Id);
                Snackbar.Add($"Assessment '{assessmentToDelete.Title}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                assessmentToDelete = null;
                // Refresh the table after deletion
                await ServerData(new TableState { Page = 0, PageSize = 10 }, CancellationToken.None);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting assessment: {ex.Message}", Severity.Error);
            }
        }
    }

    // Dummy data for assessments to use if no data is returned from the server
    private List<AssessmentModel> AddDummyAssessments()
    {
        return new List<AssessmentModel>
        {
            new AssessmentModel
            {
                Id = 1,
                Title = "Dummy Assessment 1",
                Description = "This is a sample assessment to test the grid display.",
                CourseId = 1,
                Type = "Quiz",
                MaxAttempts = 3,
                PassingScore = 70,
                IsRandomized = true,
                AvailableFrom = DateTime.Now.AddDays(-1),
                IsActive = true,
                // Additional properties can be set as needed.
                Questions = new List<QuestionModel>()
            },
            new AssessmentModel
            {
                Id = 2,
                Title = "Dummy Assessment 2",
                Description = "Another sample assessment with extended details.",
                CourseId = 2,
                Type = "Exam",
                MaxAttempts = 1,
                PassingScore = 80,
                IsRandomized = false,
                AvailableFrom = DateTime.Now.AddDays(-2),
                IsActive = true,
                Questions = new List<QuestionModel>()
            }
        };
    }
}