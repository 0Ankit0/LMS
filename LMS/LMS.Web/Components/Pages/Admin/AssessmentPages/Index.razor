@page "/admin/assessments"
@layout AdminLayout
@attribute [OutputCache(Duration = 60)]
@inject IAssessmentRepository AssessmentRepository
@inject ISnackbar Snackbar
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Assessments - Admin</PageTitle>
<title>Assessments - Admin</title>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Assessments</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/assessments/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Assessment
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        <MudTable T="AssessmentModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
            <HeaderContent>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.Type)">Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.MaxAttempts)">Max Attempts</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.TimeLimit)">Time Limit</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.PassingScore)">Passing Score</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.IsRandomized)">Randomized</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="AssessmentModel" SortBy="new Func<AssessmentModel, object>(x => x.AvailableFrom)">Available From</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">
                    <div>
                        <MudText Typo="Typo.body1">@context.Title</MudText>
                        <MudText Typo="Typo.caption" Class="text-muted">Course ID: @context.CourseId</MudText>
                    </div>
                </MudTd>
                <MudTd DataLabel="Description">
                    <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        @context.Description
                    </div>
                </MudTd>
                <MudTd DataLabel="Type">
                    <MudChip T="string" Color="@GetTypeBadgeColor(context.Type)" Size="Size.Small">@context.Type</MudChip>
                </MudTd>
                <MudTd DataLabel="Max Attempts">@context.MaxAttempts</MudTd>
                <MudTd DataLabel="Time Limit">
                    @if (context.TimeLimit.TotalMinutes > 0)
                    {
                        <span>@((int)context.TimeLimit.TotalMinutes) min</span>
                    }
                    else
                    {
                        <span class="text-muted">No limit</span>
                    }
                </MudTd>
                <MudTd DataLabel="Passing Score">@context.PassingScore.ToString("F1")%</MudTd>
                <MudTd DataLabel="Randomized">
                    <MudChip T="bool" Color="@(context.IsRandomized ? Color.Success : Color.Secondary)" Size="Size.Small">
                        @(context.IsRandomized ? "Yes" : "No")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Available From">
                    @if (context.AvailableFrom.HasValue)
                    {
                        @context.AvailableFrom.Value.ToString("MMM dd, yyyy")
                    }
                    else
                    {
                        <span class="text-muted">Always</span>
                    }
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButtonGroup>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"/admin/assessments/edit?id={context.Id}")">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" Href="@($"/admin/assessments/manage?id={context.Id}")">
                            <MudIcon Icon="@Icons.Material.Filled.Quiz" Class="me-1" /> Questions
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                        </MudButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the assessment <strong>@assessmentToDelete?.Title</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteAssessment">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _loading = false;
    private bool showDeleteConfirm = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    private AssessmentModel? assessmentToDelete;

    private async Task<TableData<AssessmentModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        
        try
        {
            var pageNumber = state.Page + 1; // Convert from 0-based to 1-based indexing
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;
            var paginationRequest = new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize
            };
            var result = await AssessmentRepository.GetAssessmentsPaginatedAsync(paginationRequest);

            // Fallback data if repository returns null or empty
            if (result == null || !result.Items.Any())
            {
                result = new PaginatedResult<AssessmentModel>
                {
                    Items = GetSampleAssessments(),
                    TotalCount = 3,
                    PageNumber = pageNumber,
                    PageSize = pageSize
                };
            }

            return new TableData<AssessmentModel>()
            {
                TotalItems = result.TotalCount,
                Items = result.Items
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading assessments: {ex.Message}", Severity.Error);
            return new TableData<AssessmentModel>()
            {
                TotalItems = 3,
                Items = GetSampleAssessments()
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private List<AssessmentModel> GetSampleAssessments()
    {
        return new List<AssessmentModel>
        {
            new AssessmentModel
            {
                Id = 1,
                Title = "Programming Fundamentals Quiz",
                Description = "Test your knowledge of basic programming concepts",
                CourseId = 1,
                Type = "Quiz",
                MaxAttempts = 3,
                TimeLimit = TimeSpan.FromMinutes(30),
                PassingScore = 70.0,
                IsRandomized = true,
                ShowCorrectAnswers = true,
                ShowScoreImmediately = true,
                AvailableFrom = DateTime.Now.AddDays(-7),
                AvailableUntil = DateTime.Now.AddDays(30),
                CreatedAt = DateTime.Now.AddDays(-10)
            },
            new AssessmentModel
            {
                Id = 2,
                Title = "Web Development Final Exam",
                Description = "Comprehensive assessment covering all course topics",
                CourseId = 2,
                Type = "Exam",
                MaxAttempts = 1,
                TimeLimit = TimeSpan.FromMinutes(120),
                PassingScore = 75.0,
                IsRandomized = false,
                ShowCorrectAnswers = false,
                ShowScoreImmediately = false,
                AvailableFrom = DateTime.Now.AddDays(5),
                AvailableUntil = DateTime.Now.AddDays(10),
                CreatedAt = DateTime.Now.AddDays(-5)
            },
            new AssessmentModel
            {
                Id = 3,
                Title = "Data Science Assignment",
                Description = "Practical assignment using real-world datasets",
                CourseId = 3,
                Type = "Assignment",
                MaxAttempts = 2,
                TimeLimit = TimeSpan.Zero,
                PassingScore = 80.0,
                IsRandomized = false,
                ShowCorrectAnswers = true,
                ShowScoreImmediately = true,
                AvailableFrom = DateTime.Now,
                AvailableUntil = DateTime.Now.AddDays(14),
                CreatedAt = DateTime.Now.AddDays(-3)
            }
        };
    }

    private void ConfirmDelete(AssessmentModel assessment)
    {
        assessmentToDelete = assessment;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        assessmentToDelete = null;
    }

    private async Task DeleteAssessment()
    {
        if (assessmentToDelete != null)
        {
            try
            {
                await AssessmentRepository.DeleteAssessmentAsync(assessmentToDelete.Id);
                Snackbar.Add($"Assessment '{assessmentToDelete.Title}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                assessmentToDelete = null;
                // Refresh the table
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting assessment: {ex.Message}", Severity.Error);
            }
        }
    }

    private Color GetTypeBadgeColor(string type)
    {
        return type switch
        {
            "Quiz" => Color.Info,
            "Exam" => Color.Error,
            "Assignment" => Color.Warning,
            "Survey" => Color.Success,
            "SelfAssessment" => Color.Secondary,
            _ => Color.Default
        };
    }
}