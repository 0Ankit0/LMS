@layout AdminLayout
@inject IAssessmentRepository AssessmentRepository
@inject ISnackbar Snackbar
@if (isLoading)
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
        <MudSkeleton SkeletonType="SkeletonType.Text" Width="300px" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="180px" Height="40px" />
    </MudStack>

    <MudGrid>
        <MudItem xs="12" md="4">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        </MudItem>
        <MudItem xs="12" md="8">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        </MudItem>
    </MudGrid>
}
else if (assessment != null)
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
        <MudText Typo="Typo.h1" Class="mb-0">Manage Assessment: @assessment.Title</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/assessments">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
            Back to Assessments
        </MudButton>
    </MudStack>

    <MudGrid>
        <MudItem xs="12" md="4">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Add New Question</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <EditForm Model="newQuestion" OnValidSubmit="AddQuestion">
                        <MudAlert Severity="Severity.Error" Class="mb-3" >
                            <MudText>Please correct the errors below.</MudText>
                        </MudAlert>
                        <MudTextField @bind-Value="newQuestion.Text" Label="Question Text" Variant="Variant.Text" Lines="3" />
                        <MudSelect @bind-Value="newQuestion.Type" Label="Question Type" Variant="Variant.Text">
                            @foreach (var type in Enum.GetValues<QuestionType>())
                            {
                                <MudSelectItem Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add Question</MudButton>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="8">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Questions</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (assessment.Questions != null && assessment.Questions.Any())
                    {
                        <MudList T="Question">
                            @foreach (var question in assessment.Questions)
                            {
                                <MudListItem T="Question">@question.Text</MudListItem>
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudText>No questions have been added to this assessment yet.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    <MudText>Assessment not found.</MudText>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private AssessmentModel? assessment;
    private CreateQuestionRequest newQuestion = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            assessment = await AssessmentRepository.GetAssessmentByIdAsync(Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddQuestion()
    {
        newQuestion.AssessmentId = Id;
        var result = await AssessmentRepository.CreateQuestionAsync(newQuestion);
        if (result != null)
        {
            // Refresh the assessment after adding a question
            assessment = await AssessmentRepository.GetAssessmentByIdAsync(Id);
            newQuestion = new();
            Snackbar.Add("Question created successfully!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to create question. Please try again.", Severity.Error);
        }
    }
}


