@page "/admin/categories"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using MudBlazor // For DialogOptions and Color
@inject ICategoryRepository CategoryRepository
@inject ISnackbar Snackbar

<PageTitle>Categories - Admin</PageTitle>
<title>Categories - Admin</title>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Categories</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/categories/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Category
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        <MudTable T="CategoryModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
            <HeaderContent>
                <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.Color)">Color</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.IsActive)">Active</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.ParentCategoryName)">Parent Category</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.CourseCount)">Course Count</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(context.IconUrl))
                        {
                            <img src="@context.IconUrl" alt="@context.Name" style="width: 24px; height: 24px; margin-right: 8px;" />
                        }
                        else if (!string.IsNullOrEmpty(context.IconName))
                        {
                            <MudIcon Icon="@context.IconName" Class="me-2" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Category" Class="me-2" />
                        }
                        @context.Name
                    </div>
                </MudTd>
                <MudTd DataLabel="Description">
                    <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        @context.Description
                    </div>
                </MudTd>
                <MudTd DataLabel="Color">
                    <div class="d-flex align-items-center">
                        <div class="me-2"
                            style="width: 20px; height: 20px; background-color: @context.Color; border: 1px solid #ccc; border-radius: 4px;">
                        </div>
                        <MudText Typo="Typo.caption">@context.Color</MudText>
                    </div>
                </MudTd>
                <MudTd DataLabel="Active">
                    <MudChip T="bool" Color="@(context.IsActive ? Color.Success : Color.Secondary)" Size="Size.Small">
                        @(context.IsActive ? "Active" : "Inactive")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Parent Category">
                    @if (!string.IsNullOrEmpty(context.ParentCategoryName))
                    {
                        <MudChip T="string" Color="Color.Info" Size="Size.Small">@context.ParentCategoryName</MudChip>
                    }
                    else
                    {
                        <MudText Typo="Typo.caption" Class="text-muted">Root Category</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Course Count">
                    <MudChip T="int" Color="Color.Primary" Size="Size.Small">@context.CourseCount courses</MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButtonGroup>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"/admin/categories/edit?id={context.Id}")">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                        </MudButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the category <strong>@categoryToDelete?.Name</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteCategory">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private CategoryModel? categoryToDelete;
    private bool _loading = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    private async Task<TableData<CategoryModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        
        try
        {
            var pageNumber = state.Page + 1; // Convert from 0-based to 1-based indexing
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;
            var result = await CategoryRepository.GetCategoriesPaginatedAsync(new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize
            });

            var data = (result.Items == null || !result.Items.Any()) ? new List<CategoryModel>() : result.Items;
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;

            return new TableData<CategoryModel>
            {
                Items = data,
                TotalItems = totalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
            var categories = new List<CategoryModel>();
            return new TableData<CategoryModel>
            {
                Items = categories,
                TotalItems = categories.Count()
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    // Category management methods are implemented and connected to CategoryRepository

    private void ConfirmDelete(CategoryModel category)
    {
        categoryToDelete = category;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        categoryToDelete = null;
    }

    private async Task DeleteCategory()
    {
        if (categoryToDelete != null)
        {
            try
            {
                await CategoryRepository.DeleteCategoryAsync(categoryToDelete.Id);
                Snackbar.Add($"Category '{categoryToDelete.Name}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                categoryToDelete = null;
                // Refresh the table
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting category: {ex.Message}", Severity.Error);
            }
        }
    }
}