@page "/admin/categories"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@using MudBlazor // For DialogOptions and Color
@inject ICategoryRepository CategoryRepository
@inject ISnackbar Snackbar

<PageTitle>Categories - Admin</PageTitle>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Categories</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/categories/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Category
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        @if (_loading)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
        }
        else
        {
            <MudTable T="CategoryModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                <HeaderContent>
                    <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.Color)">Color</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.IsActive)">Active</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.ParentCategoryName)">Parent Category</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="CategoryModel" SortBy="new Func<CategoryModel, object>(x => x.CourseCount)">Course Count</MudTableSortLabel></MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Color">
                        <div class="d-flex align-items-center">
                            <div class="me-2"
                                style="width: 20px; height: 20px; background-color: @context.Color; border: 1px solid #ccc; border-radius: 4px;">
                            </div>
                            @context.Color
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Active">
                        <MudChip T="bool" Color="@(context.IsActive? Color.Success: Color.Secondary)">
                            @(context.IsActive ? "Yes" : "No")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Parent Category">@context.ParentCategoryName</MudTd>
                    <MudTd DataLabel="Course Count">@context.CourseCount</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButtonGroup>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"/admin/categories/edit?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" Href="@($"/admin/categories/details?id={context.Id}")">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" /> Details
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                            </MudButton>
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-IsVisible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the category <strong>@categoryToDelete?.Name</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteCategory">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private CategoryModel? categoryToDelete;
    private bool _loading = false;
    private DialogOptions dialogOptions = new DialogOptions();

    private async Task<TableData<CategoryModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();

        try
        {
            var result = await CategoryRepository.GetCategoriesPaginatedAsync(new PaginationRequest
            {
                PageNumber = state.Page,
                PageSize = state.PageSize
                // Removed SortBy assignment, property does not exist
            });

            var data = (result.Items == null || !result.Items.Any()) ? AddDummyCategories() : result.Items;
            var totalCount = (result.Items == null || !result.Items.Any()) ? data.Count() : result.TotalCount;

            _loading = false;
            return new TableData<CategoryModel>
            {
                Items = data,
                TotalItems = totalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
            var dummy = AddDummyCategories();
            _loading = false;
            return new TableData<CategoryModel>
            {
                Items = dummy,
                TotalItems = dummy.Count
            };
        }
    }

    private List<CategoryModel> AddDummyCategories()
    {
        return new List<CategoryModel>
        {
            new CategoryModel
            {
                Id = 1,
                Name = "Programming",
                Description = "All programming related courses",
                Color = "#007bff",
                IsActive = true,
                ParentCategoryId = null,
                ParentCategoryName = null,
                SubCategories = new List<CategoryModel>(),
                CourseCount = 10
            },
            new CategoryModel
            {
                Id = 2,
                Name = "Design",
                Description = "Design and UI/UX courses",
                Color = "#28a745",
                IsActive = true,
                ParentCategoryId = null,
                ParentCategoryName = null,
                SubCategories = new List<CategoryModel>(),
                CourseCount = 5
            },
            new CategoryModel
            {
                Id = 3,
                Name = "Business",
                Description = "Business and management courses",
                Color = "#ffc107",
                IsActive = false,
                ParentCategoryId = null,
                ParentCategoryName = null,
                SubCategories = new List<CategoryModel>(),
                CourseCount = 3
            }
        };
    }

    private void ConfirmDelete(CategoryModel category)
    {
        categoryToDelete = category;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        categoryToDelete = null;
    }

    private async Task DeleteCategory()
    {
        if (categoryToDelete != null)
        {
            try
            {
                await CategoryRepository.DeleteCategoryAsync(categoryToDelete.Id);
                Snackbar.Add($"Category '{categoryToDelete.Name}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                categoryToDelete = null;
                // Refresh the table after deletion
                await ServerData(new TableState { Page = 0, PageSize = 10 }, CancellationToken.None);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting category: {ex.Message}", Severity.Error);
            }
        }
    }
}