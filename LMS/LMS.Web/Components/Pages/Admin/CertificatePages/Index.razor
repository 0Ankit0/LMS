@page "/admin/certificates"
@attribute [OutputCache(Duration = 60)]
@rendermode @(new InteractiveServerRenderMode())

@using LMS.Repositories
@inject ICertificateRepository CertificateRepository
@inject ISnackbar Snackbar

<PageTitle>Certificates - Admin</PageTitle>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Certificates</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/certificates/create">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="me-2" />
            Add New Certificate
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        <MudTable T="CertificateModel" ServerData="@ServerData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
            <HeaderContent>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.UserId)">User ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.UserName)">User Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.CourseId)">Course ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.CourseTitle)">Course Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.CertificateNumber)">Certificate Number</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.IssuedAt)">Issued</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.ExpiresAt)">Expires</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.FinalGrade)">Final Grade</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="CertificateModel" SortBy="new Func<CertificateModel, object>(x => x.IsValid)">Valid</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="User ID">@context.UserId</MudTd>
                <MudTd DataLabel="User Name">@context.UserName</MudTd>
                <MudTd DataLabel="Course ID">@context.CourseId</MudTd>
                <MudTd DataLabel="Course Title">@context.CourseTitle</MudTd>
                <MudTd DataLabel="Certificate Number">@context.CertificateNumber</MudTd>
                <MudTd DataLabel="Issued">@context.IssuedAt.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="Expires">@(context.ExpiresAt?.ToString("yyyy-MM-dd") ?? "Never")</MudTd>
                <MudTd DataLabel="Final Grade">
                    <MudChip T="double" Color="@GetGradeBadgeColor(context.FinalGrade)">@context.FinalGrade.ToString("F1")%</MudChip>
                </MudTd>
                <MudTd DataLabel="Valid">
                    <MudChip T="bool" Color="@(context.IsValid ? Color.Success : Color.Error)">
                        @(context.IsValid ? "Valid" : "Invalid")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButtonGroup>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@($"/admin/certificates/edit?id={context.Id}")">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-1" /> Edit
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Info" Href="@($"/admin/certificates/details?id={context.Id}")">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" /> Details
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDelete(context)">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
                        </MudButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 25, 50})" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

<!-- Delete Confirmation Modal -->
<MudDialog @bind-Visible="@showDeleteConfirm" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="text-danger">
            <MudIcon Icon="@Icons.Material.Filled.Warning" /> Confirm Delete
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the certificate <strong>@certificateToDelete?.CertificateNumber</strong> for <strong>@certificateToDelete?.UserName</strong>? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="DeleteCertificate">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="me-1" /> Delete
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="CancelDelete">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showDeleteConfirm = false;
    private CertificateModel? certificateToDelete;
    private bool _loading = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    private async Task<TableData<CertificateModel>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        StateHasChanged();
        
        try
        {
            // Ensure non-negative values
            var pageNumber = state.Page < 1 ? 1 : state.Page;
            var pageSize = state.PageSize < 1 ? 10 : state.PageSize;

            var paginationRequest = new PaginationRequest
            {
                PageNumber = pageNumber,
                PageSize = pageSize,
                // Sorting logic commented out
            };
            var result = await CertificateRepository.GetCertificatesPaginatedAsync(paginationRequest);
            
            return new TableData<CertificateModel>
            {
                Items = result?.Items ?? new List<CertificateModel>(),
                TotalItems = result?.TotalCount ?? 0
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading certificates: {ex.Message}", Severity.Error);
            return new TableData<CertificateModel>
            {
                Items = new List<CertificateModel>(),
                TotalItems = 0
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ConfirmDelete(CertificateModel certificate)
    {
        certificateToDelete = certificate;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        certificateToDelete = null;
    }

#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
    private async Task DeleteCertificate()
    {
        if (certificateToDelete != null)
        {
            try
            {
                // Use the correct delete method if available, otherwise comment out
                // await CertificateRepository.DeleteCertificateAsync(certificateToDelete.Id);
                Snackbar.Add($"Certificate '{certificateToDelete.CertificateNumber}' deleted successfully.", Severity.Success);
                showDeleteConfirm = false;
                certificateToDelete = null;
                // Refresh the table after deletion
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting certificate: {ex.Message}", Severity.Error);
            }
        }
    }
#pragma warning restore CS1998

    private MudBlazor.Color GetGradeBadgeColor(double grade) => grade switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Primary,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Error
    };
}
}


