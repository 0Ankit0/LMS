@page "/admin/forums/create"
@page "/admin/forums/edit/{id}"

@using LMS.Repositories
@using MudBlazor;
@using System.Reflection;
@inject IForumRepository ForumRepository
@inject IDropdownRepository DropdownRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IImageRepository ImageRepository
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>@(IsEdit ? "Edit Forum" : "Create Forum") - Admin</PageTitle>

<MudSkeleton Height="40px" Width="100%" Animation="Animation.Wave" />
<MudPaper Class="mb-4 p-4">
    <MudText Typo="Typo.h4">@(IsEdit ? "Edit Forum" : "Create New Forum")</MudText>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href="/admin/forums">
        <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="me-2" />
        Back to Forums
    </MudButton>
</MudPaper>

<MudCard Elevation="2">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Forum Information</MudText>
    </MudCardHeader>
    <MudCardContent>
        <EditForm EditContext="@editContext" OnValidSubmit="SaveForum">
            <MudAlert Severity="Severity.Error" Class="mb-3">
                <MudText>Please correct the errors below.</MudText>
            </MudAlert>

            <MudTextField @bind-Value="Forum.Title" Label="Title" Variant="Variant.Text" Required="true"
                RequiredError="Title is required!" Placeholder="Enter forum title" />

            <MudTextField @bind-Value="Forum.Description" Label="Description" Variant="Variant.Text" Lines="3"
                Placeholder="Enter forum description" />

            <MudAutocomplete T="int?" Value="Forum.CourseId" ValueChanged="@(v => Forum.CourseId = v)" Label="Course"
                Variant="Variant.Text" Placeholder="Search course (optional)..."
                ToStringFunc="@(id => Courses.FirstOrDefault(c => c.Value == id)?.Text ?? string.Empty)"
                SearchFunc="SearchCourses" />

            <MudCheckBox T="bool" @bind-Checked="Forum.IsGeneral" Label="Is General Forum" Color="Color.Primary" />

            <!-- Image Upload Button -->
            <MudStack Direction="Row" Spacing="2" Class="my-2">
                <MudText Typo="Typo.subtitle2">Forum Image</MudText>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(()=>TriggerFileInput())">
                    <MudIcon Icon="@Icons.Material.Filled.Upload" class="me-2" />Upload Image
                </MudButton>
                <input type="file" style="display:none" @ref="fileInputRef" @onchange="OnImageSelected" accept="image/*" />
                @if (!string.IsNullOrEmpty(Forum.ImageUrl))
                {
                    <img src="@Forum.ImageUrl" alt="Forum Image" style="max-height:60px;max-width:120px;" />
                }
            </MudStack>

            <!-- Icon Picker with Reflection and Autocomplete -->
            <MudStack Direction="Row" Spacing="2" Class="my-2">
                <MudText Typo="Typo.subtitle2">Forum Icon (MudBlazor)</MudText>
                <MudAutocomplete T="string" @bind-Value="Forum.IconName" Label="Forum Icon" Variant="Variant.Text"
                    SearchFunc="SearchIcons" ToStringFunc="@(icon => icon ?? string.Empty)" />
                @if (!string.IsNullOrEmpty(Forum.IconName))
                {
                    <MudIcon Icon="@Forum.IconName" Class="ms-2" />
                }
            </MudStack>

            <MudStack Direction="Row" Spacing="2">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                    Disabled="@isSubmitting">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                    @(IsEdit ? "Update Forum" : "Create Forum")
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/admin/forums">Cancel</MudButton>
            </MudStack>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    [SupplyParameterFromQuery] public int? id { get; set; }
    [SupplyParameterFromForm]
    private CreateForumRequest Forum { get; set; } = new();
    private bool isSubmitting = false;
    private bool IsEdit => ( id) > 0;
    private List<DropdownOption<int>> Courses = new();
    private EditContext editContext;
    private ElementReference fileInputRef;
    private List<string> allMudIcons = new();

    protected override async Task OnInitializedAsync()
    {
        Courses = (await DropdownRepository.GetCoursesAsync()).Select(c => new DropdownOption<int>
        {
            Value = c.Value,
            Text = c.Text,
            Description = c.Description,
            IsDisabled = c.IsDisabled
        }).ToList();
        allMudIcons = typeof(Icons.Material.Filled).GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(f => f.GetValue(null)?.ToString()).Where(x => !string.IsNullOrEmpty(x)).ToList();
        editContext = new EditContext(Forum);
        if (IsEdit)
        {
            var forumId =  id ?? 0;
            try
            {
                var existingForum = await ForumRepository.GetForumByIdAsync(forumId);
                if (existingForum != null)
                {
                    Forum = new CreateForumRequest
                    {
                        Title = existingForum.Title,
                        Description = existingForum.Description,
                        CourseId = existingForum.CourseId,
                        IsGeneral = existingForum.IsGeneral,
                        ImageUrl = existingForum.ImageUrl,
                        IconName = existingForum.IconName
                    };
                    editContext = new EditContext(Forum);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading forum: {ex.Message}", Severity.Error);
                NavigationManager.NavigateTo("/admin/forums");
                return;
            }
        }
    }

    private async Task OnImageSelected(ChangeEventArgs e)
    {
        var files = (e.Value as Microsoft.AspNetCore.Components.Forms.IBrowserFile[])
            ?? new[] { e.Value as Microsoft.AspNetCore.Components.Forms.IBrowserFile };
        var file = files?.FirstOrDefault();
        if (file != null)
        {
            var result = await ImageRepository.SaveImageAsync(file);
            if (result != null)
            {
                Forum.ImageUrl = result.Url;
                Snackbar.Add("Image uploaded successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to upload image.", Severity.Error);
            }
        }
    }

    private Task<IEnumerable<string>> SearchIcons(string value, CancellationToken token)
    {
        IEnumerable<string> result = string.IsNullOrWhiteSpace(value)
            ? allMudIcons
            : allMudIcons.Where(i => i.Contains(value, StringComparison.OrdinalIgnoreCase));
        return Task.FromResult(result);
    }

    private async Task SaveForum()
    {
        if (isSubmitting) return;
        isSubmitting = true;
        try
        {
            if (IsEdit)
            {
                var forumId =  id ?? 0;
                await ForumRepository.UpdateForumAsync(forumId, Forum);
                Snackbar.Add("Forum updated successfully!", Severity.Success);
            }
            else
            {
                var result = await ForumRepository.CreateForumAsync(Forum);
                if (result != null)
                {
                    Snackbar.Add("Forum created successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to create forum. Please try again.", Severity.Error);
                    return;
                }
            }
            NavigationManager.NavigateTo("/admin/forums");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving forum: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private Task<IEnumerable<int?>> SearchCourses(string value, CancellationToken token)
    {
        IEnumerable<int?> result = string.IsNullOrWhiteSpace(value)
        ? Courses.Select(c => (int?)c.Value)
        : Courses.Where(c => c.Text.Contains(value, StringComparison.OrdinalIgnoreCase)).Select(c => (int?)c.Value);
        return Task.FromResult(result);
    }

    private void TriggerFileInput()
    {
        _ = JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{fileInputRef.Id}').click();");
    }
}