@page "/test-error"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Test Error Boundary</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudText Typo="Typo.h2">Error Boundary Test Page</MudText>
            <MudText Typo="Typo.body2" Class="text-muted mb-4">This page is for testing the custom error boundary functionality.</MudText>

            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Error Testing Controls</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ThrowNullReferenceException">
                            Throw Null Reference Exception
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="ThrowArgumentException">
                            Throw Argument Exception
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="ThrowInvalidOperationException">
                            Throw Invalid Operation Exception
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ThrowCustomException">
                            Throw Custom Exception
                        </MudButton>
                    </MudStack>

                    <MudText Typo="Typo.caption" Class="mt-3">
                        Click any button above to trigger an exception and see how the error boundary handles it.
                        The error boundary will display detailed error information including stack traces and inner
                        exceptions.
                    </MudText>
                </MudCardContent>
            </MudCard>

            <MudPaper Class="mt-4" Elevation="0">
                <MudText Typo="Typo.h5">How it works:</MudText>
                <MudStack Spacing="1" Class="mt-2">
                    <MudText>✅ <strong>Error Boundary Wrapper:</strong> All layouts now use <code>CustomErrorBoundary</code></MudText>
                    <MudText>✅ <strong>Detailed Error Display:</strong> Shows exception type, message, and stack trace</MudText>
                    <MudText>✅ <strong>User-Friendly Actions:</strong> Try Again, Go Home, Reload Page buttons</MudText>
                    <MudText>✅ <strong>Error Logging:</strong> Exceptions are logged automatically</MudText>
                    <MudText>✅ <strong>Development vs Production:</strong> More details shown in development mode</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private void ThrowNullReferenceException()
    {
        string? nullString = null;
        var length = nullString.Length; // This will throw NullReferenceException
    }

    private void ThrowArgumentException()
    {
        throw new ArgumentException("This is a test argument exception with a custom message.", nameof(ThrowArgumentException));
    }

    private void ThrowInvalidOperationException()
    {
        var list = new List<string>();
        var item = list.Single(); // This will throw InvalidOperationException
    }

    private void ThrowCustomException()
    {
        try
        {
            // Simulate a nested exception scenario
            throw new InvalidOperationException("Inner exception occurred during data processing.");
        }
        catch (Exception innerEx)
        {
            throw new ApplicationException("Custom application exception with inner exception details.", innerEx);
        }
    }
}


