@using LMS.Web.Repositories.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@page "/reports/enrollment-summary"
@attribute [OutputCache(Duration = 60)]
@inject IReportRepository ReportRepository
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@attribute [Authorize]

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">ðŸ‘¥ Enrollment Summary Report</h2>
        <p class="text-muted mb-0">Track enrollment statistics and trends over time</p>
    </div>
    <div class="export-buttons">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToPdf">
            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Class="me-2" /> Export PDF
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToExcel">
            <MudIcon Icon="@Icons.Material.Filled.Description" Class="me-2" /> Export Excel
        </MudButton>
    </div>
</div>

<!-- Filters -->
<MudGrid Class="report-filters">
    <MudItem xs="12" md="3">
        <MudDatePicker Label="Start Date" @bind-Date="startDate" DateFormat="yyyy-MM-dd" OnChange="LoadData" />
    </MudItem>
    <MudItem xs="12" md="3">
        <MudDatePicker Label="End Date" @bind-Date="endDate" DateFormat="yyyy-MM-dd" OnChange="LoadData" />
    </MudItem>
    <MudItem xs="12" md="3">
        <MudSelect T="string" Label="Period" @bind-Value="selectedPeriod" OnChange="LoadData">
            <MudSelectItem Value="@("daily")">Daily</MudSelectItem>
            <MudSelectItem Value="@("weekly")">Weekly</MudSelectItem>
            <MudSelectItem Value="@("monthly")">Monthly</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudSelect T="int?" Label="Course" @bind-Value="selectedCourseId" OnChange="LoadData">
            <MudSelectItem Value="@((int?)null)">All Courses</MudSelectItem>
            @if (courses?.Any() == true)
            {
                @foreach (var course in courses)
                {
                    <MudSelectItem Value="@course.Id">@course.Title</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@if (loading)
{
    <div class="report-loading d-flex flex-column align-items-center justify-content-center py-5">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        <MudText Class="mt-2">Loading enrollment summary data...</MudText>
    </div>
}
else if (reports?.Any() == true)
{
    <!-- Summary Statistics -->
    <MudGrid Class="stats-grid mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Sum(r => r.TotalEnrollments)</MudText>
                    <MudText Typo="Typo.subtitle2">Total Enrollments</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Sum(r => r.NewEnrollments)</MudText>
                    <MudText Typo="Typo.subtitle2">New Enrollments</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Sum(r => r.CompletedEnrollments)</MudText>
                    <MudText Typo="Typo.subtitle2">Completed</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Sum(r => r.DroppedEnrollments)</MudText>
                    <MudText Typo="Typo.subtitle2">Dropped</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Chart Container -->
    <div class="report-chart mb-4">
        <canvas id="enrollmentChart" width="400" height="200"></canvas>
    </div>

    <!-- Data Table -->
    <MudTable T="EnrollmentSummaryReportDto" Items="@reports" Hover="true" Breakpoint="Breakpoint.Sm" Class="report-table">
        <HeaderContent>
            <MudTh>Period</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Total Enrollments</MudTh>
            <MudTh>New Enrollments</MudTh>
            <MudTh>Active Enrollments</MudTh>
            <MudTh>Completed</MudTh>
            <MudTh>Dropped</MudTh>
            <MudTh>Completion Rate</MudTh>
            <MudTh>Trend</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Period">@context.Period</MudTd>
            <MudTd DataLabel="Date">@context.ReportDate.ToString("MMM dd, yyyy")</MudTd>
            <MudTd DataLabel="Total Enrollments">@context.TotalEnrollments</MudTd>
            <MudTd DataLabel="New Enrollments">
                <MudChip T="int" Color="Color.Success">@context.NewEnrollments</MudChip>
            </MudTd>
            <MudTd DataLabel="Active Enrollments">@context.ActiveEnrollments</MudTd>
            <MudTd DataLabel="Completed">
                <MudChip T="int" Color="Color.Info">@context.CompletedEnrollments</MudChip>
            </MudTd>
            <MudTd DataLabel="Dropped">
                <MudChip T="int" Color="Color.Error">@context.DroppedEnrollments</MudChip>
            </MudTd>
            <MudTd DataLabel="Completion Rate">
                <MudProgressLinear Value="@context.AverageProgressPercentage" Color="Color.Success" Class="my-2" Style="height: 20px;" />
                <MudText Typo="Typo.caption">@($"{context.AverageProgressPercentage:F1}%")</MudText>
            </MudTd>
            <MudTd DataLabel="Trend">
                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Info" /> @context.CertificatesIssued
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="@(new int[]{10, 20, 50})" />
        </PagerContent>
    </MudTable>

    <!-- Pagination -->
    <MudPagination Class="mt-4" Count="@totalPages" Selected="@currentPage" SelectedChanged="ChangePage" />
}
else
{
    <MudCard Elevation="2" Class="report-no-data">
        <MudCardContent Class="text-center py-5">
            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Large" Class="text-muted mb-3" />
            <MudText Typo="Typo.h5">No Data Available</MudText>
            <MudText Typo="Typo.body1" Class="text-muted">No enrollment data found for the selected criteria.</MudText>
        </MudCardContent>
    </MudCard>
}

@code {
    private DateTime? startDate = DateTime.Today.AddMonths(-6);
    private DateTime? endDate = DateTime.Today;
    private string selectedPeriod = "monthly";
    private int? selectedCourseId;
    private bool loading = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;

    private IEnumerable<EnrollmentSummaryReportDto>? reports;
    private IEnumerable<Course>? courses;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && reports?.Any() == true)
        {
            await DrawChart();
        }
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;

            // Get the current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                // Load enrollment summary report
                var allReports = await ReportRepository.GetEnrollmentSummaryReportAsync(
                    user, startDate ?? DateTime.Today.AddMonths(-6), endDate ?? DateTime.Today, selectedPeriod, selectedCourseId);

                // If no data from API, use empty list
                if (!allReports.Any())
                {
                    allReports = new List<EnrollmentSummaryReportDto>();
                }

                // Apply pagination
                totalPages = (int)Math.Ceiling((double)allReports.Count() / pageSize);
                reports = allReports.Skip((currentPage - 1) * pageSize).Take(pageSize);

                await DrawChart();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading enrollment summary data: {ex.Message}");
            
            // On error, show empty data
            var emptyReports = new List<EnrollmentSummaryReportDto>();
            totalPages = (int)Math.Ceiling((double)emptyReports.Count() / pageSize);
            reports = emptyReports.Skip((currentPage - 1) * pageSize).Take(pageSize);
            await DrawChart();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task DrawChart()
    {
        if (reports?.Any() == true)
        {
            var chartData = reports.OrderBy(r => r.ReportDate).Select(r => new
            {
                label = r.ReportDate.ToString("MMM yyyy"),
                newEnrollments = r.NewEnrollments,
                completedEnrollments = r.CompletedEnrollments,
                droppedEnrollments = r.DroppedEnrollments
            }).ToArray();

            await JSRuntime.InvokeVoidAsync("drawEnrollmentChart", "enrollmentChart", chartData);
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            _ = LoadData();
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var pdfBytes = await ReportRepository.ExportReportToPdfAsync(user, "enrollment", new { startDate, endDate, selectedPeriod, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "EnrollmentSummary.pdf", Convert.ToBase64String(pdfBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to PDF: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var excelBytes = await ReportRepository.ExportReportToExcelAsync(user, "enrollment", new { startDate, endDate, selectedPeriod, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "EnrollmentSummary.xlsx", Convert.ToBase64String(excelBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
        }
    }

}



