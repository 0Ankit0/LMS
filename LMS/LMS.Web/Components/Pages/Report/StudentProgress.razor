@page "/reports/student-progress"
@layout ReportLayout
@attribute [OutputCache(Duration = 60)]
@inject IReportRepository ReportRepository
@inject ICourseRepository CourseRepository
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@attribute [Authorize]

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">ðŸ“ˆ Student Progress Report</h2>
        <p class="text-muted mb-0">Track individual and overall student progress across courses</p>
    </div>
    <div class="export-buttons">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToPdf">
            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Class="me-2" /> Export PDF
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToExcel">
            <MudIcon Icon="@Icons.Material.Filled.Description" Class="me-2" /> Export Excel
        </MudButton>
    </div>
</div>

<!-- Filters -->
<MudGrid Class="report-filters">
    <MudItem xs="12" md="3">
            <MudDatePicker Label="Start Date" @bind-Date="startDate" DateFormat="yyyy-MM-dd" />
    </MudItem>
    <MudItem xs="12" md="3">
            <MudDatePicker Label="End Date" @bind-Date="endDate" DateFormat="yyyy-MM-dd" />
    </MudItem>
    <MudItem xs="12" md="3">
        <MudSelect T="string" Label="Student" Value="@selectedStudentId" ValueChanged="@(async (string value) => await OnStudentChanged(value))">
            <MudSelectItem Value="@string.Empty">All Students</MudSelectItem>
            @if (students?.Any() == true)
            {
                @foreach (var student in students)
                {
                    <MudSelectItem Value="@student.Id">@student.FullName</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudSelect T="int?" Label="Course" Value="@selectedCourseId" ValueChanged="@(async (int? value) => await OnCourseChanged(value))">
            <MudSelectItem Value="@((int?)null)">All Courses</MudSelectItem>
            @if (courses?.Any() == true)
            {
                @foreach (var course in courses)
                {
                    <MudSelectItem Value="@course.Id">@course.Title</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@if (loading)
{
    <div class="report-loading d-flex flex-column align-items-center justify-content-center py-5">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        <MudText Class="mt-2">Loading student progress data...</MudText>
    </div>
}
else if (reports?.Any() == true)
{
    <!-- Summary Statistics -->
    <MudGrid Class="stats-grid mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Count()</MudText>
                    <MudText Typo="Typo.subtitle2">Total Records</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@($"{reports.Average(r => r.ProgressPercentage):F1}%")</MudText>
                    <MudText Typo="Typo.subtitle2">Avg Progress</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Count(r => r.Status == "Completed")</MudText>
                    <MudText Typo="Typo.subtitle2">Completed</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@($"{reports.Average(r => r.AverageAssessmentScore):F1}%")</MudText>
                    <MudText Typo="Typo.subtitle2">Avg Score</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Data Table -->
    <MudTable T="StudentProgressReportDto" Items="@reports" Hover="true" Breakpoint="Breakpoint.Sm" Class="report-table">
        <HeaderContent>
            <MudTh>Student</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Course</MudTh>
            <MudTh>Progress</MudTh>
            <MudTh>Time Spent</MudTh>
            <MudTh>Avg Score</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Enrolled Date</MudTh>
            <MudTh>Certificate</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Student">@context.StudentName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Course">@context.CourseName</MudTd>
            <MudTd DataLabel="Progress">
                <MudProgressLinear Value="@(context.ProgressPercentage)" Color="@GetProgressBarColor(context.ProgressPercentage)" Class="my-2" />
                <MudText Typo="Typo.caption">@($"{context.ProgressPercentage:F1}%")</MudText>
            </MudTd>
            <MudTd DataLabel="Time Spent">@context.TimeSpent.ToString(@"hh\:mm")</MudTd>
            <MudTd DataLabel="Avg Score">@($"{context.AverageAssessmentScore:F1}%")</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Color="@GetStatusBadgeColor(context.Status)">
                    @context.Status
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Enrolled Date">@context.EnrolledAt.ToString("MMM dd, yyyy")</MudTd>
            <MudTd DataLabel="Certificate">
                @if (context.IsCertificateIssued)
                {
                    <MudChip T="bool" Color="Color.Success">âœ“ Issued</MudChip>
                }
                else
                {
                    <MudChip T="bool" Color="Color.Secondary">Not Issued</MudChip>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="@(new int[]{10, 20, 50})" />
        </PagerContent>
    </MudTable>

    <!-- Pagination -->
    <MudPagination Class="mt-4" Count="@totalPages" Selected="@currentPage" SelectedChanged="ChangePage" />
}
else
{
    <MudCard Elevation="2" Class="report-no-data">
        <MudCardContent Class="text-center py-5">
            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Large" Class="text-muted mb-3" />
            <MudText Typo="Typo.h5">No Data Available</MudText>
            <MudText Typo="Typo.body1" Class="text-muted">No student progress data found for the selected criteria.</MudText>
        </MudCardContent>
    </MudCard>
}

@code {
    private DateTime? startDate = DateTime.Today.AddMonths(-3);
    private DateTime? endDate = DateTime.Today;
    private string selectedStudentId = "";
    private int? selectedCourseId;

    private async Task OnStudentChanged(string value)
    {
        selectedStudentId = value;
        await LoadData();
    }

    private async Task OnCourseChanged(int? value)
    {
        selectedCourseId = value;
        await LoadData();
    }
    private bool loading = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;

    private IEnumerable<StudentProgressReportDto>? reports;
    #pragma warning disable CS8618 // Field is assigned in OnInitializedAsync and LoadData
    private IEnumerable<User> students = new List<User>();
    #pragma warning restore CS8618
    private IEnumerable<CourseModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        students = UserManager.Users.ToList();
        courses = await CourseRepository.GetAllCoursesAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;
            students = UserManager.Users.ToList();

            // Get the current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                // Load reports
                var allReports = await ReportRepository.GetStudentProgressReportAsync(
                    user, 
                    string.IsNullOrEmpty(selectedStudentId) ? null : selectedStudentId, 
                    startDate, 
                    endDate, 
                    selectedCourseId, 
                    null);

                // If no data from API, generate dummy data
                if (!allReports.Any())
                {
                    allReports = GenerateDummyData();
                }

                // Apply pagination
                totalPages = (int)Math.Ceiling((double)allReports.Count() / pageSize);
                reports = allReports.Skip((currentPage - 1) * pageSize).Take(pageSize);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student progress data: {ex.Message}");
            // On error, also show dummy data
            var dummyReports = GenerateDummyData();
            totalPages = (int)Math.Ceiling((double)dummyReports.Count() / pageSize);
            reports = dummyReports.Skip((currentPage - 1) * pageSize).Take(pageSize);
        }
        finally
        {
            loading = false;
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            _ = LoadData();
        }
    }

    private MudBlazor.Color GetProgressBarColor(double progress)
    {
        return progress switch
        {
            >= 80 => MudBlazor.Color.Success,
            >= 60 => MudBlazor.Color.Info,
            >= 40 => MudBlazor.Color.Warning,
            _ => MudBlazor.Color.Error
        };
    }

    private MudBlazor.Color GetStatusBadgeColor(string status)
    {
        return status.ToLower() switch
        {
            "completed" => MudBlazor.Color.Success,
            "active" or "in progress" => MudBlazor.Color.Primary,
            "dropped" => MudBlazor.Color.Error,
            "paused" => MudBlazor.Color.Warning,
            _ => MudBlazor.Color.Secondary
        };
    }

    private async Task ExportToPdf()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var pdfBytes = await ReportRepository.ExportReportToPdfAsync(user, "studentprogress", new { startDate, endDate, selectedStudentId, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "StudentProgress.pdf", Convert.ToBase64String(pdfBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to PDF: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var excelBytes = await ReportRepository.ExportReportToExcelAsync(user, "studentprogress", new { startDate, endDate, selectedStudentId, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "StudentProgress.xlsx", Convert.ToBase64String(excelBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
        }
    }

    private IEnumerable<StudentProgressReportDto> GenerateDummyData()
    {
        var random = new Random();
        var dummyData = new List<StudentProgressReportDto>();

        var courses = new[] { "Mathematics 101", "Physics Fundamentals", "Chemistry Basics", "Computer Science", "Biology Advanced", "History of Art", "Literature Studies", "Economics 101" };
        var statuses = new[] { "Active", "Completed", "In Progress", "Paused" };
        var studentNames = new[] { "John Smith", "Sarah Johnson", "Michael Brown", "Emily Davis", "David Wilson", "Lisa Anderson", "Robert Taylor", "Jennifer Martinez", "Christopher Lee", "Amanda White" };

        for (int i = 0; i < 25; i++)
        {
            var enrolledDate = DateTime.Today.AddDays(-random.Next(1, 365));
            var progress = random.NextDouble() * 100;
            var timeSpent = TimeSpan.FromHours(random.Next(5, 120));
            var avgScore = 40 + random.NextDouble() * 60; // Score between 40-100
            var status = statuses[random.Next(statuses.Length)];

            dummyData.Add(new StudentProgressReportDto
            {
                StudentId = $"STU{i + 1:D3}",
                StudentName = studentNames[random.Next(studentNames.Length)],
                Email = $"student{i + 1}@university.edu",
                CourseName = courses[random.Next(courses.Length)],
                CourseId = random.Next(1, 9),
                ProgressPercentage = progress,
                TimeSpent = timeSpent,
                EnrolledAt = enrolledDate,
                StartedAt = enrolledDate.AddDays(random.Next(0, 7)),
                CompletedAt = status == "Completed" ? enrolledDate.AddDays(random.Next(30, 180)) : null,
                FinalGrade = status == "Completed" ? 70 + random.NextDouble() * 30 : null,
                Status = status,
                AverageAssessmentScore = avgScore,
                IsCertificateIssued = status == "Completed" && avgScore >= 70,
                CompletedLessons = random.Next(0, 20),
                TotalLessons = random.Next(15, 25),
                CompletedAssessments = random.Next(0, 8),
                TotalAssessments = random.Next(5, 10)
            });
        }

        return dummyData;
    }
}
