@page "/reports/low-performance"
@layout ReportLayout
@attribute [OutputCache(Duration = 60)]
@inject IReportRepository ReportRepository
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@attribute [Authorize]

<MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
    <MudStack Spacing="1">
        <MudText Typo="Typo.h4" Class="mb-1">‚ö†Ô∏è Low Performance Students Report</MudText>
        <MudText Color="Color.Secondary" Class="mb-0">Identify students who need additional support and intervention</MudText>
    </MudStack>
    <MudStack Row Spacing="2" Class="export-buttons">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToPdf">
            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Class="mr-2" /> Export PDF
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToExcel">
            <MudIcon Icon="@Icons.Material.Filled.Description" Class="mr-2" /> Export Excel
        </MudButton>
    </MudStack>
</MudStack>

<!-- Filters -->
<MudGrid Class="report-filters">
    <MudItem xs="12" md="3">
        <MudNumericField Label="Performance Threshold (%)" @bind-Value="threshold" Variant="Variant.Text" Min="0" Max="100" Step="5" Placeholder="50" OnBlur="LoadData" />
        <MudText Typo="Typo.caption" Class="text-muted">Students below this threshold will be included</MudText>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudDatePicker Label="Start Date" @bind-Date="startDate" DateFormat="yyyy-MM-dd" OnChange="LoadData" />
    </MudItem>
    <MudItem xs="12" md="3">
        <MudDatePicker Label="End Date" @bind-Date="endDate" DateFormat="yyyy-MM-dd" OnChange="LoadData" />
    </MudItem>
    <MudItem xs="12" md="3">
        <MudSelect T="int?" Label="Course" @bind-Value="selectedCourseId" OnChange="LoadData">
            <MudSelectItem Value="@((int?)null)">All Courses</MudSelectItem>
            @if (courses?.Any() == true)
            {
                @foreach (var course in courses)
                {
                    <MudSelectItem Value="@course.Id">@course.Title</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@if (loading)
{
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="py-5">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        <MudText Class="mt-2">Loading low performance students data...</MudText>
    </MudStack>
}
else if (reports?.Any() == true)
{
    <!-- Alert Summary -->
    <MudAlert Severity="Severity.Warning" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Warning" Class="me-3" Size="Size.Large" />
        <div>
            <MudText Typo="Typo.h6">‚ö†Ô∏è Attention Required</MudText>
            <MudText>
                <strong>@reports.Count()</strong> students are performing below the @threshold% threshold and may need additional support.
            </MudText>
        </div>
    </MudAlert>

    <!-- Summary Statistics -->
    <MudGrid Class="stats-grid mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Count()</MudText>
                    <MudText Typo="Typo.subtitle2">At-Risk Students</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@($"{reports.Average(r => r.AverageAssessmentScore):F1}%")</MudText>
                    <MudText Typo="Typo.subtitle2">Avg Performance</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@($"{reports.Average(r => r.ProgressPercentage):F1}%")</MudText>
                    <MudText Typo="Typo.subtitle2">Avg Progress</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Count(r => r.Status == "Active")</MudText>
                    <MudText Typo="Typo.subtitle2">Still Active</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Risk Level Distribution -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Performance Distribution</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <canvas id="performanceChart" width="400" height="300"></canvas>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Risk Categories</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudList T="string">
                        <MudListItem T="string">
                            <MudChip T="string" Color="Color.Error" Class="me-2" />Critical (&lt;30%): @reports.Count(r => r.AverageAssessmentScore < 30)
                        </MudListItem>
                        <MudListItem T="string">
                            <MudChip T="string" Color="Color.Warning" Class="me-2" />High Risk (30-40%): @reports.Count(r => r.AverageAssessmentScore >= 30 && r.AverageAssessmentScore < 40)
                        </MudListItem>
                        <MudListItem T="string">
                            <MudChip T="string" Color="Color.Info" Class="me-2" />Moderate Risk (40-@threshold%): @reports.Count(r => r.AverageAssessmentScore >= 40 && r.AverageAssessmentScore < threshold)
                        </MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Data Table -->
    <MudTable Items="@reports.OrderBy(r => r.AverageAssessmentScore)" 
              Hover="true" 
              Dense="true" 
              FixedHeader="true" 
              Elevation="2"
              Class="rounded-lg">
        <HeaderContent>
            <MudTh>Student</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Course</MudTh>
            <MudTh>Progress</MudTh>
            <MudTh>Avg Score</MudTh>
            <MudTh>Risk Level</MudTh>
            <MudTh>Time Spent</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Last Activity</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Student">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Primary" Variant="Variant.Filled">
                        <MudText Typo="Typo.h6">@context.StudentName.Substring(0, 1).ToUpper()</MudText>
                    </MudAvatar>
                    <MudText Typo="Typo.body2"><strong>@context.StudentName</strong></MudText>
                </MudStack>
            </MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Course">@context.CourseName</MudTd>
            <MudTd DataLabel="Progress">
                <MudProgressLinear Value="@(context.ProgressPercentage)" Color="@GetProgressBarColor(context.ProgressPercentage)" Class="my-2 h-1.5" />
                <MudText Typo="Typo.caption">@($"{context.ProgressPercentage:F1}%")</MudText>
            </MudTd>
            <MudTd DataLabel="Avg Score">
                <MudChip T="string" Color="@GetScoreBadgeColor(context.AverageAssessmentScore)">
                    @($"{context.AverageAssessmentScore:F1}%")
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Risk Level">
                <MudChip T="string" Color="@GetRiskBadgeColor(context.AverageAssessmentScore)">
                    @GetRiskLevel(context.AverageAssessmentScore)
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Time Spent">@context.TimeSpent.ToString(@"hh\:mm")</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Color="@GetStatusBadgeColor(context.Status)">
                    @context.Status
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Last Activity">@(context.EnrolledAt.ToString("MMM dd, yyyy"))</MudTd>
            <MudTd DataLabel="Actions">
                <MudButtonGroup>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Title="Contact Student">
                        <MudIcon Icon="@Icons.Material.Filled.Email" />
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" Title="View Details">
                        <MudIcon Icon="@Icons.Material.Filled.Visibility" />
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Small" Title="Add Note">
                        <MudIcon Icon="@Icons.Material.Filled.NoteAdd" />
                    </MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <!-- Intervention Recommendations -->
    <MudCard Elevation="2" Class="mt-4">
        <MudCardHeader>
            <MudText Typo="Typo.h6">üí° Recommended Interventions</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1">üìß Immediate Actions</MudText>
                            <MudList T="string">
                                <MudListItem T="string">‚Ä¢ Send personalized check-in emails</MudListItem>
                                <MudListItem T="string">‚Ä¢ Schedule one-on-one meetings</MudListItem>
                                <MudListItem T="string">‚Ä¢ Provide additional resources</MudListItem>
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1">üéØ Academic Support</MudText>
                            <MudList T="string">
                                <MudListItem T="string">‚Ä¢ Assign peer mentors</MudListItem>
                                <MudListItem T="string">‚Ä¢ Offer tutoring sessions</MudListItem>
                                <MudListItem T="string">‚Ä¢ Create study groups</MudListItem>
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1">üìö Learning Resources</MudText>
                            <MudList T="string">
                                <MudListItem T="string">‚Ä¢ Provide supplementary materials</MudListItem>
                                <MudListItem T="string">‚Ä¢ Suggest alternative learning paths</MudListItem>
                                <MudListItem T="string">‚Ä¢ Offer extension deadlines</MudListItem>
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudCard Elevation="2" Class="report-no-data">
        <MudCardContent Class="text-center py-5">
            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Class="text-success mb-3" />
            <MudText Typo="Typo.h5">Great News!</MudText>
            <MudText Typo="Typo.body1" Class="text-muted">No students are performing below the @threshold% threshold.</MudText>
            <MudText Typo="Typo.body1" Class="text-muted">All students are meeting performance expectations.</MudText>
        </MudCardContent>
    </MudCard>
}

@code {
    private double threshold = 50.0;
    private DateTime? startDate = DateTime.Today.AddMonths(-3);
    private DateTime? endDate = DateTime.Today;
    private int? selectedCourseId;
    private bool loading = true;

    private IEnumerable<StudentProgressReportDto>? reports;
    private IEnumerable<Course>? courses = Enumerable.Empty<Course>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && reports?.Any() == true)
        {
            await DrawChart();
        }
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                reports = await ReportRepository.GetLowPerformanceStudentsReportAsync(
                    user, threshold, startDate, endDate, selectedCourseId);

                if (reports == null || !reports.Any())
                {
                    reports = new List<StudentProgressReportDto>();
                }

                await DrawChart();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading low performance students data: {ex.Message}");
            reports = new List<StudentProgressReportDto>(); // Return empty list on error
            await DrawChart();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task DrawChart()
    {
        if (reports?.Any() == true)
        {
            var performanceData = new
            {
                critical = reports.Count(r => r.AverageAssessmentScore < 30),
                high = reports.Count(r => r.AverageAssessmentScore >= 30 && r.AverageAssessmentScore < 40),
                moderate = reports.Count(r => r.AverageAssessmentScore >= 40 && r.AverageAssessmentScore < threshold)
            };

            await JSRuntime.InvokeVoidAsync("drawPerformanceChart", "performanceChart", performanceData);
        }
    }

    private MudBlazor.Color GetProgressBarColor(double progress)
    {
        if (progress >= 60) return MudBlazor.Color.Success;
        if (progress >= 40) return MudBlazor.Color.Warning;
        return MudBlazor.Color.Error;
    }

    private MudBlazor.Color GetScoreBadgeColor(double score)
    {
        if (score < 30) return MudBlazor.Color.Error;
        if (score < 40) return MudBlazor.Color.Warning;
        if (score < 60) return MudBlazor.Color.Info;
        return MudBlazor.Color.Success;
    }

    private MudBlazor.Color GetRiskBadgeColor(double score)
    {
        if (score < 30) return MudBlazor.Color.Error;
        if (score < 40) return MudBlazor.Color.Warning;
        return MudBlazor.Color.Info;
    }

    private MudBlazor.Color GetStatusBadgeColor(string status)
    {
        switch (status.ToLower())
        {
            case "completed": return MudBlazor.Color.Success;
            case "active": return MudBlazor.Color.Primary;
            case "dropped": return MudBlazor.Color.Error;
            case "paused": return MudBlazor.Color.Warning;
            default: return MudBlazor.Color.Secondary;
        }
    }

    private string GetRiskLevel(double score)
    {
        if (score < 30) return "Critical";
        if (score < 40) return "High Risk";
        return "Moderate Risk";
    }

    private async Task ExportToPdf()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var pdfBytes = await ReportRepository.ExportReportToPdfAsync(user, "lowperformance", new { threshold, startDate, endDate, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "LowPerformanceStudents.pdf", Convert.ToBase64String(pdfBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to PDF: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                var excelBytes = await ReportRepository.ExportReportToExcelAsync(user, "lowperformance", new { threshold, startDate, endDate, selectedCourseId });
                await JSRuntime.InvokeVoidAsync("downloadFile", "LowPerformanceStudents.xlsx", Convert.ToBase64String(excelBytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
        }
    }
}


