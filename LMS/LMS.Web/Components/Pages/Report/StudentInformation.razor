@page "/reports/student-information"
@layout ReportLayout
@attribute [OutputCache(Duration = 60)]
@inject IReportRepository ReportRepository
@inject IJSRuntime JSRuntime

<PageTitle>Student Information Report</PageTitle>
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">üë®‚Äçüéì Student Information Report</h2>
        <p class="text-muted mb-0">Comprehensive student profiles and academic records</p>
    </div>
    <div class="export-buttons">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToPdf">
            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Class="me-2" /> Export PDF
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportToExcel">
            <MudIcon Icon="@Icons.Material.Filled.Description" Class="me-2" /> Export Excel
        </MudButton>
    </div>
</div>

<!-- Filters -->
<MudGrid Class="report-filters">
    <MudItem xs="12" md="3">
        <MudTextField Label="Student ID (Optional)" @bind-Value="studentId" Variant="Variant.Text" Placeholder="Specific student" />
    </MudItem>
    <MudItem xs="12" md="2">
        <MudSelect T="string" Label="Status" @bind-Value="selectedStatus">
            <MudSelectItem Value="@string.Empty">All Status</MudSelectItem>
            <MudSelectItem Value="@("active")">Active</MudSelectItem>
            <MudSelectItem Value="@("inactive")">Inactive</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" md="2">
        <MudDatePicker Label="Start Date" @bind-Date="startDate" DateFormat="yyyy-MM-dd" />
    </MudItem>
    <MudItem xs="12" md="2">
        <MudDatePicker Label="End Date" @bind-Date="endDate" DateFormat="yyyy-MM-dd" />
    </MudItem>
    <MudItem xs="12" md="2">
        <MudNumericField Label="Course ID" @bind-Value="courseId" Variant="Variant.Text" Placeholder="Optional" />
    </MudItem>
    <MudItem xs="12" md="1">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadData" FullWidth="true">
            <MudIcon Icon="@Icons.Material.Filled.Search" />
        </MudButton>
    </MudItem>
</MudGrid>

@if (loading)
{
    <div class="report-loading d-flex flex-column align-items-center justify-content-center py-5">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        <MudText Class="mt-2">Loading student information...</MudText>
    </div>
}
else if (reports?.Any() == true)
{
    <!-- Summary Statistics -->
    <MudGrid Class="stats-grid mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Count()</MudText>
                    <MudText Typo="Typo.subtitle2">Total Students</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Count(r => r.IsActive)</MudText>
                    <MudText Typo="Typo.subtitle2">Active Students</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@($"{reports.Average(r => r.OverallGPA):F2}")</MudText>
                    <MudText Typo="Typo.subtitle2">Average GPA</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4">@reports.Sum(r => r.TotalCoursesEnrolled)</MudText>
                    <MudText Typo="Typo.subtitle2">Total Enrollments</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Search Results -->
    @if (!string.IsNullOrEmpty(studentId))
    {
        <!-- Single Student Detail View -->
        var student = reports.FirstOrDefault();
        if (student != null)
        {
            <MudCard Elevation="2" Class="mb-4">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">üë§ Student Profile</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.subtitle1">Personal Information</MudText>
                            <MudList T="string">
                                <MudListItem T="string"><strong>Name:</strong> @student.FirstName @student.LastName</MudListItem>
                                <MudListItem T="string"><strong>Student ID:</strong> @student.StudentId</MudListItem>
                                <MudListItem T="string"><strong>Email:</strong> @student.Email</MudListItem>
                                <MudListItem T="string"><strong>Phone:</strong> @student.PhoneNumber</MudListItem>
                                <MudListItem T="string"><strong>Date of Birth:</strong> @student.DateOfBirth.ToString("MMM dd, yyyy")</MudListItem>
                                <MudListItem T="string"><strong>Registration:</strong> @student.RegistrationDate.ToString("MMM dd, yyyy")</MudListItem>
                            </MudList>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.subtitle1">Academic Information</MudText>
                            <MudList T="string">
                                <MudListItem T="string"><strong>Status:</strong> <MudChip T="bool" Color="@(student.IsActive ? Color.Success : Color.Secondary)">@student.Status</MudChip></MudListItem>
                                <MudListItem T="string"><strong>Overall GPA:</strong> <strong>@($"{student.OverallGPA:F2}")</strong></MudListItem>
                                <MudListItem T="string"><strong>Total Courses:</strong> @student.TotalCoursesEnrolled</MudListItem>
                                <MudListItem T="string"><strong>Completed:</strong> @student.CompletedCourses</MudListItem>
                                <MudListItem T="string"><strong>Active:</strong> @student.ActiveCourses</MudListItem>
                                <MudListItem T="string"><strong>Total Points:</strong> @student.TotalPoints</MudListItem>
                                <MudListItem T="string"><strong>Level:</strong> @student.Level</MudListItem>
                                <MudListItem T="string"><strong>Last Login:</strong> @student.LastLoginDate?.ToString("MMM dd, yyyy HH:mm")</MudListItem>
                            </MudList>
                        </MudItem>
                    </MudGrid>
                    @if (!string.IsNullOrEmpty(student.Bio))
                    {
                        <div class="mt-3">
                            <MudText Typo="Typo.subtitle1">Bio</MudText>
                            <MudText Class="text-muted">@student.Bio</MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        }
    }
    }
    else
    {
        <!-- Multiple Students Table View -->
        <MudTable T="StudentInformationReportDto" Items="@reports" Hover="true" Breakpoint="Breakpoint.Sm" Class="report-table">
            <HeaderContent>
                <MudTh>Student</MudTh>
                <MudTh>Contact</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Registration</MudTh>
                <MudTh>Courses</MudTh>
                <MudTh>GPA</MudTh>
                <MudTh>Progress</MudTh>
                <MudTh>Last Login</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Student">
                    <MudText Typo="Typo.body2"><strong>@context.FirstName @context.LastName</strong></MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">ID: @context.StudentId</MudText>
                </MudTd>
                <MudTd DataLabel="Contact">
                    <MudText>@context.Email</MudText>
                    @if (!string.IsNullOrEmpty(context.PhoneNumber))
                    {
                        <MudText Typo="Typo.caption" Class="text-muted">@context.PhoneNumber</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="bool" Color="@(context.IsActive ? Color.Success : Color.Secondary)">
                        @context.Status
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Registration">
                    <MudText>@context.RegistrationDate.ToString("MMM dd, yyyy")</MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">Born: @context.DateOfBirth.ToString("MMM dd, yyyy")</MudText>
                </MudTd>
                <MudTd DataLabel="Courses">
                    <MudList T="string">
                        <MudListItem T="string">
                            <MudChip T="int" Color="Color.Primary">Total: @context.TotalCoursesEnrolled</MudChip>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudChip T="int" Color="Color.Success">Completed: @context.CompletedCourses</MudChip>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudChip T="int" Color="Color.Warning">Active: @context.ActiveCourses</MudChip>
                        </MudListItem>
                    </MudList>
                </MudTd>
                <MudTd DataLabel="GPA">
                    <MudChip T="double" Color="@GetGPABadgeColor(context.OverallGPA)">
                        @($"{context.OverallGPA:F2}")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Progress">
                    <div class="text-center">
                        <MudText><strong>@context.TotalPoints</strong> pts</MudText>
                        <MudText Typo="Typo.caption" Class="text-muted">Level @context.Level</MudText>
                        <MudProgressLinear Value="@(Math.Min(100, (context.CompletedCourses / (double)Math.Max(1, context.TotalCoursesEnrolled)) * 100))" Color="Color.Primary" Class="mt-1" Style="height: 4px;" />
                    </div>
                </MudTd>
                <MudTd DataLabel="Last Login">
                    @if (context.LastLoginDate.HasValue)
                    {
                        <MudText>@context.LastLoginDate.Value.ToString("MMM dd")</MudText>
                        <MudText Typo="Typo.caption" Class="text-muted">@context.LastLoginDate.Value.ToString("HH:mm")</MudText>
                    }
                    else
                    {
                        <MudText Class="text-muted">Never</MudText>
                    }
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10, 20, 50})" />
            </PagerContent>
        </MudTable>
    }
}
else
{
    <MudCard Elevation="2" Class="report-no-data">
        <MudCardContent Class="text-center py-5">
            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Large" Class="text-muted mb-3" />
            <MudText Typo="Typo.h5">No Students Found</MudText>
            <MudText Typo="Typo.body1" Class="text-muted">No student records match the selected criteria.</MudText>
        </MudCardContent>
    </MudCard>
}

@code {
    private IEnumerable<StudentInformationReportDto>? reports;
    private bool loading = true;
    private string studentId = string.Empty;
    private string selectedStatus = string.Empty;
    private DateTime? startDate;
    private DateTime? endDate;
    private int? courseId;
    private User user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await LoadData();
    }

    private async Task LoadData()
    {
        if (user == null) return;

        loading = true;
        StateHasChanged();

        try
        {
            if (!string.IsNullOrEmpty(studentId))
            {
                // Load single student
                var singleStudent = await ReportRepository.GetStudentInformationReportAsync(user, studentId);
                reports = new List<StudentInformationReportDto> { singleStudent };

                if (reports == null || !reports.Any())
                {
                    reports = new List<StudentInformationReportDto> { GenerateDummySingleStudentData() };
                }
            }
            else
            {
                // Load multiple students
                reports = await ReportRepository.GetAllStudentsInformationReportAsync(
                user,
                startDate,
                endDate,
                selectedStatus,
                courseId
                );

                if (reports == null || !reports.Any())
                {
                    reports = GenerateDummyMultipleStudentsData();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            if (!string.IsNullOrEmpty(studentId))
            {
                reports = new List<StudentInformationReportDto> { GenerateDummySingleStudentData() };
            }
            else
            {
                reports = GenerateDummyMultipleStudentsData();
            }
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private StudentInformationReportDto GenerateDummySingleStudentData()
    {
        var random = new Random();
        return new StudentInformationReportDto
        {
            StudentId = studentId,
            FirstName = "Dummy",
            LastName = "Student",
            Email = "dummy.student@example.com",
            PhoneNumber = "555-123-4567",
            DateOfBirth = DateTime.Today.AddYears(-20).AddDays(random.Next(-365, 365)),
            RegistrationDate = DateTime.Today.AddYears(-2).AddDays(random.Next(-365, 365)),
            Status = "Active",
            IsActive = true,
            TotalCoursesEnrolled = random.Next(1, 5),
            CompletedCourses = random.Next(0, 4),
            ActiveCourses = random.Next(0, 3),
            OverallGPA = random.NextDouble() * 2 + 2.0, // 2.0 - 4.0
            TotalCredits = random.Next(30, 120),
            EarnedCredits = random.Next(10, 100),
            TotalPoints = random.Next(500, 2000),
            Level = random.Next(1, 4),
            LastLoginDate = DateTime.Today.AddDays(-random.Next(1, 30)),
            Bio = "This is a dummy bio for a single student."
        };
    }

    private IEnumerable<StudentInformationReportDto> GenerateDummyMultipleStudentsData()
    {
        var random = new Random();
        var dummyData = new List<StudentInformationReportDto>();
        var firstNames = new[] { "Alice", "Bob", "Charlie", "Diana", "Eve" };
        var lastNames = new[] { "Smith", "Johnson", "Brown", "Davis", "White" };
        var statuses = new[] { "Active", "Inactive" };

        for (int i = 0; i < 10; i++)
        {
            var isActive = statuses[random.Next(statuses.Length)] == "Active";
            dummyData.Add(new StudentInformationReportDto
            {
                StudentId = $"STU{1000 + i}",
                FirstName = firstNames[random.Next(firstNames.Length)],
                LastName = lastNames[random.Next(lastNames.Length)],
                Email = $"student{i}@example.com",
                PhoneNumber = $"555-111-{1000 + i}",
                DateOfBirth = DateTime.Today.AddYears(-random.Next(18, 25)).AddDays(random.Next(-365, 365)),
                RegistrationDate = DateTime.Today.AddYears(-random.Next(1, 3)).AddDays(random.Next(-365, 365)),
                Status = isActive ? "Active" : "Inactive",
                IsActive = isActive,
                TotalCoursesEnrolled = random.Next(1, 6),
                CompletedCourses = random.Next(0, 5),
                ActiveCourses = random.Next(0, 4),
                OverallGPA = random.NextDouble() * 2 + 2.0, // 2.0 - 4.0
                TotalCredits = random.Next(30, 150),
                EarnedCredits = random.Next(10, 140),
                TotalPoints = random.Next(500, 2500),
                Level = random.Next(1, 5),
                LastLoginDate = isActive ? DateTime.Today.AddDays(-random.Next(1, 60)) : (DateTime?)null,
                Bio = ""
            });
        }
        return dummyData;
    }

    private MudBlazor.Color GetGPABadgeColor(double gpa)
    {
        return gpa switch
        {
            >= 3.5 => MudBlazor.Color.Success,
            >= 3.0 => MudBlazor.Color.Info,
            >= 2.5 => MudBlazor.Color.Warning,
            >= 2.0 => MudBlazor.Color.Secondary,
            _ => MudBlazor.Color.Error
        };
    }

    private async Task ExportToPdf()
    {
        try
        {
            if (reports?.Any() == true)
            {
                var data = reports.Select(r => new
                {
                    Name = $"{r.FirstName} {r.LastName}",
                    StudentId = r.StudentId,
                    Email = r.Email,
                    Status = r.Status,
                    TotalCourses = r.TotalCoursesEnrolled,
                    CompletedCourses = r.CompletedCourses,
                    OverallGPA = r.OverallGPA.ToString("F2"),
                    TotalPoints = r.TotalPoints,
                    Level = r.Level
                });

                var jsonData = System.Text.Json.JsonSerializer.Serialize(data);
                await JSRuntime.InvokeVoidAsync("downloadPdf", "Student Information Report", jsonData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            if (reports?.Any() == true)
            {
                var data = reports.Select(r => new
                {
                    FirstName = r.FirstName,
                    LastName = r.LastName,
                    StudentId = r.StudentId,
                    Email = r.Email,
                    PhoneNumber = r.PhoneNumber,
                    DateOfBirth = r.DateOfBirth,
                    RegistrationDate = r.RegistrationDate,
                    Status = r.Status,
                    TotalCoursesEnrolled = r.TotalCoursesEnrolled,
                    CompletedCourses = r.CompletedCourses,
                    ActiveCourses = r.ActiveCourses,
                    OverallGPA = r.OverallGPA,
                    TotalCredits = r.TotalCredits,
                    EarnedCredits = r.EarnedCredits,
                    TotalPoints = r.TotalPoints,
                    Level = r.Level,
                    LastLoginDate = r.LastLoginDate
                });

                var jsonData = System.Text.Json.JsonSerializer.Serialize(data);
                await JSRuntime.InvokeVoidAsync("downloadExcel", "Student Information Report", jsonData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }
}
