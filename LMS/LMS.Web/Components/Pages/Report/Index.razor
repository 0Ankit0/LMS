
@using LMS.Web.Repositories.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@page "/reports"
@attribute [OutputCache(Duration = 60)]
@attribute [Authorize]
@inject IReportRepository ReportRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject IJSRuntime JSRuntime


<div class="report-dashboard">
    <!-- Dashboard Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">ðŸ“Š Reports Dashboard</h2>
            <p class="text-muted mb-0">Comprehensive analytics and reporting for your LMS</p>
        </div>
        <div class="text-end">
            <small class="text-muted">Last Updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</small>
        </div>
    </div>

    <!-- Quick Stats -->
    <MudGrid Class="stats-grid mb-4">
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="stat-icon">
                        <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" />
                    </div>
                    <div class="stat-content">
                        <MudText Typo="Typo.h5">@totalStudents</MudText>
                        <MudText Typo="Typo.subtitle2">Total Students</MudText>
                        <div class="stat-change">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" />
                            <MudText Typo="Typo.caption" Class="text-success">+5.2%</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="stat-icon">
                        <MudIcon Icon="@Icons.Material.Filled.Book" Size="Size.Large" />
                    </div>
                    <div class="stat-content">
                        <MudText Typo="Typo.h5">@totalCourses</MudText>
                        <MudText Typo="Typo.subtitle2">Active Courses</MudText>
                        <div class="stat-change">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" />
                            <MudText Typo="Typo.caption" Class="text-success">+12.1%</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="stat-icon">
                        <MudIcon Icon="@Icons.Material.Filled.School" Size="Size.Large" />
                    </div>
                    <div class="stat-content">
                        <MudText Typo="Typo.h5">@($"{completedCoursesPercent:F1}%")</MudText>
                        <MudText Typo="Typo.subtitle2">Avg Completion Rate</MudText>
                        <div class="stat-change">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" />
                            <MudText Typo="Typo.caption" Class="text-success">+3.8%</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="stat-icon">
                        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" />
                    </div>
                    <div class="stat-content">
                        <MudText Typo="Typo.h5">@($"{averageSatisfaction:F1}")</MudText>
                        <MudText Typo="Typo.subtitle2">Avg Rating</MudText>
                        <div class="stat-change">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" />
                            <MudText Typo="Typo.caption" Class="text-success">+0.3</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="stat-icon">
                        <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" />
                    </div>
                    <div class="stat-content">
                        <MudText Typo="Typo.h5">@certificatesIssued</MudText>
                        <MudText Typo="Typo.subtitle2">Certificates Issued</MudText>
                        <div class="stat-change">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" />
                            <MudText Typo="Typo.caption" Class="text-success">+18.5%</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="4" lg="2">
            <MudCard Elevation="2">
                <MudCardContent>
                    <div class="stat-icon">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" />
                    </div>
                    <div class="stat-content">
                        <MudText Typo="Typo.h5">@totalEnrollments</MudText>
                        <MudText Typo="Typo.subtitle2">Total Enrollments</MudText>
                        <div class="stat-change">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" />
                            <MudText Typo="Typo.caption" Class="text-success">+7.2%</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Analytics Charts -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="8">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="me-2" />
                    <MudText Typo="Typo.h6">Enrollment Trends (Last 6 Months)</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <canvas id="enrollmentTrendsChart" width="400" height="200"></canvas>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.PieChart" Class="me-2" />
                    <MudText Typo="Typo.h6">Performance Distribution</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <canvas id="performanceChart" width="400" height="200"></canvas>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Course Performance Overview -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="me-2" />
                    <MudText Typo="Typo.h6">Top Performing Courses</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (topCourses?.Any() == true)
                    {
                        @foreach (var course in topCourses.Take(5))
                        {
                            <div class="course-performance-item">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <MudText Typo="Typo.subtitle1">@course.CourseName</MudText>
                                    <MudChip T="double" Color="Color.Success">@($"{course.CompletionRate:F1}%")</MudChip>
                                </div>
                                <MudProgressLinear Value="@(course.CompletionRate)" Color="Color.Success" Class="my-2 h-1.5" />
                                <MudText Typo="Typo.caption" Class="text-muted">@course.TotalEnrollments students enrolled</MudText>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-3">
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Large" Class="mb-2" />
                            <MudText>No course data available</MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Class="me-2" />
                    <MudText Typo="Typo.h6">Courses Needing Attention</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (lowPerformingCourses?.Any() == true)
                    {
                        @foreach (var course in lowPerformingCourses.Take(5))
                        {
                            <div class="course-performance-item">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <MudText Typo="Typo.subtitle1">@course.CourseName</MudText>
                                    <MudChip T="double" Color="Color.Warning">@($"{course.CompletionRate:F1}%")</MudChip>
                                </div>
                                <MudProgressLinear Value="@(course.CompletionRate)" Color="Color.Warning" Class="my-2 h-1.5" />
                                <MudText Typo="Typo.caption" Class="text-muted">@course.TotalEnrollments students enrolled</MudText>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-3">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Class="mb-2" />
                            <MudText>All courses performing well!</MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Report Categories -->
    <MudGrid>
        <!-- Academic Reports -->
        <MudItem xs="12" md="6" lg="4">
            <MudCard Elevation="2" Class="h-100">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.Book" Class="me-2" />
                    <MudText Typo="Typo.h6">Academic Reports</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-muted mb-3">Course completion, assessment performance, and enrollment analytics</MudText>
                    <MudList T="string" Clickable="true">
                        <MudListItem T="string" Href="/reports/course-completion" Icon="@Icons.Material.Filled.CheckCircle">Course Completion</MudListItem>
                        <MudListItem T="string" Href="/reports/assessment-performance" Icon="@Icons.Material.Filled.Assignment">Assessment Performance</MudListItem>
                        <MudListItem T="string" Href="/reports/enrollment-summary" Icon="@Icons.Material.Filled.People">Enrollment Summary</MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Student Reports -->
        <MudItem xs="12" md="6" lg="4">
            <MudCard Elevation="2" Class="h-100">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.Person" Class="me-2" />
                    <MudText Typo="Typo.h6">Student Reports</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-muted mb-3">Student information, progress tracking, and performance analysis</MudText>
                    <MudList T="string" Clickable="true">
                        <MudListItem T="string" Href="/reports/student-information" Icon="@Icons.Material.Filled.Person">Student Information</MudListItem>
                        <MudListItem T="string" Href="/reports/student-progress" Icon="@Icons.Material.Filled.TrendingUp">Student Progress</MudListItem>
                        <MudListItem T="string" Href="/reports/low-performance" Icon="@Icons.Material.Filled.Warning">Low Performance</MudListItem>
                        <MudListItem T="string" Href="/reports/student-engagement" Icon="@Icons.Material.Filled.Favorite">Student Engagement</MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Attendance Reports -->
        <MudItem xs="12" md="6" lg="4">
            <MudCard Elevation="2" Class="h-100">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Class="me-2" />
                    <MudText Typo="Typo.h6">Attendance Reports</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-muted mb-3">Class attendance tracking and student attendance patterns</MudText>
                    <MudList T="string" Clickable="true">
                        <MudListItem T="string" Href="/reports/attendance" Icon="@Icons.Material.Filled.Event">Class Attendance</MudListItem>
                        <MudListItem T="string" Href="/reports/student-attendance" Icon="@Icons.Material.Filled.PersonPin">Student Attendance</MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Forum Reports -->
        <MudItem xs="12" md="6" lg="4">
            <MudCard Elevation="2" Class="h-100">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.Forum" Class="me-2" />
                    <MudText Typo="Typo.h6">Forum Reports</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-muted mb-3">Forum activity, participation, and engagement metrics</MudText>
                    <MudList T="string" Clickable="true">
                        <MudListItem T="string" Href="/reports/forum-activity" Icon="@Icons.Material.Filled.Chat">Forum Activity</MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Analytics -->
        <MudItem xs="12" md="6" lg="4">
            <MudCard Elevation="2" Class="h-100">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.Analytics" Class="me-2" />
                    <MudText Typo="Typo.h6">Analytics</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-muted mb-3">Advanced analytics, trends, and data insights</MudText>
                    <MudList T="string" Clickable="true">
                        <MudListItem T="string" Href="/reports/popular-courses" Icon="@Icons.Material.Filled.Star">Popular Courses</MudListItem>
                        <MudListItem T="string" Href="/reports/learning-analytics" Icon="@Icons.Material.Filled.Lightbulb">Learning Analytics</MudListItem>
                        <MudListItem T="string" Href="/reports/grade-distribution" Icon="@Icons.Material.Filled.PieChart">Grade Distribution</MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Teacher Reports -->
        <MudItem xs="12" md="6" lg="4">
            <MudCard Elevation="2" Class="h-100">
                <MudCardHeader>
                    <MudIcon Icon="@Icons.Material.Filled.School" Class="me-2" />
                    <MudText Typo="Typo.h6">Teacher Reports</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-muted mb-3">Teacher performance, course effectiveness, and teaching analytics</MudText>
                    <MudList T="string" Clickable="true">
                        <MudListItem T="string" Href="/reports/teacher-performance" Icon="@Icons.Material.Filled.Person">Teacher Performance</MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Recent Activity -->
    <MudCard Elevation="2" Class="mt-4">
        <MudCardHeader>
            <MudIcon Icon="@Icons.Material.Filled.LocalActivity" Class="me-2" />
            <MudText Typo="Typo.h6">Recent Activity</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle1">Most Viewed Reports</MudText>
                    <MudList T="string">
                        <MudListItem T="string">
                            <MudText><MudIcon Icon="@Icons.Material.Filled.Description" Class="me-2" />Course Completion Report</MudText>
                            <MudChip T="int" Color="Color.Primary">245 views</MudChip>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudText><MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="me-2" />Student Progress Report</MudText>
                            <MudChip T="int" Color="Color.Primary">189 views</MudChip>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudText><MudIcon Icon="@Icons.Material.Filled.Event" Class="me-2" />Attendance Report</MudText>
                            <MudChip T="int" Color="Color.Primary">156 views</MudChip>
                        </MudListItem>
                    </MudList>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle1">System Status</MudText>
                    <MudList T="string">
                        <MudListItem T="string">
                            <MudText><MudIcon Icon="@Icons.Material.Filled.Storage" Class="me-2" />Database Status</MudText>
                            <MudChip T="string" Color="Color.Success">Online</MudChip>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudText><MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-2" />Report Generation</MudText>
                            <MudChip T="string" Color="Color.Success">Operational</MudChip>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudText><MudIcon Icon="@Icons.Material.Filled.History" Class="me-2" />Last Data Sync</MudText>
                            <MudText Typo="Typo.caption" Class="text-muted">2 minutes ago</MudText>
                        </MudListItem>
                    </MudList>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</div>

@code {
    private User user = default!;
    
    // Dashboard metrics
    private int totalStudents = 0;
    private int totalCourses = 0;
    private int certificatesIssued = 0;
    private int totalEnrollments = 0;
    private double averageSatisfaction = 0.0;
    private double completedCoursesPercent = 0.0;
    
    // Chart data
    private IEnumerable<CourseCompletionReportDto>? topCourses;
    private IEnumerable<CourseCompletionReportDto>? lowPerformingCourses;
    private IEnumerable<EnrollmentSummaryReportDto>? enrollmentTrends;
    
    // Missing variables
    private IEnumerable<User>? studentsInfo;
    private IEnumerable<CourseCompletionReportDto>? coursesData;
    private IEnumerable<TeacherPerformanceReportDto>? teachersData;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DrawCharts();
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Get the current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = await UserManager.GetUserAsync(authState.User);

            if (currentUser != null)
            {
                user = currentUser;
                // Load real data
                await LoadRealDataWithFallback();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            // Initialize with empty data on error
            totalStudents = 0;
            totalCourses = 0;
            certificatesIssued = 0;
            totalEnrollments = 0;
            completedCoursesPercent = 0;
            averageSatisfaction = 0;
            topCourses = new List<CourseCompletionReportDto>();
            lowPerformingCourses = new List<CourseCompletionReportDto>();
            enrollmentTrends = new List<EnrollmentSummaryReportDto>();
        }
    }

    private async Task LoadRealDataWithFallback()
    {
        try
        {
            // Load summary data from various reports
            var studentsInfo = await ReportRepository.GetAllStudentsInformationReportAsync(user);
            var coursesData = await ReportRepository.GetAllCoursesCompletionReportAsync(user);
            var teachersData = await ReportRepository.GetAllTeachersPerformanceReportAsync(user);
            var enrollmentData = await ReportRepository.GetEnrollmentSummaryReportAsync(user, DateTime.Today.AddMonths(-6), DateTime.Today, "Monthly");

            // Use available data, empty collections if no data
            totalStudents = studentsInfo.Count();
            totalCourses = coursesData.Count();
            certificatesIssued = coursesData.Sum(c => c.CertificatesIssued);
            totalEnrollments = coursesData.Sum(c => c.TotalEnrollments);
            completedCoursesPercent = coursesData.Any() ? coursesData.Average(c => c.CompletionRate) : 0;
            averageSatisfaction = teachersData.Any() ? teachersData.Average(t => t.StudentSatisfactionRating) : 0;

            topCourses = coursesData.OrderByDescending(c => c.CompletionRate).Take(10);
            lowPerformingCourses = coursesData.Where(c => c.CompletionRate < 60).OrderBy(c => c.CompletionRate).Take(10);
            enrollmentTrends = enrollmentData.OrderBy(e => e.ReportDate);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading real data: {ex.Message}");
            // Initialize with empty data instead of dummy data
            totalStudents = 0;
            totalCourses = 0;
            certificatesIssued = 0;
            totalEnrollments = 0;
            completedCoursesPercent = 0;
            averageSatisfaction = 0;
            topCourses = new List<CourseCompletionReportDto>();
            lowPerformingCourses = new List<CourseCompletionReportDto>();
            enrollmentTrends = new List<EnrollmentSummaryReportDto>();
        }
    }

    private async Task DrawCharts()
    {
        try
        {
            // Draw enrollment trends chart
            if (enrollmentTrends?.Any() == true)
            {
                var enrollmentChartData = enrollmentTrends.Select(e => new
                {
                    label = e.ReportDate.ToString("MMM yyyy"),
                    newEnrollments = e.NewEnrollments,
                    totalEnrollments = e.TotalEnrollments,
                    completedEnrollments = e.CompletedEnrollments
                }).ToArray();

                await JSRuntime.InvokeVoidAsync("drawLineChart", "enrollmentTrendsChart", enrollmentChartData);
            }

            // Draw performance distribution chart
            var performanceData = new
            {
                excellent = topCourses?.Count(c => c.CompletionRate >= 80) ?? 2,
                good = topCourses?.Count(c => c.CompletionRate >= 60 && c.CompletionRate < 80) ?? 5,
                average = topCourses?.Count(c => c.CompletionRate >= 40 && c.CompletionRate < 60) ?? 2,
                poor = topCourses?.Count(c => c.CompletionRate < 40) ?? 1
            };

            await JSRuntime.InvokeVoidAsync("drawDoughnutChart", "performanceChart", performanceData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error drawing charts: {ex.Message}");
        }
    }
}
