@page "/user/lms/dashboard"
@using LMS.Web.Components.Account
@using MudBlazor.Utilities
@using System.Security.Claims
@inject ISnackbar Snackbar
@inject UserManager<User> UserManager
@if (isLoading)
{
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <div class="lg:col-span-2 flex flex-col gap-6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="180px" Class="w-full rounded-2xl mb-6" />
        </div>
        <div class="flex flex-col gap-6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="180px" Class="w-full rounded-2xl" />
        </div>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" Class="w-full rounded-2xl" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" Class="w-full rounded-2xl" />
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <div class="lg:col-span-2 flex flex-col gap-6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" Class="w-full rounded-2xl mb-6" />
        </div>
        <div class="flex flex-col gap-6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" Class="w-full rounded-2xl" />
        </div>
    </div>
}
else
{
    <div class="min-h-screen bg-gradient-to-br from-green-50 to-teal-50 dark:from-green-950/20 dark:to-teal-950/20 py-8">
        <div class="max-w-7xl mx-auto px-4 sm:px-6">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                <!-- Continue with Course -->
                <div class="lg:col-span-2 flex flex-col gap-6">
                    <MudCard Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900 mb-6">
                        <MudCardContent>
                            <div class="flex flex-col md:flex-row items-center gap-6">
                                <MudImage Src="@ContinueCourse.ThumbnailUrl" Alt="Course image" Elevation="25"
                                    Class="rounded-xl w-40 h-40 object-cover" />
                                <div class="flex-1">
                                    <MudChip T="string" Color="Color.Primary" Variant="Variant.Outlined" Class="mb-2">
                                        Continue Course</MudChip>
                                    <MudText Typo="Typo.h4" Class="font-bold text-green-700 dark:text-green-300 mb-2">
                                        @ContinueCourse.Title</MudText>
                                    <MudText Typo="Typo.body1" Class="mb-3 text-gray-600 dark:text-gray-300">
                                        @ContinueCourse.Description</MudText>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                        Href="@($"/courses/details?id={ContinueCourse.Id}")"
                                        EndIcon="@Icons.Material.Filled.ArrowRight" Class="rounded">Go to Course</MudButton>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </div>
                <!-- Your Progress -->
                <div class="flex flex-col gap-6">
                    <MudCard Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Class="text-center font-bold text-teal-700 dark:text-teal-300">Your
                                    Progress</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudSelect T="int" Label="Select Course" Variant="Variant.Outlined"
                                @bind-Value="selectedProgressCourseId" @onchange="HandleProgressCourseChanged" Class="mb-4">
                                @foreach (var item in ProgressCourses)
                                {
                                    <MudSelectItem T="int" Value="@item.Course.Id">@item.Course.Title</MudSelectItem>
                                }
                            </MudSelect>
                            <div class="flex justify-center my-4">
                                <MudProgressCircular Value="@SelectedProgressCourseProgress" Size="Size.Large"
                                    Color="Color.Primary">
                                    <MudText>@($"{SelectedProgressCourseProgress}%")</MudText>
                                </MudProgressCircular>
                            </div>
                            @if (SelectedProgressCourse != null)
                            {
                                <div class="text-center">
                                    <MudText Typo="Typo.subtitle1" Class="font-bold">@SelectedProgressCourse.Title</MudText>
                                    <MudText Typo="Typo.body2" Class="text-gray-400">@SelectedProgressCourse.Description
                                    </MudText>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                        Href="@($"/courses/details?id={SelectedProgressCourse.Id}")"
                                        EndIcon="@Icons.Material.Filled.ArrowRight" Class="mt-2 rounded">Go to Course
                                    </MudButton>
                                </div>
                            }
                        </MudCardContent>
                    </MudCard>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                <!-- New Courses -->
                <MudCard Elevation="2" Class="h-full rounded-2xl shadow-lg bg-white dark:bg-gray-900">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">New Courses</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/courses">See All</MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            @foreach (var course in NewCourses)
                            {
                                <MudCard Elevation="0" Class="rounded-xl border border-gray-100 dark:border-gray-800">
                                    <MudCardMedia Image="@course.ThumbnailUrl" Height="90" />
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">@course.Title</MudText>
                                        <MudText Typo="Typo.body2" Class="text-muted">@course.Description</MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                            Href="@($"/courses/details?id={course.Id}")" FullWidth="true">View
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            }
                        </div>
                    </MudCardContent>
                </MudCard>
                <!-- Your Courses -->
                <MudCard Elevation="2" Class="h-full rounded-2xl shadow-lg bg-white dark:bg-gray-900">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Your Courses</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/user/courses">See All</MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            @foreach (var course in YourCourses)
                            {
                                <MudCard Elevation="0" Class="rounded-xl border border-gray-100 dark:border-gray-800">
                                    <MudCardMedia Image="@course.ThumbnailUrl" Height="90" />
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">@course.Title</MudText>
                                        <MudText Typo="Typo.body2" Class="text-muted">@course.Description</MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                            Href="@($"/courses/details?id={course.Id}")" FullWidth="true">View
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            }
                        </div>
                    </MudCardContent>
                </MudCard>
            </div>

            <MudGrid Spacing="4">
                <!-- Upcoming Courses -->
                <MudItem xs="12" lg="8">
                    <MudCard Elevation="2" Class="h-100">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Upcoming Courses</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (UpcomingCourses.Any())
                            {
                                @foreach (var course in UpcomingCourses)
                                {
                                    <MudCard Elevation="0" Class="mb-3">
                                        <MudCardContent>
                                            <MudGrid AlignItems="AlignItems.Center">
                                                <MudItem xs="12" md="3">
                                                    <MudImage Src="@course.ThumbnailUrl" Alt="Course image" Elevation="25"
                                                        Class="rounded-lg" />
                                                </MudItem>
                                                <MudItem xs="12" md="9">
                                                    <MudText Typo="Typo.h6">@course.Title</MudText>
                                                    <MudText Typo="Typo.body2" Class="text-muted">@course.Description</MudText>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                                        Href="@($"/courses/details?id={course.Id}")" Class="mt-2">Go to Course
                                                    </MudButton>
                                                </MudItem>
                                            </MudGrid>
                                        </MudCardContent>
                                    </MudCard>
                                }
                            }
                            else
                            {
                                <MudText Typo="Typo.body1" Class="text-muted">No upcoming courses.</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <!-- Your Notes -->
                <MudItem xs="12" lg="4">
                    <MudCard Elevation="2" Class="h-100">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Your Notes</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (UserNotes.Any())
                            {
                                <MudList T="NoteModel">
                                    @foreach (var note in UserNotes)
                                    {
                                        <MudListItem T="NoteModel">
                                            <MudText Typo="Typo.subtitle1">@note.Title</MudText>
                                            <MudText Typo="Typo.body2" Class="text-muted">@note.Content</MudText>
                                        </MudListItem>
                                    }
                                </MudList>
                            }
                            else
                            {
                                <MudText Typo="Typo.body1" Class="text-muted">No notes yet.</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private CourseModel ContinueCourse = new CourseModel();
    private int selectedProgressCourseId;
    private List<ProgressCourseModel> ProgressCourses = new();
    private double SelectedProgressCourseProgress = 0;
    private CourseModel? SelectedProgressCourse;
    private List<CourseModel> NewCourses = new();
    private List<CourseModel> YourCourses = new();
    private List<CourseModel> UpcomingCourses = new();
    private List<NoteModel> UserNotes = new();

    protected override async Task OnInitializedAsync()
    {
        // TODO: Replace with actual data loading from repository for the logged-in user
        // For now, set isLoading to false to show the UI
        isLoading = false;
    }

    private async Task HandleProgressCourseChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var courseId))
        {
            OnProgressCourseChanged(courseId);
        }
    }

    private void OnProgressCourseChanged(int courseId)
    {
        SelectedProgressCourse = ProgressCourses.FirstOrDefault(p => p.Course.Id == courseId)?.Course;
        SelectedProgressCourseProgress = ProgressCourses.FirstOrDefault(p => p.Course.Id == courseId)?.Progress ?? 0;
    }

    public class ProgressCourseModel
    {
        public CourseModel Course { get; set; } = new CourseModel();
        public int Progress { get; set; }
    }

    public class CourseModel
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string ThumbnailUrl { get; set; } = string.Empty;
    }

    public class NoteModel
    {
        public string Title { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
    }
}