@using LMS.Web.Components.Pages.User.Shared
@using MudBlazor;
@using MudBlazor.Utilities;
@page "/user/lms/announcement-list"

@inject IAnnouncementRepository AnnouncementRepository
@inject ISnackbar Snackbar

<PageTitle>Announcements - LMS</PageTitle>


<div
    class="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 border-b border-border">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 py-8 grid grid-cols-1 md:grid-cols-4 gap-8">
        <!-- Sidebar as Tabs -->
        <div class="md:col-span-1">
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-lg p-6 sticky top-8">
                <MudTabs @bind-ActivePanelIndex="@selectedFilterIndex" Elevation="2" Rounded="true"
                    Orientation="Orientation.Vertical" Class="w-full">
                    <MudTabPanel Text="All Announcements">
                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                            Class=$"w-full text-left {GetFilterClass(\"all\")}" OnClick='@(() => SelectFilter(0))'>
                            <MudIcon Icon="@Icons.Material.Filled.Campaign" Class="mr-2" /> All Announcements
                        </MudButton>
                    </MudTabPanel>
                    <MudTabPanel Text="High Priority">
                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                            Class=$"w-full text-left {GetFilterClass(\"high\")}" OnClick='@(() => SelectFilter(1))'>
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" /> High Priority
                        </MudButton>
                    </MudTabPanel>
                    <MudTabPanel Text="Medium Priority">
                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                            Class=$"w-full text-left {GetFilterClass(\"medium\")}" OnClick='@(() => SelectFilter(2))'>
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" /> Medium Priority
                        </MudButton>
                    </MudTabPanel>
                    <MudTabPanel Text="Low Priority">
                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                            Class=$"w-full text-left {GetFilterClass(\"low\")}" OnClick='@(() => SelectFilter(3))'>
                            <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="mr-2" /> Low Priority
                        </MudButton>
                    </MudTabPanel>
                    <MudTabPanel Text="Recent">
                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                            Class=$"w-full text-left {GetFilterClass(\"recent\")}" OnClick='@(() => SelectFilter(4))'>
                            <MudIcon Icon="@Icons.Material.Filled.History" Class="mr-2" /> Recent
                        </MudButton>
                    </MudTabPanel>
                    <MudTabPanel Text="Date Range">
                        <div class="mt-3">
                            <MudText Typo="Typo.subtitle1" Class="font-semibold text-gray-700 dark:text-gray-200 mb-2">
                                Date Range</MudText>
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined"
                                Class="w-full flex flex-wrap gap-2">
                                <MudButton OnClick='@(() => SelectDateFilter(0))'
                                    Variant="@(selectedDateFilterIndex == 0 ? Variant.Filled : Variant.Outlined)"
                                    Class="rounded">Today</MudButton>
                                <MudButton OnClick='@(() => SelectDateFilter(1))'
                                    Variant="@(selectedDateFilterIndex == 1 ? Variant.Filled : Variant.Outlined)"
                                    Class="rounded">This Week</MudButton>
                                <MudButton OnClick='@(() => SelectDateFilter(2))'
                                    Variant="@(selectedDateFilterIndex == 2 ? Variant.Filled : Variant.Outlined)"
                                    Class="rounded">This Month</MudButton>
                                <MudButton OnClick='@(() => SelectDateFilter(3))'
                                    Variant="@(selectedDateFilterIndex == 3 ? Variant.Filled : Variant.Outlined)"
                                    Class="rounded">All Time</MudButton>
                            </MudButtonGroup>
                        </div>
                    </MudTabPanel>
                </MudTabs>
            </div>
        </div>
        <!-- Main Announcements Area -->
        <div class="md:col-span-3">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Announcements</h1>
                    <p class="text-gray-500 dark:text-gray-300">Stay updated with the latest news and information</p>
                </div>
                <div class="flex flex-col sm:flex-row gap-4 items-center">
                    <MudTextField @bind-Value="searchQuery" Placeholder="Search announcements..."
                        Variant="Variant.Outlined" Clearable="true" Class="w-full sm:w-64" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshAnnouncements"
                        Class="flex items-center gap-2">
                        <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2" /> Refresh
                    </MudButton>
                </div>
            </div>
            <div>
                @if (isLoading)
                {
                    <div class="flex flex-col items-center justify-center py-12">
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                        <p class="text-gray-500 dark:text-gray-300 mt-4">Loading announcements...</p>
                    </div>
                }
                else if (filteredAnnouncements?.Any() == true)
                {
                    <div class="space-y-6">
                        @foreach (var announcement in filteredAnnouncements)
                        {
                            <AnnouncementCard Announcement="announcement" />
                        }
                    </div>
                }
                else
                {
                    <MudCard Elevation="2" Class="text-center py-16 border-0 shadow-lg bg-white dark:bg-gray-900">
                        <MudCardContent>
                            <MudIcon Icon="@Icons.Material.Filled.Campaign" Size="Size.Large" Class="text-gray-400 mb-3" />
                            <MudText Typo="Typo.h5" Class="font-bold">No announcements found</MudText>
                            <MudText Typo="Typo.body1" Class="text-gray-500 dark:text-gray-300 mb-6">There are no
                                announcements matching your current filters.</MudText>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ClearFilters">Clear Filters
                            </MudButton>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private int selectedFilterIndex = 0;
    private int selectedDateFilterIndex = 3; // Default to All Time
    private string searchQuery = "";
    private bool isLoading = true;

    // Collections and selected items
    private List<AnnouncementModel> announcements = new();
    private List<AnnouncementModel> filteredAnnouncements = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;

        try
        {
            // Load announcements from repository
            announcements = await AnnouncementRepository.GetAllAnnouncementsAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Log error and use mock data
            Snackbar.Add($"Error loading announcements: {ex.Message}", Severity.Error);
            ApplyFilters();
        }
        finally
        {
            isLoading = false;
        }
    }
    private void SelectFilter(int index)
    {
        selectedFilterIndex = index;
        ApplyFilters();
    }

    private void SelectDateFilter(int index)
    {
        selectedDateFilterIndex = index;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredAnnouncements = announcements.Where(a => a.IsActive).ToList();

        // Apply priority filter
        string filterString = selectedFilterIndex switch
        {
            0 => "all",
            1 => "high",
            2 => "medium",
            3 => "low",
            4 => "recent",
            _ => "all"
        };

        if (filterString != "all")
        {
            if (filterString == "recent")
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.PublishedAt >= DateTime.Now.AddDays(-7))
                .ToList();
            }
            else
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.Priority.Equals(filterString, StringComparison.OrdinalIgnoreCase))
                .ToList();
            }
        }

        // Apply date filter
        if (selectedDateFilterIndex != 3) // 3 is All Time
        {
            var cutoffDate = selectedDateFilterIndex switch
            {
                0 => DateTime.Today,
                1 => DateTime.Now.AddDays(-7),
                2 => DateTime.Now.AddDays(-30),
                _ => DateTime.MinValue
            };

            if (cutoffDate != DateTime.MinValue)
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.PublishedAt >= cutoffDate)
                .ToList();
            }
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredAnnouncements = filteredAnnouncements
            .Where(a => a.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            a.Content.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            a.AuthorName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
        }

        // Sort by date (newest first)
        filteredAnnouncements = filteredAnnouncements
        .OrderByDescending(a => a.PublishedAt)
        .ToList();

        StateHasChanged();
    }

    private async Task RefreshAnnouncements()
    {
        await LoadAnnouncements();
    }

    private void ClearFilters()
    {
        selectedFilterIndex = 0;
        selectedDateFilterIndex = 3;
        searchQuery = "";
        ApplyFilters();
    }

    private string GetFilterClass(string filterName)
    {
        return filterName switch
        {
            "all" => selectedFilterIndex == 0 ? "mud-button-filled" : "mud-button-outlined",
            "high" => selectedFilterIndex == 1 ? "mud-button-filled" : "mud-button-outlined",
            "medium" => selectedFilterIndex == 2 ? "mud-button-filled" : "mud-button-outlined",
            "low" => selectedFilterIndex == 3 ? "mud-button-filled" : "mud-button-outlined",
            "recent" => selectedFilterIndex == 4 ? "mud-button-filled" : "mud-button-outlined",
            _ => "mud-button-outlined"
        };
    }
}