@using LMS.Web.Components.Pages.User.Shared
@using MudBlazor;
@using MudBlazor.Utilities;
@page "/user/lms/announcement-list"

@inject IAnnouncementRepository AnnouncementRepository
@inject ISnackbar Snackbar

<PageTitle>Announcements - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge"
    Class="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 py-8">
    <MudGrid Spacing="6">
        <!-- Sidebar -->
        <MudItem xs="12" md="3">
            <MudPaper Elevation="2" Class="rounded-2xl shadow-lg p-6 sticky top-8">
                <MudText Typo="Typo.h6" Class="font-bold mb-4">Filter Announcements</MudText>

                <!-- Priority Filters -->
                <MudStack Spacing="2" Class="mb-6">
                    <MudText Typo="Typo.subtitle2" Class="font-medium text-gray-700 dark:text-gray-200">Priority
                    </MudText>
                    <MudButtonGroup Orientation="Orientation.Vertical" Color="Color.Primary" FullWidth="true">
                        <MudButton Variant="@(selectedFilterIndex == 0 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectFilter(0))' StartIcon="@Icons.Material.Filled.Campaign"
                            Class="justify-start rounded">All Announcements</MudButton>
                        <MudButton Variant="@(selectedFilterIndex == 1 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectFilter(1))' StartIcon="@Icons.Material.Filled.Warning"
                            Class="justify-start rounded">High Priority</MudButton>
                        <MudButton Variant="@(selectedFilterIndex == 2 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectFilter(2))' StartIcon="@Icons.Material.Filled.Info"
                            Class="justify-start rounded">Medium Priority</MudButton>
                        <MudButton Variant="@(selectedFilterIndex == 3 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectFilter(3))' StartIcon="@Icons.Material.Filled.Notifications"
                            Class="justify-start rounded">Low Priority</MudButton>
                        <MudButton Variant="@(selectedFilterIndex == 4 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectFilter(4))' StartIcon="@Icons.Material.Filled.History"
                            Class="justify-start rounded">Recent</MudButton>
                    </MudButtonGroup>
                </MudStack>

                <!-- Date Range Filters -->
                <MudStack Spacing="2">
                    <MudText Typo="Typo.subtitle2" Class="font-medium text-gray-700 dark:text-gray-200">Date Range
                    </MudText>
                    <MudButtonGroup Orientation="Orientation.Vertical" Color="Color.Secondary" FullWidth="true">
                        <MudButton Variant="@(selectedDateFilterIndex == 0 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectDateFilter(0))' Class="justify-start rounded">Today</MudButton>
                        <MudButton Variant="@(selectedDateFilterIndex == 1 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectDateFilter(1))' Class="justify-start rounded">This Week</MudButton>
                        <MudButton Variant="@(selectedDateFilterIndex == 2 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectDateFilter(2))' Class="justify-start rounded">This Month</MudButton>
                        <MudButton Variant="@(selectedDateFilterIndex == 3 ? Variant.Filled : Variant.Text)"
                            OnClick='@(() => SelectDateFilter(3))' Class="justify-start rounded">All Time</MudButton>
                    </MudButtonGroup>
                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Main Content -->
        <MudItem xs="12" md="9">
            <!-- Header Section -->
            <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-8">
                <MudItem xs="12" md="6">
                    <MudStack>
                        <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Announcements</MudText>
                        <MudText Typo="Typo.body1" Class="text-gray-500 dark:text-gray-300">Stay updated with the latest
                            news and information</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                        <MudTextField Value="searchQuery"
                            ValueChanged="@((string value) => { searchQuery = value; ApplyFilters(); })"
                            Placeholder="Search announcements..." Variant="Variant.Outlined" Clearable="true"
                            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                            Class="flex-1 rounded" />
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RefreshAnnouncements"
                            StartIcon="@Icons.Material.Filled.Refresh" Class="rounded">Refresh</MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>

            <!-- Content Section -->
            @if (isLoading)
            {
                <MudStack Spacing="3" AlignItems="AlignItems.Center" Class="py-16">
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.body1" Class="text-gray-500 dark:text-gray-300">Loading announcements...</MudText>
                </MudStack>
            }
            else if (filteredAnnouncements?.Any() == true)
            {
                <MudStack Spacing="4">
                    @foreach (var announcement in filteredAnnouncements)
                    {
                        <AnnouncementCard Announcement="announcement" />
                    }
                </MudStack>
            }
            else
            {
                <MudPaper Elevation="2" Class="rounded-2xl p-12">
                    <MudStack Spacing="4" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Campaign" Size="Size.Large" Class="text-gray-400" />
                        <MudText Typo="Typo.h5" Class="font-bold text-gray-500">No announcements found</MudText>
                        <MudText Typo="Typo.body1" Class="text-gray-400 text-center">There are no announcements matching
                            your current filters.</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ClearFilters"
                            Class="rounded mt-4">
                            Clear Filters
                        </MudButton>
                    </MudStack>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int selectedFilterIndex = 0;
    private int selectedDateFilterIndex = 3; // Default to All Time
    private string searchQuery = "";
    private bool isLoading = true;

    // Collections and selected items
    private List<AnnouncementModel> announcements = new();
    private List<AnnouncementModel> filteredAnnouncements = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;

        try
        {
            // Load announcements from repository
            announcements = await AnnouncementRepository.GetAllAnnouncementsAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Log error and show empty state
            Snackbar.Add($"Error loading announcements: {ex.Message}", Severity.Error);
            ApplyFilters();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectFilter(int index)
    {
        selectedFilterIndex = index;
        ApplyFilters();
    }

    private void SelectDateFilter(int index)
    {
        selectedDateFilterIndex = index;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredAnnouncements = announcements.Where(a => a.IsActive).ToList();

        // Apply priority filter
        string filterString = selectedFilterIndex switch
        {
            0 => "all",
            1 => "high",
            2 => "medium",
            3 => "low",
            4 => "recent",
            _ => "all"
        };

        if (filterString != "all")
        {
            if (filterString == "recent")
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.PublishedAt >= DateTime.Now.AddDays(-7))
                .ToList();
            }
            else
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.Priority.Equals(filterString, StringComparison.OrdinalIgnoreCase))
                .ToList();
            }
        }

        // Apply date filter
        if (selectedDateFilterIndex != 3) // 3 is All Time
        {
            var cutoffDate = selectedDateFilterIndex switch
            {
                0 => DateTime.Today,
                1 => DateTime.Now.AddDays(-7),
                2 => DateTime.Now.AddDays(-30),
                _ => DateTime.MinValue
            };

            if (cutoffDate != DateTime.MinValue)
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.PublishedAt >= cutoffDate)
                .ToList();
            }
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredAnnouncements = filteredAnnouncements
            .Where(a => a.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            a.Content.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            a.AuthorName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
        }

        // Sort by date (newest first)
        filteredAnnouncements = filteredAnnouncements
        .OrderByDescending(a => a.PublishedAt)
        .ToList();

        StateHasChanged();
    }

    private async Task RefreshAnnouncements()
    {
        await LoadAnnouncements();
        Snackbar.Add("Announcements refreshed successfully", Severity.Success);
    }

    private void ClearFilters()
    {
        selectedFilterIndex = 0;
        selectedDateFilterIndex = 3;
        searchQuery = "";
        ApplyFilters();
    }
}