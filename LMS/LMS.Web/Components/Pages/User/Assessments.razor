@page "/user/lms/assessments"
@using LMS.Web.Components.Account
@using MudBlazor.Utilities;
@using MudBlazor.Components;
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject IEnrollmentRepository EnrollmentRepository
@inject IAssessmentRepository AssessmentRepository
@inject ISnackbar Snackbar

<PageTitle>Assessments & Quizzes - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge"
    Class="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-950/20 dark:to-blue-950/20 py-8">
    <!-- Header Section -->
    <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-8">
        <MudItem xs="12" md="8">
            <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                <MudPaper Class="p-3 bg-green-500 rounded-xl shadow-lg">
                    <MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn" Class="text-white" Size="Size.Large" />
                </MudPaper>
                <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Assessments & Quizzes</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12" md="4" Class="flex flex-wrap gap-2">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                <MudButton OnClick='@(() => FilterAssessments("all"))'
                    Variant="@(selectedFilter == "all" ? Variant.Filled : Variant.Outlined)" Class="rounded">All
                </MudButton>
                <MudButton OnClick='@(() => FilterAssessments("available"))'
                    Variant="@(selectedFilter == "available" ? Variant.Filled : Variant.Outlined)" Class="rounded">
                    Available</MudButton>
                <MudButton OnClick='@(() => FilterAssessments("completed"))'
                    Variant="@(selectedFilter == "completed" ? Variant.Filled : Variant.Outlined)" Class="rounded">
                    Completed</MudButton>
                <MudButton OnClick='@(() => FilterAssessments("pending"))'
                    Variant="@(selectedFilter == "pending" ? Variant.Filled : Variant.Outlined)" Class="rounded">Pending
                </MudButton>
            </MudButtonGroup>
            <MudButton OnClick="RefreshAssessments" Variant="Variant.Outlined" Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Refresh" Class="rounded">Refresh</MudButton>
        </MudItem>
    </MudGrid>

    @if (isLoading)
    {
        <!-- Loading Skeleton -->
        <MudGrid Spacing="4" Class="mb-8">
            @for (int i = 0; i < 4; i++)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Class="rounded-2xl w-full" />
                </MudItem>
            }
        </MudGrid>
        <MudGrid Spacing="4" Class="mb-8">
            @for (int i = 0; i < 3; i++)
            {
                <MudItem xs="12" md="4">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="56px" Class="rounded-2xl w-full" />
                </MudItem>
            }
        </MudGrid>
        <MudGrid Spacing="4">
            @for (int i = 0; i < 6; i++)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="350px" Class="rounded-2xl w-full" />
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <!-- Statistics Cards -->
        <MudGrid Spacing="4" Class="mb-8">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="rounded-2xl shadow bg-primary text-white text-center p-6">
                    <MudStack Spacing="2" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">@totalAssessments</MudText>
                        <MudText Typo="Typo.body2">Total Assessments</MudText>
                    </MudStack>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="rounded-2xl shadow bg-success text-white text-center p-6">
                    <MudStack Spacing="2" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">@completedAssessments</MudText>
                        <MudText Typo="Typo.body2">Completed</MudText>
                    </MudStack>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="rounded-2xl shadow bg-warning text-white text-center p-6">
                    <MudStack Spacing="2" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.PendingActions" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">@pendingAssessments</MudText>
                        <MudText Typo="Typo.body2">Pending</MudText>
                    </MudStack>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2" Class="rounded-2xl shadow bg-info text-white text-center p-6">
                    <MudStack Spacing="2" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Score" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">@averageScore.ToString("F1")%</MudText>
                        <MudText Typo="Typo.body2">Average Score</MudText>
                    </MudStack>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Search and Filter Controls -->
        <MudGrid Spacing="4" Class="mb-8">
            <MudItem xs="12" md="4">
                <MudTextField Value="searchTerm"
                    ValueChanged="@((string value) => { searchTerm = value; FilterAndSortAssessments(); })"
                    Placeholder="Search assessments..." Variant="Variant.Outlined" Clearable="true"
                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                    OnClearButtonClick="ClearFilters" Class="rounded" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudAutocomplete T="CourseModel" Label="All Courses" Variant="Variant.Outlined" Value="selectedCourseModel"
                    ValueChanged="@((CourseModel value) => { selectedCourseModel = value; FilterAndSortAssessments(); })"
                    SearchFunc="@SearchCourses" ToStringFunc="@(c => c == null ? null : c.Title)" Clearable="true"
                    Placeholder="All Courses" Class="rounded" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect T="string" Label="Sort By" Variant="Variant.Outlined" Value="sortBy"
                    ValueChanged="@((string value) => { sortBy = value; FilterAndSortAssessments(); })" Class="rounded">
                    <MudSelectItem T="string" Value="@("newest")">Newest First</MudSelectItem>
                    <MudSelectItem T="string" Value="@("oldest")">Oldest First</MudSelectItem>
                    <MudSelectItem T="string" Value="@("course")">By Course</MudSelectItem>
                    <MudSelectItem T="string" Value="@("difficulty")">By Difficulty</MudSelectItem>
                    <MudSelectItem T="string" Value="@("score")">By Score</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>

        <!-- Assessments Grid -->
        @if (filteredAssessments?.Any() == true)
        {
            <MudGrid Spacing="4">
                @foreach (var assessment in filteredAssessments)
                {
                    var userAttempt = GetUserAttempt(assessment.Id);
                    var isCompleted = userAttempt != null;
                    var canRetake = !isCompleted || assessment.AllowRetakes;

                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="2"
                            Class="@($"rounded-2xl shadow h-full {(isCompleted ? "border-2 border-success" : "")}")">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                            <MudIcon Icon="@GetAssessmentIcon(assessment.Type)" />
                                            <MudText Typo="Typo.h6">@assessment.Type</MudText>
                                        </MudStack>
                                        @if (isCompleted)
                                        {
                                            <MudChip T="string" Color="Color.Success" Size="Size.Small"
                                                Icon="@Icons.Material.Filled.Check">
                                                Completed
                                            </MudChip>
                                        }
                                        else if (IsAssessmentAvailable(assessment))
                                        {
                                            <MudChip T="string" Color="Color.Primary" Size="Size.Small"
                                                Icon="@Icons.Material.Filled.PlayArrow">
                                                Available
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Color="Color.Secondary" Size="Size.Small"
                                                Icon="@Icons.Material.Filled.Lock">
                                                Locked
                                            </MudChip>
                                        }
                                    </MudStack>
                                </CardHeaderContent>
                            </MudCardHeader>

                            <MudCardContent>
                                <MudStack Spacing="3">
                                    <MudText Typo="Typo.h5" Class="font-semibold">@assessment.Title</MudText>
                                    <MudText Typo="Typo.body2" Class="text-gray-600">@assessment.Description</MudText>

                                    <!-- Assessment Details -->
                                    <MudGrid Spacing="2">
                                        <MudItem xs="4">
                                            <MudPaper Class="p-3 text-center rounded">
                                                <MudText Typo="Typo.caption" Class="text-gray-500">Questions</MudText>
                                                <MudText Typo="Typo.subtitle1" Class="font-bold">@assessment.Questions.Count()
                                                </MudText>
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudPaper Class="p-3 text-center rounded">
                                                <MudText Typo="Typo.caption" Class="text-gray-500">Duration</MudText>
                                                <MudText Typo="Typo.subtitle1" Class="font-bold">@assessment.TimeLimit min</MudText>
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudPaper Class="p-3 text-center rounded">
                                                <MudText Typo="Typo.caption" Class="text-gray-500">Pass %</MudText>
                                                <MudText Typo="Typo.subtitle1" Class="font-bold">@assessment.PassingScore%</MudText>
                                            </MudPaper>
                                        </MudItem>
                                    </MudGrid>

                                    <!-- Score Display for Completed Assessments -->
                                    @if (isCompleted && userAttempt != null)
                                    {
                                        <MudStack Spacing="2">
                                            <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                <MudText Typo="Typo.body2">Your Score</MudText>
                                                <MudText Typo="Typo.body2" Class="@("font-bold " + GetScoreClass(userAttempt.Score))">
                                                    @userAttempt.Score.ToString("F1")%
                                                </MudText>
                                            </MudStack>
                                            <MudProgressLinear Value="@(userAttempt.Score)"
                                                Color="@GetScoreProgressColor(userAttempt.Score)" Class="rounded" />
                                            <MudText Typo="Typo.caption" Class="text-gray-500">
                                                Completed: @userAttempt.CompletedAt?.ToString("MMM dd, yyyy 'at' HH:mm")
                                            </MudText>
                                        </MudStack>
                                    }

                                    <!-- Course and Module Info -->
                                    <MudStack Spacing="1">
                                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                            <MudIcon Icon="@Icons.Material.Filled.Book" Size="Size.Small" Class="text-gray-500" />
                                            <MudText Typo="Typo.caption" Class="text-gray-500">@assessment.Course?.Title</MudText>
                                        </MudStack>
                                        @if (assessment.Module != null)
                                        {
                                            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Folder" Size="Size.Small" Class="text-gray-500" />
                                                <MudText Typo="Typo.caption" Class="text-gray-500">@assessment.Module.Title</MudText>
                                            </MudStack>
                                        }
                                    </MudStack>
                                </MudStack>
                            </MudCardContent>

                            <MudCardActions Class="p-4 border-t border-gray-100 dark:border-gray-800">
                                @if (IsAdmin)
                                {
                                    <MudButton Href="@($"/admin/assessments/manage/{assessment.Id}")" Variant="Variant.Filled"
                                        Color="Color.Info" FullWidth="true" StartIcon="@Icons.Material.Filled.Settings"
                                        Class="rounded mb-2">
                                        Manage Assessment
                                    </MudButton>
                                }
                                @if (IsAssessmentAvailable(assessment))
                                {
                                    @if (!isCompleted)
                                    {
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                            OnClick="() => StartAssessment(assessment)" StartIcon="@Icons.Material.Filled.PlayArrow"
                                            Class="rounded">
                                            Start Assessment
                                        </MudButton>
                                    }
                                    else if (canRetake)
                                    {
                                        <MudStack Row Spacing="2" Class="w-full">
                                            <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                                OnClick="() => ViewResults(assessment)" StartIcon="@Icons.Material.Filled.BarChart"
                                                Class="rounded flex-1">
                                                View Results
                                            </MudButton>
                                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                OnClick="() => RetakeAssessment(assessment)" StartIcon="@Icons.Material.Filled.Redo"
                                                Class="rounded flex-1">
                                                Retake
                                            </MudButton>
                                        </MudStack>
                                    }
                                    else
                                    {
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true"
                                            OnClick="() => ViewResults(assessment)" StartIcon="@Icons.Material.Filled.BarChart"
                                            Class="rounded">
                                            View Results
                                        </MudButton>
                                    }
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" Disabled="true"
                                        StartIcon="@Icons.Material.Filled.Lock" Class="rounded">
                                        Prerequisites Required
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper Elevation="2" Class="rounded-2xl p-12">
                <MudStack Spacing="4" AlignItems="AlignItems.Center">
                    @if (string.IsNullOrEmpty(searchTerm) && selectedFilter == "all")
                    {
                        <MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn" Size="Size.Large" Class="text-gray-400" />
                        <MudText Typo="Typo.h5" Class="text-gray-500">No Assessments Available</MudText>
                        <MudText Typo="Typo.body1" Class="text-gray-400 text-center">Enroll in courses to access assessments and
                            quizzes.</MudText>
                        <MudButton Href="/user/lms/courses/catalog" Variant="Variant.Filled" Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Book" Class="rounded mt-4">
                            Browse Courses
                        </MudButton>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Class="text-gray-400" />
                        <MudText Typo="Typo.h5" Class="text-gray-500">No Assessments Found</MudText>
                        <MudText Typo="Typo.body1" Class="text-gray-400 text-center">Try adjusting your search criteria or filters.
                        </MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ClearFilters"
                            StartIcon="@Icons.Material.Filled.Clear" Class="rounded mt-4">
                            Clear Filters
                        </MudButton>
                    }
                </MudStack>
            </MudPaper>
        }
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private string selectedFilter = "all";
    private string searchTerm = "";
    private string? currentUserId;
    private List<AssessmentModel>? assessments;
    private List<AssessmentModel> filteredAssessments = new();
    private List<CourseModel> availableCourses = new();
    private List<AssessmentAttemptModel> userAttempts = new();
    private string sortBy = "newest";

    // Statistics
    private int totalAssessments = 0;
    private int completedAssessments = 0;
    private int pendingAssessments = 0;
    private double averageScore = 0;
    private bool IsAdmin = false; // Placeholder for admin role check
    private CourseModel? selectedCourseModel = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        await LoadAssessments();
    }

    private async Task<IEnumerable<CourseModel>> SearchCourses(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return availableCourses;
        return availableCourses.Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task LoadAssessments()
    {
        try
        {
            isLoading = true;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                // Get user enrollments to find available assessments
                var enrollments = await EnrollmentRepository.GetUserEnrollmentsAsync(currentUserId);
                var courseIds = enrollments?.Select(e => e.CourseId).ToList() ?? new List<int>();
                // Load assessments for enrolled courses
                var allAssessments = new List<AssessmentModel>();
                foreach (var courseId in courseIds)
                {
                    var courseAssessments = await AssessmentRepository.GetAssessmentsByCourseIdAsync(courseId);
                    if (courseAssessments != null)
                    {
                        allAssessments.AddRange(courseAssessments);
                    }
                }
                assessments = allAssessments.ToList();
                // Load available courses for filtering
                availableCourses = enrollments?
                .Where(e => !string.IsNullOrEmpty(e.CourseTitle))
                .Select(e => new CourseModel
                {
                    Id = e.CourseId,
                    Title = e.CourseTitle,
                    ThumbnailUrl = e.CourseThumbnailUrl
                })
                .DistinctBy(c => c.Id)
                .ToList() ?? new List<CourseModel>();
                // Load user attempts (mock data for now)
                LoadUserAttempts(currentUserId);
                // Calculate statistics
                CalculateStatistics();
                // Apply initial filtering
                FilterAndSortAssessments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assessments: {ex.Message}");
            assessments = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadUserAttempts(string userId)
    {
        userAttempts = new List<AssessmentAttemptModel>
{
new AssessmentAttemptModel { AssessmentId = 1, UserId = userId, Score = 85, CompletedAt = DateTime.Now.AddDays(-10) },
new AssessmentAttemptModel { AssessmentId = 2, UserId = userId, Score = 90, CompletedAt = DateTime.Now.AddDays(-5) },
new AssessmentAttemptModel { AssessmentId = 3, UserId = userId, Score = 75, CompletedAt = DateTime.Now.AddDays(-2) }
};
    }

    private void CalculateStatistics()
    {
        if (assessments == null) return;

        totalAssessments = assessments.Count;
        completedAssessments = userAttempts.Count;
        pendingAssessments = totalAssessments - completedAssessments;
        averageScore = userAttempts.Any() ? userAttempts.Average(a => a.Score) : 0;
    }

    private async Task RefreshAssessments()
    {
        await LoadAssessments();
    }

    private void FilterAssessments(string filter)
    {
        selectedFilter = filter;
        FilterAndSortAssessments();
    }

    private void FilterByCourse()
    {
        FilterAndSortAssessments();
    }

    private void SortAssessments()
    {
        FilterAndSortAssessments();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterAndSortAssessments();
    }

    private void FilterAndSortAssessments()
    {
        if (assessments == null) return;

        var filtered = assessments.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a =>
            a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            a.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            (a.Course?.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Apply status filter
        filtered = selectedFilter switch
        {
            "available" => filtered.Where(a => IsAssessmentAvailable(a) && GetUserAttempt(a.Id) == null),
            "completed" => filtered.Where(a => GetUserAttempt(a.Id) != null),
            "pending" => filtered.Where(a => IsAssessmentAvailable(a) && GetUserAttempt(a.Id) == null),
            _ => filtered
        };

        // Apply course filter
        if (selectedCourseModel != null)
        {
            filtered = filtered.Where(a => a.CourseId == selectedCourseModel.Id);
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "oldest" => filtered.OrderBy(a => a.CreatedAt),
            "course" => filtered.OrderBy(a => a.Course?.Title),
            "difficulty" => filtered.OrderByDescending(a => a.PassingScore),
            "score" => filtered.OrderByDescending(a => GetUserAttempt(a.Id)?.Score ?? 0),
            _ => filtered.OrderByDescending(a => a.CreatedAt)
        };

        filteredAssessments = filtered.ToList();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedFilter = "all";
        selectedCourseModel = null;
        FilterAndSortAssessments();
    }

    private AssessmentAttemptModel? GetUserAttempt(int assessmentId)
    {
        return userAttempts.FirstOrDefault(a => a.AssessmentId == assessmentId);
    }

    private bool IsAssessmentAvailable(AssessmentModel assessment)
    {
        // In a real implementation, this would check prerequisites, course progress, etc.
        return true; // Mock: all assessments are available
    }

    private void StartAssessment(AssessmentModel assessment)
    {
        Snackbar.Add($"Starting assessment: {assessment.Title}", Severity.Info);
        // In real implementation, navigate to assessment page
    }

    private void RetakeAssessment(AssessmentModel assessment)
    {
        Snackbar.Add($"Retaking Assessment {assessment.Title}", Severity.Info);
        // In real implementation, navigate to assessment page
    }

    private void ViewResults(AssessmentModel assessment)
    {
        Snackbar.Add($"Viewing Results {assessment.Title}", Severity.Info);
    }

    private string GetAssessmentIcon(string type) => type.ToLower() switch
    {
        "quiz" => Icons.Material.Filled.Quiz,
        "exam" => Icons.Material.Filled.Assignment,
        "assignment" => Icons.Material.Filled.Description,
        "project" => Icons.Material.Filled.Code,
        _ => Icons.Material.Filled.AssignmentTurnedIn
    };

    private string GetScoreClass(double score) => score switch
    {
        >= 90 => "mud-text-success",
        >= 80 => "mud-text-info",
        >= 70 => "mud-text-warning",
        _ => "mud-text-error"
    };

    private string GetCardClass(bool isCompleted) => isCompleted ? "h-100 mud-border-success" : "h-100";

    private MudBlazor.Color GetScoreProgressColor(double score) => score switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Error
    };

    // Helper model for user attempts
    public class AssessmentAttemptModel
    {
        public int AssessmentId { get; set; }
        public string UserId { get; set; } = string.Empty;
        public double Score { get; set; }
        public DateTime? CompletedAt { get; set; }
    }
}