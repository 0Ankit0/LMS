@page "/user/lms/assessments"
@using LMS.Web.Components.Account
@using MudBlazor.Utilities;
@using MudBlazor.Components;
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject IEnrollmentRepository EnrollmentRepository
@inject IAssessmentRepository AssessmentRepository
@inject ISnackbar Snackbar

<MudToolBar Class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <MudText Typo="Typo.h5" Class="h2"><MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn" Class="text-success me-2" />Assessments & Quizzes</MudText>
    
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton OnClick='@(() => FilterAssessments("all"))' Variant="@(selectedFilter == "all" ? Variant.Filled : Variant.Outlined)">All</MudButton>
        <MudButton OnClick='@(() => FilterAssessments("available"))' Variant="@(selectedFilter == "available" ? Variant.Filled : Variant.Outlined)">Available</MudButton>
        <MudButton OnClick='@(() => FilterAssessments("completed"))' Variant="@(selectedFilter == "completed" ? Variant.Filled : Variant.Outlined)">Completed</MudButton>
        <MudButton OnClick='@(() => FilterAssessments("pending"))' Variant="@(selectedFilter == "pending" ? Variant.Filled : Variant.Outlined)">Pending</MudButton>
    </MudButtonGroup>
    <MudButton OnClick="RefreshAssessments" Variant="Variant.Outlined" Color="Color.Primary" Class="ms-2">
        <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="me-2" /> Refresh
    </MudButton>
</MudToolBar>

@if (isLoading)
{
    <!-- Skeleton Loader -->
    <div class="row mb-4">
        @for (int i = 0; i < 4; i++)
        {
            <div class="col-md-3">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" />
            </div>
        }
    </div>
    <div class="row mb-4">
        <div class="col-md-6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="56px" />
        </div>
        <div class="col-md-3">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="56px" />
        </div>
        <div class="col-md-3">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="56px" />
        </div>
    </div>
    <div class="row">
        @for (int i = 0; i < 6; i++)
        {
            <div class="col-lg-6 col-xl-4 mb-4">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="350px" />
            </div>
        }
    </div>
}
else
{
    <!-- Assessment Statistics -->
    <div class="row mb-4">
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent Class="text-center mud-bg-primary mud-text-white">
                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Class="mb-2" />
                    <MudText Typo="Typo.h4">@totalAssessments</MudText>
                    <MudText Typo="Typo.body2">Total Assessments</MudText>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent Class="text-center mud-bg-success mud-text-white">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Class="mb-2" />
                    <MudText Typo="Typo.h4">@completedAssessments</MudText>
                    <MudText Typo="Typo.body2">Completed</MudText>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent Class="text-center mud-bg-warning mud-text-white">
                    <MudIcon Icon="@Icons.Material.Filled.PendingActions" Size="Size.Large" Class="mb-2" />
                    <MudText Typo="Typo.h4">@pendingAssessments</MudText>
                    <MudText Typo="Typo.body2">Pending</MudText>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-md-3">
            <MudCard Elevation="2">
                <MudCardContent Class="text-center mud-bg-info mud-text-white">
                    <MudIcon Icon="@Icons.Material.Filled.Score" Size="Size.Large" Class="mb-2" />
                    <MudText Typo="Typo.h4">@averageScore.ToString("F1")%</MudText>
                    <MudText Typo="Typo.body2">Average Score</MudText>
                </MudCardContent>
            </MudCard>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="row mb-4">
        <div class="col-md-6">
            <MudTextField @bind-Value="searchTerm" Placeholder="Search assessments..." Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" OnClearButtonClick="ClearFilters" />
        </div>
        <div class="col-md-3">
            <MudAutocomplete T="CourseModel" Label="All Courses" Variant="Variant.Outlined"
                                     @bind-Value="selectedCourseModel"
                                     SearchFunc="@SearchCourses"
                                     ToStringFunc="@(c => c == null ? null : c.Title)"
                                     Clearable="true"
                                     Placeholder="All Courses" />
        </div>
        <div class="col-md-3">
            <MudSelect T="string" Label="Sort By" Variant="Variant.Outlined" @bind-Value="sortBy" TextChanged="SortAssessments">
                <MudSelectItem T="string" Value="@("newest")">Newest First</MudSelectItem>
                <MudSelectItem T="string" Value="@("oldest")">Oldest First</MudSelectItem>
                <MudSelectItem T="string" Value="@("course")">By Course</MudSelectItem>
                <MudSelectItem T="string" Value="@("difficulty")">By Difficulty</MudSelectItem>
                <MudSelectItem T="string" Value="@("score")">By Score</MudSelectItem>
            </MudSelect>
        </div>
    </div>

    <!-- Assessments List -->
    @if (filteredAssessments?.Any() == true)
    {
        <div class="row">
            @foreach (var assessment in filteredAssessments)
            {
                var userAttempt = GetUserAttempt(assessment.Id);
                var isCompleted = userAttempt != null;
                var canRetake = !isCompleted || assessment.AllowRetakes;

                <div class="col-lg-6 col-xl-4 mb-4">
                    <MudCard Elevation="2" Class="@GetCardClass(isCompleted)">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@GetAssessmentIcon(assessment.Type)" Class="me-2" />
                                @assessment.Type
                            </MudText>
                            <MudSpacer />
                            @if (isCompleted)
                            {
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="me-1" /> Completed
                                </MudChip>
                            }
                            else if (IsAssessmentAvailable(assessment))
                            {
                                <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                                    <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" Class="me-1" /> Available
                                </MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Secondary" Size="Size.Small">
                                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" Class="me-1" /> Locked
                                </MudChip>
                            }
                        </MudCardHeader>

                        <MudCardContent>
                            <MudText Typo="Typo.h5" Class="card-title">@assessment.Title</MudText>
                            <MudText Typo="Typo.body2" Class="card-text text-muted">@assessment.Description</MudText>

                            <div class="mb-3">
                                <MudGrid Spacing="1">
                                    <MudItem xs="4">
                                        <MudPaper Class="pa-2 text-center">
                                            <MudText Typo="Typo.caption" Class="text-muted">Questions</MudText>
                                            <MudText Typo="Typo.subtitle1">@assessment.Questions.Count()</MudText>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudPaper Class="pa-2 text-center">
                                            <MudText Typo="Typo.caption" Class="text-muted">Duration</MudText>
                                            <MudText Typo="Typo.subtitle1">@assessment.TimeLimit min</MudText>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudPaper Class="pa-2 text-center">
                                            <MudText Typo="Typo.caption" Class="text-muted">Pass %</MudText>
                                            <MudText Typo="Typo.subtitle1">@assessment.PassingScore%</MudText>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </div>

                            @if (isCompleted && userAttempt != null)
                            {
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <MudText Typo="Typo.body2">Your Score</MudText>
                                        <MudText Typo="Typo.body2" Class="@("fw-bold " + GetScoreClass(userAttempt.Score))">
                                            @userAttempt.Score.ToString("F1")%
                                        </MudText>
                                    </div>
                                    <MudProgressLinear Value="@(userAttempt.Score)" Color="@GetScoreProgressColor(userAttempt.Score)" Class="mb-2" Style="height: 8px;" />
                                    <MudText Typo="Typo.caption" Class="text-muted">
                                        Completed: @userAttempt.CompletedAt?.ToString("MMM dd, yyyy 'at' HH:mm")
                                    </MudText>
                                </div>
                            }

                            <div class="mb-2">
                                <MudText Typo="Typo.caption" Class="text-muted">
                                    <MudIcon Icon="@Icons.Material.Filled.Book" Size="Size.Small" Class="me-1" /> @assessment.Course?.Title
                                </MudText>
                            </div>

                            @if (assessment.Module != null)
                            {
                                <div class="mb-2">
                                    <MudText Typo="Typo.caption" Class="text-muted">
                                        <MudIcon Icon="@Icons.Material.Filled.Folder" Size="Size.Small" Class="me-1" /> @assessment.Module.Title
                                    </MudText>
                                </div>
                            }
                        </MudCardContent>

                        <MudCardActions Class="bg-transparent">
                            @if (IsAdmin)
                            {
                                <MudButton Href="@($"/admin/assessments/manage/{assessment.Id}")" Variant="Variant.Filled" Color="Color.Info" FullWidth="true" Class="mb-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-2" /> Manage Assessment
                                </MudButton>
                            }
                            @if (IsAssessmentAvailable(assessment))
                            {
                                @if (!isCompleted)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="() => StartAssessment(assessment)">
                                        <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="me-2" /> Start Assessment
                                    </MudButton>
                                }
                                else if (canRetake)
                                {
                                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" FullWidth="true">
                                        <MudButton OnClick="() => ViewResults(assessment)">
                                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="me-2" /> View Results
                                        </MudButton>
                                        <MudButton OnClick="() => RetakeAssessment(assessment)" Variant="Variant.Filled">
                                            <MudIcon Icon="@Icons.Material.Filled.Redo" Class="me-2" /> Retake
                                        </MudButton>
                                    </MudButtonGroup>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true" OnClick="() => ViewResults(assessment)">
                                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="me-2" /> View Results
                                    </MudButton>
                                }
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" Disabled="true">
                                    <MudIcon Icon="@Icons.Material.Filled.Lock" Class="me-2" /> Prerequisites Required
                                </MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <MudCard Elevation="2">
                <MudCardContent>
                    @if (string.IsNullOrEmpty(searchTerm) && selectedFilter == "all")
                    {
                        <MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn" Size="Size.Large" Class="text-muted mb-3" />
                        <MudText Typo="Typo.h5" Class="text-muted">No Assessments Available</MudText>
                        <MudText Typo="Typo.body1" Class="text-muted">Enroll in courses to access assessments and quizzes.</MudText>
                        <MudButton Href="/user/lms/coursecatalog" Variant="Variant.Filled" Color="Color.Primary">
                            <MudIcon Icon="@Icons.Material.Filled.Book" Class="me-2" /> Browse Courses
                        </MudButton>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Class="text-muted mb-3" />
                        <MudText Typo="Typo.h5" Class="text-muted">No Assessments Found</MudText>
                        <MudText Typo="Typo.body1" Class="text-muted">Try adjusting your search criteria or filters.</MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ClearFilters">
                            <MudIcon Icon="@Icons.Material.Filled.Clear" Class="me-2" /> Clear Filters
                        </MudButton>
                    }
                </MudCardContent>
            </MudCard>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private string selectedFilter = "all";
    private string searchTerm = "";
    private string? currentUserId;
    private List<AssessmentModel>? assessments;
    private List<AssessmentModel> filteredAssessments = new();
    private List<CourseModel> availableCourses = new();
    private List<AssessmentAttemptModel> userAttempts = new();
    private string sortBy = "newest";

    // Statistics
    private int totalAssessments = 0;
    private int completedAssessments = 0;
    private int pendingAssessments = 0;
    private double averageScore = 0;
    private bool IsAdmin = false; // Placeholder for admin role check
    private CourseModel? selectedCourseModel = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        await LoadAssessments();
    }

    private async Task<IEnumerable<CourseModel>> SearchCourses(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return availableCourses;
        return availableCourses.Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task LoadAssessments()
    {
        try
        {
            isLoading = true;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                // Get user enrollments to find available assessments
                var enrollments = await EnrollmentRepository.GetUserEnrollmentsAsync(currentUserId);
                var courseIds = enrollments?.Select(e => e.CourseId).ToList() ?? new List<int>();
                // Load assessments for enrolled courses
                var allAssessments = new List<AssessmentModel>();
                foreach (var courseId in courseIds)
                {
                    var courseAssessments = await AssessmentRepository.GetAssessmentsByCourseIdAsync(courseId);
                    if (courseAssessments != null)
                    {
                        allAssessments.AddRange(courseAssessments);
                    }
                }
                assessments = allAssessments.ToList();
                // Load available courses for filtering
                availableCourses = enrollments?
                    .Where(e => !string.IsNullOrEmpty(e.CourseTitle))
                    .Select(e => new CourseModel
                    {
                        Id = e.CourseId,
                        Title = e.CourseTitle,
                        ThumbnailUrl = e.CourseThumbnailUrl
                    })
                    .DistinctBy(c => c.Id)
                    .ToList() ?? new List<CourseModel>();
                // Load user attempts (mock data for now)
                LoadUserAttempts(currentUserId);
                // Calculate statistics
                CalculateStatistics();
                // Apply initial filtering
                FilterAndSortAssessments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assessments: {ex.Message}");
            assessments = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadUserAttempts(string userId)
    {
        userAttempts = new List<AssessmentAttemptModel>
        {
            new AssessmentAttemptModel { AssessmentId = 1, UserId = userId, Score = 85, CompletedAt = DateTime.Now.AddDays(-10) },
            new AssessmentAttemptModel { AssessmentId = 2, UserId = userId, Score = 90, CompletedAt = DateTime.Now.AddDays(-5) },
            new AssessmentAttemptModel { AssessmentId = 3, UserId = userId, Score = 75, CompletedAt = DateTime.Now.AddDays(-2) }
        };
    }

    private void CalculateStatistics()
    {
        if (assessments == null) return;

        totalAssessments = assessments.Count;
        completedAssessments = userAttempts.Count;
        pendingAssessments = totalAssessments - completedAssessments;
        averageScore = userAttempts.Any() ? userAttempts.Average(a => a.Score) : 0;
    }

    private async Task RefreshAssessments()
    {
        await LoadAssessments();
    }

    private void FilterAssessments(string filter)
    {
        selectedFilter = filter;
        FilterAndSortAssessments();
    }

    private void FilterByCourse()
    {
        FilterAndSortAssessments();
    }

    private void SortAssessments()
    {
        FilterAndSortAssessments();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterAndSortAssessments();
    }

    private void FilterAndSortAssessments()
    {
        if (assessments == null) return;

        var filtered = assessments.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a =>
            a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            a.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            (a.Course?.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Apply status filter
        filtered = selectedFilter switch
        {
            "available" => filtered.Where(a => IsAssessmentAvailable(a) && GetUserAttempt(a.Id) == null),
            "completed" => filtered.Where(a => GetUserAttempt(a.Id) != null),
            "pending" => filtered.Where(a => IsAssessmentAvailable(a) && GetUserAttempt(a.Id) == null),
            _ => filtered
        };

        // Apply course filter
        if (selectedCourseModel != null)
        {
            filtered = filtered.Where(a => a.CourseId == selectedCourseModel.Id);
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "oldest" => filtered.OrderBy(a => a.CreatedAt),
            "course" => filtered.OrderBy(a => a.Course?.Title),
            "difficulty" => filtered.OrderByDescending(a => a.PassingScore),
            "score" => filtered.OrderByDescending(a => GetUserAttempt(a.Id)?.Score ?? 0),
            _ => filtered.OrderByDescending(a => a.CreatedAt)
        };

        filteredAssessments = filtered.ToList();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedFilter = "all";
        selectedCourseModel = null;
        FilterAndSortAssessments();
    }

    private AssessmentAttemptModel? GetUserAttempt(int assessmentId)
    {
        return userAttempts.FirstOrDefault(a => a.AssessmentId == assessmentId);
    }

    private bool IsAssessmentAvailable(AssessmentModel assessment)
    {
        // In a real implementation, this would check prerequisites, course progress, etc.
        return true; // Mock: all assessments are available
    }

    private async Task StartAssessment(AssessmentModel assessment)
    {
        Snackbar.Add($"Starting assessment: {assessment.Title}", Severity.Info);
        // In real implementation, navigate to assessment page
    }

    private async Task RetakeAssessment(AssessmentModel assessment)
    {
        Snackbar.Add($"Retaking Assessment {assessment.Title}", Severity.Info);
        // In real implementation, navigate to assessment page
    }

    private async Task ViewResults(AssessmentModel assessment)
    {
         Snackbar.Add($"Viewing Results {assessment.Title}", Severity.Info);
    }

    private string GetAssessmentIcon(string type) => type.ToLower() switch
    {
        "quiz" => Icons.Material.Filled.Quiz,
        "exam" => Icons.Material.Filled.Assignment,
        "assignment" => Icons.Material.Filled.Description,
        "project" => Icons.Material.Filled.Code,
        _ => Icons.Material.Filled.AssignmentTurnedIn
    };

    private string GetScoreClass(double score) => score switch
    {
        >= 90 => "mud-text-success",
        >= 80 => "mud-text-info",
        >= 70 => "mud-text-warning",
        _ => "mud-text-error"
    };

    private string GetCardClass(bool isCompleted) => isCompleted ? "h-100 mud-border-success" : "h-100";

    private MudBlazor.Color GetScoreProgressColor(double score) => score switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Error
    };

    // Helper model for user attempts
    public class AssessmentAttemptModel
    {
        public int AssessmentId { get; set; }
        public string UserId { get; set; } = string.Empty;
        public double Score { get; set; }
        public DateTime? CompletedAt { get; set; }
    }
}}