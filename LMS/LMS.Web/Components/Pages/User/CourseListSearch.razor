@inject ICourseRepository CourseRepository
@inject NavigationManager NavigationManager
@using LMS.Web.Components.Pages.User.Shared
@using MudBlazor




<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6">
        <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-lg p-6">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Search Courses</h1>
                <MudTextField @bind-Value="searchTerm" Placeholder="Search courses..." Variant="Variant.Outlined" Clearable="true"
                    Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                    OnClearButtonClick="OnClearSearchButtonClick" Immediate="true" Class="w-full md:w-80" />
            </div>
            <div>
                @if (isLoading)
                {
                    <div class="flex justify-center items-center h-40">
                        <MudProgressCircular Indeterminate="true" Color="Color.Info" />
                    </div>
                }
                else if (filteredCourses?.Any() == true)
                {
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                        @foreach (var course in filteredCourses)
                        {
                            <CourseCard Course="course" OnClick="@(c => NavigationManager.NavigateTo($"/user/lms/course/{c.Id}"))" />
                        }
                    </div>
                }
                else
                {
                    <MudCard Elevation="2" Class="flex items-center justify-center bg-gray-50 dark:bg-gray-800 min-h-[140px]">
                        <MudCardContent Class="text-center text-gray-400 dark:text-gray-500">
                            <MudIcon Icon="@Icons.Material.Filled.SentimentDissatisfied" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6">No courses found.</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public UserModel? User { get; set; }

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterCourses();
                StateHasChanged();
            }
        }
    }
    private List<CourseModel>? courses;
    private List<CourseModel>? filteredCourses;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        isLoading = true;
        StateHasChanged();
        courses = await CourseRepository.GetAllCoursesAsync();
        FilterCourses();
        isLoading = false;
        StateHasChanged();
    }

    private void OnClearSearchButtonClick()
    {
        searchTerm = string.Empty;
        FilterCourses();
    }

    private void FilterCourses()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCourses = courses;
        }
        else
        {
            filteredCourses = courses?
            .Where(c =>
            (!string.IsNullOrEmpty(c.Title) && c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(c.Description) && c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(c.InstructorName) && c.InstructorName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();
        }
    }

    private string FormatDuration(TimeSpan duration)
    {
        var hours = (int)duration.TotalHours;
        var minutes = duration.Minutes;

        if (hours > 0)
        {
            return minutes > 0 ? $"{hours}h {minutes}m" : $"{hours}h";
        }
        return $"{minutes}m";
    }
}