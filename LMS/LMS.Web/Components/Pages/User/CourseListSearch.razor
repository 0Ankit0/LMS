@inject ICourseRepository CourseRepository
@inject NavigationManager NavigationManager
@using LMS.Web.Components.Pages.User.Shared
@using MudBlazor

<PageTitle>Search Courses - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large"
    Class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 py-8">
    <MudPaper Elevation="2" Class="rounded-2xl shadow-lg p-8">
        <!-- Header Section -->
        <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-6">
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Search Courses</MudText>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField Value="searchTerm" ValueChanged="@((string value) => searchTerm = value)"
                    Placeholder="Search courses..." Variant="Variant.Outlined" Clearable="true"
                    Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                    OnClearButtonClick="OnClearSearchButtonClick" Immediate="true" Class="w-full rounded"
                    FullWidth="true" />
            </MudItem>
        </MudGrid>

        <!-- Results Section -->
        @if (isLoading)
        {
            <MudStack Spacing="3" AlignItems="AlignItems.Center" Class="py-16">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
                <MudText Typo="Typo.body1" Class="text-gray-500">Searching courses...</MudText>
            </MudStack>
        }
        else if (filteredCourses?.Any() == true)
        {
            <MudGrid Spacing="4">
                @foreach (var course in filteredCourses)
                {
                    <MudItem xs="12" sm="6" md="6">
                        <CourseCard Course="course"
                            OnClick="@(c => NavigationManager.NavigateTo($"/user/lms/course/{c.Id}"))" />
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudStack Spacing="3" AlignItems="AlignItems.Center" Class="py-16">
                <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Class="text-gray-400" />
                <MudText Typo="Typo.h6" Class="text-gray-500">No courses found</MudText>
                <MudText Typo="Typo.body1" Class="text-gray-400 text-center">
                    @if (string.IsNullOrWhiteSpace(searchTerm))
                    {
                        <span>Enter a search term to find courses</span>
                    }
                    else
                    {
                        <span>Try different keywords or browse our <MudLink Href="/user/lms/courses/catalog"
                                Color="Color.Primary">course catalog</MudLink></span>
                    }
                </MudText>
                @if (!string.IsNullOrWhiteSpace(searchTerm))
                {
                    <MudButton Color="Color.Primary" OnClick="OnClearSearchButtonClick" Class="rounded mt-2">
                        Clear Search
                    </MudButton>
                }
            </MudStack>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public UserModel? User { get; set; }

    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterCourses();
                StateHasChanged();
            }
        }
    }
    private List<CourseModel>? courses;
    private List<CourseModel>? filteredCourses;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        isLoading = true;
        StateHasChanged();
        courses = await CourseRepository.GetAllCoursesAsync();
        FilterCourses();
        isLoading = false;
        StateHasChanged();
    }

    private void OnClearSearchButtonClick()
    {
        searchTerm = string.Empty;
        FilterCourses();
    }

    private void FilterCourses()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCourses = courses;
        }
        else
        {
            filteredCourses = courses?
            .Where(c =>
            (!string.IsNullOrEmpty(c.Title) && c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(c.Description) && c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(c.InstructorName) && c.InstructorName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();
        }
    }

    private string FormatDuration(TimeSpan duration)
    {
        var hours = (int)duration.TotalHours;
        var minutes = duration.Minutes;

        if (hours > 0)
        {
            return minutes > 0 ? $"{hours}h {minutes}m" : $"{hours}h";
        }
        return $"{minutes}m";
    }
}


