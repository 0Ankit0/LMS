@page "/user/lms/analytics"
@using System.Security.Claims
@using MudBlazor
@using LMS.Repositories
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAnalyticsRepository AnalyticsRepository
@inject ISnackbar Snackbar

<PageTitle>Learning Analytics - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge"
    Class="min-h-screen bg-gradient-to-br from-indigo-50 to-blue-50 dark:from-indigo-950/20 dark:to-blue-950/20 py-8">
    <!-- Header Section -->
    <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-8">
        <MudItem xs="12" md="6">
            <MudStack>
                <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Learning Analytics</MudText>
                <MudText Typo="Typo.body1" Class="text-gray-500 dark:text-gray-300">Track your learning progress and
                    performance</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudStack Row Spacing="3" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary">
                    <MudButton OnClick='@(() => SelectView("overview"))'
                        Variant="@(selectedView == "overview" ? Variant.Filled : Variant.Outlined)" Class="rounded">
                        Overview</MudButton>
                    <MudButton OnClick='@(() => SelectView("activity"))'
                        Variant="@(selectedView == "activity" ? Variant.Filled : Variant.Outlined)" Class="rounded">
                        Activity</MudButton>
                    <MudButton OnClick='@(() => SelectView("performance"))'
                        Variant="@(selectedView == "performance" ? Variant.Filled : Variant.Outlined)" Class="rounded">
                        Performance</MudButton>
                </MudButtonGroup>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshAnalytics"
                    StartIcon="@Icons.Material.Filled.Refresh" Class="rounded">Refresh</MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    @if (isLoading)
    {
        <!-- Loading State -->
        <MudGrid Spacing="6">
            <!-- KPI Cards Skeleton -->
            <MudItem xs="12">
                <MudGrid Spacing="4">
                    @for (int i = 0; i < 4; i++)
                    {
                        <MudItem xs="12" sm="6" lg="3">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="130px" Class="rounded-2xl" />
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
            <!-- Main Content Skeleton -->
            <MudItem xs="12" lg="8">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" Class="rounded-2xl" />
            </MudItem>
            <MudItem xs="12" lg="4">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" Class="rounded-2xl" />
            </MudItem>
        </MudGrid>
    }
    else
    {
        <!-- KPI Cards -->
        <MudGrid Spacing="4" Class="mb-8">
            <!-- Overall Progress Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3"
                    Class="rounded-2xl overflow-hidden bg-gradient-to-r from-blue-500 to-blue-600 text-white">
                    <MudStack Row AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" />
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h4" Class="font-bold">@overallProgress.ToString("F1")%</MudText>
                            <MudText Typo="Typo.body2" Class="opacity-90">Overall Progress</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Completed Courses Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3"
                    Class="rounded-2xl overflow-hidden bg-gradient-to-r from-green-500 to-green-600 text-white">
                    <MudStack Row AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" />
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h4" Class="font-bold">@completedCourses</MudText>
                            <MudText Typo="Typo.body2" Class="opacity-90">Completed Courses</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Study Hours Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3"
                    Class="rounded-2xl overflow-hidden bg-gradient-to-r from-cyan-500 to-cyan-600 text-white">
                    <MudStack Row AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Large" />
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h4" Class="font-bold">@totalStudyHours</MudText>
                            <MudText Typo="Typo.body2" Class="opacity-90">Study Hours</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Average Score Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3"
                    Class="rounded-2xl overflow-hidden bg-gradient-to-r from-orange-500 to-orange-600 text-white">
                    <MudStack Row AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" />
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h4" Class="font-bold">@averageScore.ToString("F1")%</MudText>
                            <MudText Typo="Typo.body2" Class="opacity-90">Average Score</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <!-- Content based on selected view -->
        @if (selectedView == "overview")
        {
            <MudGrid Spacing="6">
                <!-- Course Progress -->
                <MudItem xs="12" lg="8">
                    <MudPaper Elevation="2" Class="rounded-2xl p-6">
                        <MudStack Spacing="4">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.BarChart" />
                                <MudText Typo="Typo.h6" Class="font-bold">Course Progress Overview</MudText>
                            </MudStack>

                            @if (enrollments?.Any() == true)
                            {
                                <MudStack Spacing="4">
                                    @foreach (var enrollment in enrollments.Take(5))
                                    {
                                        var courseProgress = GetCourseProgress(enrollment.Id);
                                        <MudStack Spacing="2">
                                            <MudGrid AlignItems="AlignItems.Center">
                                                <MudItem xs="8">
                                                    <MudText Typo="Typo.body1" Class="font-medium">@enrollment.CourseTitle</MudText>
                                                </MudItem>
                                                <MudItem xs="4">
                                                    <MudText Typo="Typo.body2" Class="font-medium text-right">
                                                        @courseProgress.ToString("F1")%</MudText>
                                                </MudItem>
                                            </MudGrid>
                                            <MudProgressLinear Value="@courseProgress" Color="@GetProgressColor(courseProgress)"
                                                Size="Size.Medium" Class="rounded" />
                                            <MudGrid>
                                                <MudItem xs="6">
                                                    <MudText Typo="Typo.caption" Class="text-gray-500">
                                                        @GetCompletedModules(enrollment.Id) / @GetTotalModules(enrollment.Id) modules
                                                    </MudText>
                                                </MudItem>
                                                <MudItem xs="6">
                                                    <MudText Typo="Typo.caption" Class="text-gray-500 text-right">
                                                        Enrolled: @enrollment.EnrolledAt.ToString("MMM dd, yyyy")
                                                    </MudText>
                                                </MudItem>
                                            </MudGrid>
                                        </MudStack>
                                    }
                                </MudStack>
                            }
                            else
                            {
                                <MudStack Spacing="4" AlignItems="AlignItems.Center" Class="py-8">
                                    <MudIcon Icon="@Icons.Material.Filled.Book" Size="Size.Large" Class="text-gray-400" />
                                    <MudText Typo="Typo.h6" Class="text-gray-500">No course enrollments found</MudText>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/user/lms/courses/catalog"
                                        Class="rounded">
                                        Browse Courses
                                    </MudButton>
                                </MudStack>
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Activity Summary -->
                <MudItem xs="12" lg="4">
                    <MudPaper Elevation="2" Class="rounded-2xl p-6">
                        <MudStack Spacing="4" AlignItems="AlignItems.Center">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.LocalActivity" />
                                <MudText Typo="Typo.h6" Class="font-bold">Activity Summary</MudText>
                            </MudStack>

                            <MudProgressCircular Value="@overallProgress" Size="Size.Large" Color="Color.Primary"
                                Class="mud-elevation-4" StrokeWidth="6">
                                <MudText Typo="Typo.h6" Class="font-bold">@overallProgress.ToString("F0")%</MudText>
                            </MudProgressCircular>

                            <MudGrid Spacing="3">
                                <MudItem xs="6">
                                    <MudStack AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.h5" Class="font-bold text-blue-600">@totalLessonsCompleted</MudText>
                                        <MudText Typo="Typo.caption" Class="text-gray-500">Lessons</MudText>
                                    </MudStack>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudStack AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.h5" Class="font-bold text-green-600">@totalModulesCompleted
                                        </MudText>
                                        <MudText Typo="Typo.caption" Class="text-gray-500">Modules</MudText>
                                    </MudStack>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudStack AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.h5" Class="font-bold text-orange-600">@currentStreak</MudText>
                                        <MudText Typo="Typo.caption" Class="text-gray-500">Day Streak</MudText>
                                    </MudStack>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudStack AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.h5" Class="font-bold text-purple-600">@activeDays</MudText>
                                        <MudText Typo="Typo.caption" Class="text-gray-500">Active Days</MudText>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }

        @if (selectedView == "activity")
        {
            <MudPaper Elevation="2" Class="rounded-2xl p-6">
                <MudStack Spacing="4">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.History" />
                        <MudText Typo="Typo.h6" Class="font-bold">Recent Activity</MudText>
                    </MudStack>

                    @if (recentActivities?.Any() == true)
                    {
                        <MudStack Spacing="3">
                            @foreach (var activity in recentActivities.Take(10))
                            {
                                <MudPaper Elevation="1" Class="@($"p-4 rounded-xl border-l-4 {GetActivityBorderColor(activity.Type)}")">
                                    <MudGrid AlignItems="AlignItems.Center">
                                        <MudItem xs="1">
                                            <MudIcon Icon="@GetActivityIcon(activity.Type)"
                                                Color="@GetActivityIconColor(activity.Type)" />
                                        </MudItem>
                                        <MudItem xs="8">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body1" Class="font-medium">@activity.Description</MudText>
                                                <MudText Typo="Typo.body2" Class="text-gray-600">@activity.CourseTitle</MudText>
                                            </MudStack>
                                        </MudItem>
                                        <MudItem xs="3">
                                            <MudText Typo="Typo.caption" Class="text-gray-500 text-right">
                                                @activity.Timestamp.ToString("MMM dd, HH:mm")
                                            </MudText>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudStack Spacing="4" AlignItems="AlignItems.Center" Class="py-8">
                            <MudIcon Icon="@Icons.Material.Filled.History" Size="Size.Large" Class="text-gray-400" />
                            <MudText Typo="Typo.h6" Class="text-gray-500">No recent activity found</MudText>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        }

        @if (selectedView == "performance")
        {
            <MudPaper Elevation="2" Class="rounded-2xl p-6">
                <MudStack Spacing="4">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" />
                        <MudText Typo="Typo.h6" Class="font-bold">Performance Metrics</MudText>
                    </MudStack>

                    @if (performanceMetrics?.Any() == true)
                    {
                        <MudStack Spacing="4">
                            @foreach (var metric in performanceMetrics)
                            {
                                <MudStack Spacing="2">
                                    <MudGrid AlignItems="AlignItems.Center">
                                        <MudItem xs="8">
                                            <MudText Typo="Typo.body1" Class="font-medium">@metric.Name</MudText>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudChip T="string" Text="@($"{metric.Value:F1}{metric.Unit}")"
                                                Color="@GetMetricBadgeColor(metric.Value)" Variant="Variant.Filled" Class="rounded" />
                                        </MudItem>
                                    </MudGrid>
                                    <MudProgressLinear Value="@GetMetricPercentage(metric.Value, metric.MaxValue)"
                                        Color="@GetMetricProgressBarColor(metric.Value)" Size="Size.Medium" Class="rounded" />
                                    <MudText Typo="Typo.body2" Class="text-gray-600">@metric.Description</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudStack Spacing="4" AlignItems="AlignItems.Center" Class="py-8">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Class="text-gray-400" />
                            <MudText Typo="Typo.h6" Class="text-gray-500">Performance data will appear as you progress</MudText>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        }
    }
</MudContainer>

@code {
    private List<ActivityModel> recentActivities = new();
    private List<MetricModel> performanceMetrics = new();
    private List<EnrollmentModel> enrollments = new();
    private bool isLoading = true;
    private string selectedPeriod = "month";
    private string selectedView = "overview";
    private double overallProgress = 0;
    private int completedCourses = 0;
    private int totalStudyHours = 0;
    private double averageScore = 0;
    private int totalLessonsCompleted = 0;
    private int totalModulesCompleted = 0;
    private int currentStreak = 0;
    private int activeDays = 0;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadAnalytics(currentUserId);
        }
        else
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAnalytics(string userId)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load analytics using repository
            var analyticsData = await AnalyticsRepository.GetUserAnalyticsAsync(userId);

            // Update properties from analytics data
            overallProgress = analyticsData.OverallProgress;
            completedCourses = analyticsData.CompletedCourses;
            totalStudyHours = analyticsData.TotalStudyHours;
            averageScore = analyticsData.AverageScore;
            totalLessonsCompleted = analyticsData.TotalLessonsCompleted;
            totalModulesCompleted = analyticsData.TotalModulesCompleted;
            currentStreak = analyticsData.CurrentStreak;
            activeDays = analyticsData.ActiveDays;
            recentActivities = analyticsData.RecentActivities;
            performanceMetrics = analyticsData.PerformanceMetrics;

            // Load enrollments separately (placeholder for now)
            enrollments = new List<EnrollmentModel>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading analytics: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshAnalytics()
    {
        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadAnalytics(currentUserId);
            Snackbar.Add("Analytics refreshed successfully", Severity.Success);
        }
    }

    private async Task SelectPeriod(string period)
    {
        selectedPeriod = period;
        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadAnalytics(currentUserId);
        }
    }

    private void SelectView(string view)
    {
        selectedView = view;
    }

    private MudBlazor.Color GetProgressColor(double progress) => progress switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 70 => MudBlazor.Color.Info,
        >= 50 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Error
    };

    private string GetActivityColor(string type) => type switch
    {
        "lesson" => "primary",
        "quiz" => "success",
        "module" => "info",
        "certificate" => "warning",
        "enrollment" => "secondary",
        _ => "muted"
    };

    private string GetActivityIcon(string type) => type switch
    {
        "lesson" => Icons.Material.Filled.PlayCircle,
        "quiz" => Icons.Material.Filled.Quiz,
        "module" => Icons.Material.Filled.CheckCircle,
        "certificate" => Icons.Material.Filled.WorkspacePremium,
        "enrollment" => Icons.Material.Filled.PersonAdd,
        _ => Icons.Material.Filled.Circle
    };

    private MudBlazor.Color GetActivityIconColor(string type) => type switch
    {
        "lesson" => MudBlazor.Color.Primary,
        "quiz" => MudBlazor.Color.Success,
        "module" => MudBlazor.Color.Info,
        "certificate" => MudBlazor.Color.Warning,
        "enrollment" => MudBlazor.Color.Secondary,
        _ => MudBlazor.Color.Default
    };

    private string GetActivityBorderColor(string type) => type switch
    {
        "lesson" => "border-l-blue-500",
        "quiz" => "border-l-green-500",
        "module" => "border-l-cyan-500",
        "certificate" => "border-l-yellow-500",
        "enrollment" => "border-l-purple-500",
        _ => "border-l-gray-500"
    };

    private MudBlazor.Color GetMetricBadgeColor(double value) => value switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private MudBlazor.Color GetMetricProgressBarColor(double value) => value switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private double GetMetricPercentage(double value, double maxValue)
    {
        return maxValue > 0 ? (value / maxValue) * 100 : 0;
    }

    private double GetCourseProgress(int enrollmentId)
    {
        // This should return the actual progress from the enrollment
        // For now, return a placeholder value
        return new Random().NextDouble() * 100;
    }

    private int GetCompletedModules(int enrollmentId)
    {
        // This should return the actual completed modules count from the enrollment
        // For now, return a placeholder value
        return new Random().Next(1, 8);
    }

    private int GetTotalModules(int enrollmentId)
    {
        // This should return the total modules count for the course
        // For now, return a placeholder value
        return new Random().Next(8, 12);
    }
}