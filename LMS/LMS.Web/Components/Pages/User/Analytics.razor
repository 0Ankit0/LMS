@page "/user/lms/analytics"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEnrollmentRepository EnrollmentRepository
@inject ISnackbar Snackbar
<div class="px-4 py-8 md:px-8 bg-gray-50 dark:bg-gray-900 min-h-screen">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Learning Analytics</h1>
                <p class="text-gray-600 mt-1">Track your learning progress and performance</p>
            </div>
            <div class="flex items-center space-x-4">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RefreshAnalytics" Class="flex items-center">
                    <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="h-4 w-4 mr-2" />
                    Refresh
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnShowOffcanvasClick" Class="flex items-center">
                    <MudIcon Icon="@Icons.Material.Filled.Menu" Class="h-4 w-4 mr-2" />
                    Filters
                </MudButton>
            </div>
        </div>

        @if (isLoading)
        {
            <!-- Skeleton Loader: KPI Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                @for (int i = 0; i < 4; i++)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="130px" Class="h-32 rounded-2xl w-full" />
                }
            </div>
            <!-- Skeleton Loader: Main Content -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="384px" Class="h-96 rounded-2xl w-full lg:col-span-2" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="384px" Class="h-96 rounded-2xl w-full" />
            </div>
        }
        else
        {
            <!-- KPI Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <MudCard>
                    <MudCardContent Class="p-6 bg-blue-600 text-white">
                        <div class="flex items-center space-x-4">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="h-8 w-8" />
                            <div>
                                <div class="text-3xl font-bold">@overallProgress.ToString("F1")%</div>
                                <div class="text-sm opacity-90">Overall Progress</div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
                <MudCard>
                    <MudCardContent Class="p-6 bg-green-600 text-white">
                        <div class="flex items-center space-x-4">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="h-8 w-8" />
                            <div>
                                <div class="text-3xl font-bold">@completedCourses</div>
                                <div class="text-sm opacity-90">Completed Courses</div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
                <MudCard>
                    <MudCardContent Class="p-6 bg-cyan-600 text-white">
                        <div class="flex items-center space-x-4">
                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="h-8 w-8" />
                            <div>
                                <div class="text-3xl font-bold">@totalStudyHours</div>
                                <div class="text-sm opacity-90">Study Hours</div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
                <MudCard>
                    <MudCardContent Class="p-6 bg-orange-600 text-white">
                        <div class="flex items-center space-x-4">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Class="h-8 w-8" />
                            <div>
                                <div class="text-3xl font-bold">@averageScore.ToString("F1")%</div>
                                <div class="text-sm opacity-90">Average Score</div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </div>

            <!-- Content based on selected view -->
            @if (selectedView == "overview")
            {
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <!-- Course Progress -->
                    <MudCard Class="lg:col-span-2">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="flex items-center space-x-2">
                                <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="h-5 w-5" />
                                <span>Course Progress Overview</span>
                            </MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (enrollments?.Any() == true)
                            {
                                <div class="space-y-6">
                                    @foreach (var enrollment in enrollments.Take(5))
                                    {
                                        var courseProgress = GetCourseProgress(enrollment.Id);
                                        <div class="space-y-2">
                                            <div class="flex items-center justify-between">
                                                <span class="font-medium">@enrollment.CourseTitle</span>
                                                <span class="text-sm font-medium">@courseProgress.ToString("F1")%</span>
                                            </div>
                                            <MudProgressLinear Value="@(courseProgress)" Color="@GetProgressColor(courseProgress)" Class="h-2" />
                                            <div class="flex items-center justify-between text-xs text-gray-500">
                                                <span>@GetCompletedModules(enrollment.Id) / @GetTotalModules(enrollment.Id) modules</span>
                                                <span>Enrolled: @enrollment.EnrolledAt.ToString("MMM dd, yyyy")</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-8">
                                    <MudIcon Icon="@Icons.Material.Filled.Book" Class="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                    <p class="text-gray-500 mb-4">No course enrollments found.</p>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/user/lms/courses/catalog">Browse Courses</MudButton>
                                </div>
                            }
                        </MudCardContent>
                    </MudCard>

                    <!-- Activity Summary -->
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="flex items-center space-x-2">
                                <MudIcon Icon="@Icons.Material.Filled.LocalActivity" Class="h-5 w-5" />
                                <span>Activity Summary</span>
                            </MudText>
                        </MudCardHeader>
                        <MudCardContent Class="text-center">
                            <div class="mb-6">
                                <MudProgressCircular Value="@((double)overallProgress)" Size="Size.Large" Class="mud-text-primary w-32 h-32" />
                                <div class="text-sm text-gray-600 mt-2">Overall Progress</div>
                            </div>
                            <div class="grid grid-cols-2 gap-4 text-center">
                                <div>
                                    <div class="text-2xl font-bold text-blue-600">@totalLessonsCompleted</div>
                                    <div class="text-xs text-gray-500">Lessons</div>
                                </div>
                                <div>
                                    <div class="text-2xl font-bold text-green-600">@totalModulesCompleted</div>
                                    <div class="text-xs text-gray-500">Modules</div>
                                </div>
                                <div>
                                    <div class="text-2xl font-bold text-orange-600">@currentStreak</div>
                                    <div class="text-xs text-gray-500">Day Streak</div>
                                </div>
                                <div>
                                    <div class="text-2xl font-bold text-purple-600">@activeDays</div>
                                    <div class="text-xs text-gray-500">Active Days</div>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </div>
            }

            @if (selectedView == "activity")
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6" Class="flex items-center space-x-2">
                            <MudIcon Icon="@Icons.Material.Filled.History" Class="h-5 w-5" />
                            <span>Recent Activity</span>
                        </MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (recentActivities?.Any() == true)
                        {
                            <div class="space-y-4">
                                @foreach (var activity in recentActivities.Take(10))
                                {
                                    <div class="flex items-start space-x-4">
                                        <div class="w-3 h-3 rounded-full mt-2 @GetActivityColor(activity.Type)" />
                                        <div class="flex-1">
                                            <div class="flex items-center justify-between">
                                                <p class="font-medium">@activity.Description</p>
                                                <span class="text-xs text-gray-500">@activity.Timestamp.ToString("MMM dd, HH:mm")</span>
                                            </div>
                                            <p class="text-sm text-gray-600">@activity.CourseTitle</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.History" Class="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                <p class="text-gray-500">No recent activity found.</p>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            }

            @if (selectedView == "performance")
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6" Class="flex items-center space-x-2">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="h-5 w-5" />
                            <span>Performance Metrics</span>
                        </MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (performanceMetrics?.Any() == true)
                        {
                            <div class="space-y-6">
                                @foreach (var metric in performanceMetrics)
                                {
                                    <div class="space-y-2">
                                        <div class="flex items-center justify-between">
                                            <span class="font-medium">@metric.Name</span>
                                            <MudChip T="string" Color="@GetMetricBadgeColor(metric.Value)" Class="text-xs">@metric.Value.ToString("F1")@metric.Unit</MudChip>
                                        </div>
                                        <MudProgressLinear Value="@((double)GetMetricPercentage(metric.Value, metric.MaxValue))" Color="@GetMetricProgressBarColor(metric.Value)" Class="h-2" />
                                        <p class="text-sm text-gray-600">@metric.Description</p>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                <p class="text-gray-500">Performance data will appear as you progress through courses.</p>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            }
        }
    </div>
</div>

@code {
    private MudDrawer? drawer;
    private bool isDrawerOpen = false;

    private void OnShowOffcanvasClick()
    {
        isDrawerOpen = true;
    }

    private void OnHideOffcanvasClick()
    {
        isDrawerOpen = false;
    }

    private List<EnrollmentModel>? enrollments;
    private List<ActivityModel> recentActivities = new();
    private List<MetricModel> performanceMetrics = new();
    private bool isLoading = true;
    private string selectedPeriod = "month";
    private string selectedView = "overview";
    private double overallProgress = 0;
    private int completedCourses = 0;
    private int totalStudyHours = 0;
    private double averageScore = 0;
    private int totalLessonsCompleted = 0;
    private int totalModulesCompleted = 0;
    private int currentStreak = 0;
    private int activeDays = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        if (!string.IsNullOrEmpty(userId))
        {
            // Load user enrollments via repository
            enrollments = await EnrollmentRepository.GetUserEnrollmentsAsync(userId);

            // Calculate analytics
            await CalculateAnalytics(userId);

            // Load recent activities (mock data for now)
            LoadRecentActivities();

            // Load performance metrics (mock data for now)
            LoadPerformanceMetrics();
        }
    }



    private async Task LoadAnalytics()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var currentUserId = user?.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(currentUserId))
            {
                // Load user enrollments via repository
                enrollments = await EnrollmentRepository.GetUserEnrollmentsAsync(currentUserId);

                // Calculate analytics
                await CalculateAnalytics(currentUserId);

                // Load recent activities (mock data for now)
                LoadRecentActivities();

                // Load performance metrics (mock data for now)
                LoadPerformanceMetrics();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading analytics: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private Task CalculateAnalytics(string userId)
    {
        if (enrollments == null) return Task.CompletedTask;

        var completedEnrollments = enrollments.Where(e => e.ProgressPercentage >= 100).ToList();
        completedCourses = completedEnrollments.Count;

        if (enrollments.Any())
        {
            overallProgress = enrollments.Average(e => e.ProgressPercentage);
            averageScore = enrollments.Where(e => e.FinalGrade.HasValue).Any() 
                ? enrollments.Where(e => e.FinalGrade.HasValue).Average(e => e.FinalGrade!.Value) 
                : 0;
        }

        // Calculate study hours and other metrics (mock calculation)
        totalStudyHours = enrollments.Count * 10; // Mock: 10 hours per enrollment
        totalLessonsCompleted = enrollments.Sum(e => (int)(e.ProgressPercentage / 100 * 20)); // Mock: 20 lessons per course
        totalModulesCompleted = enrollments.Sum(e => (int)(e.ProgressPercentage / 100 * 5)); // Mock: 5 modules per course
        currentStreak = 7; // Mock data
        activeDays = 45; // Mock data
        
        return Task.CompletedTask;
    }

    private void LoadRecentActivities()
    {
        // Mock recent activities
        recentActivities = new List<ActivityModel>
        {
            new() { Type = "lesson", Description = "Completed lesson: Introduction to Programming", CourseTitle = "Programming Basics", Timestamp = DateTime.Now.AddHours(-2) },
            new() { Type = "quiz", Description = "Passed quiz with 85%", CourseTitle = "Data Structures", Timestamp = DateTime.Now.AddHours(-5) },
            new() { Type = "module", Description = "Finished module: Web Development Fundamentals", CourseTitle = "Full Stack Development", Timestamp = DateTime.Now.AddDays(-1) },
            new() { Type = "certificate", Description = "Earned certificate", CourseTitle = "JavaScript Essentials", Timestamp = DateTime.Now.AddDays(-2) },
            new() { Type = "enrollment", Description = "Enrolled in new course", CourseTitle = "Machine Learning Basics", Timestamp = DateTime.Now.AddDays(-3) }
        };
    }

    private void LoadPerformanceMetrics()
    {
        // Mock performance metrics
        performanceMetrics = new List<MetricModel>
        {
            new() { Name = "Completion Rate", Value = overallProgress, Unit = "%", MaxValue = 100, Description = "Average course completion" },
            new() { Name = "Quiz Average", Value = averageScore, Unit = "%", MaxValue = 100, Description = "Average quiz score" },
            new() { Name = "Study Consistency", Value = 85, Unit = "%", MaxValue = 100, Description = "Daily learning consistency" },
            new() { Name = "Engagement Score", Value = 78, Unit = "%", MaxValue = 100, Description = "Course interaction level" }
        };
    }

    private async Task RefreshAnalytics()
    {
        await LoadAnalytics();
    }

    private async Task SelectPeriod(string period)
    {
        selectedPeriod = period;
        await LoadAnalytics();
    }

    private void SelectView(string view)
    {
        selectedView = view;
    }

    private double GetCourseProgress(int enrollmentId)
    {
        var enrollment = enrollments?.FirstOrDefault(e => e.Id == enrollmentId);
        return enrollment?.ProgressPercentage ?? 0;
    }

    private int GetCompletedModules(int enrollmentId)
    {
        var progress = GetCourseProgress(enrollmentId);
        return (int)(progress / 100 * 5); // Mock: 5 modules per course
    }

    private int GetTotalModules(int enrollmentId)
    {
        return 5; // Mock: 5 modules per course
    }

    private MudBlazor.Color GetProgressColor(double progress) => progress switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 70 => MudBlazor.Color.Info,
        >= 50 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Error
    };

    private string GetActivityColor(string type) => type switch
    {
        "lesson" => "primary",
        "quiz" => "success",
        "module" => "info",
        "certificate" => "warning",
        "enrollment" => "secondary",
        _ => "muted"
    };

    private MudBlazor.Color GetMetricBadgeColor(double value) => value switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private MudBlazor.Color GetMetricProgressBarColor(double value) => value switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private double GetMetricPercentage(double value, double maxValue)
    {
        return maxValue > 0 ? (value / maxValue) * 100 : 0;
    }

    // Helper models for analytics
    public class ActivityModel
    {
        public string Type { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string CourseTitle { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
    }

    public class MetricModel
    {
        public string Name { get; set; } = string.Empty;
        public double Value { get; set; }
        public string Unit { get; set; } = string.Empty;
        public double MaxValue { get; set; }
        public string Description { get; set; } = string.Empty;
    }
}