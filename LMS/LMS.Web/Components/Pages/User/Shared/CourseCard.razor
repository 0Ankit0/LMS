@using LMS.Data.DTOs
@using MudBlazor

<div class="w-full">
    <MudCard Elevation="2" Class="mb-4 rounded-2xl shadow-lg bg-white dark:bg-gray-900 hover:shadow-xl transition-shadow duration-200 cursor-pointer" @onclick="OnCardClick">
        <MudCardContent Class="p-6 flex flex-col gap-2">
            <MudText Typo="Typo.h6" Class="mb-1 font-bold text-indigo-700 dark:text-indigo-300 text-lg">@Course.Title</MudText>
            <MudText Typo="Typo.body2" Class="mb-1 text-gray-500 dark:text-gray-300 flex items-center">
                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="mr-1" />@Course.InstructorName
            </MudText>
            <MudText Typo="Typo.body2" Class="mb-1 text-gray-600 dark:text-gray-400 truncate">
                @if (!string.IsNullOrWhiteSpace(Course.Description))
                {
                    @((Course.Description.Length > 100) ? Course.Description.Substring(0, 100) + "..." : Course.Description)
                }
            </MudText>
            <div class="flex flex-wrap gap-2 items-center mt-2">
                <MudText Typo="Typo.subtitle2" Class="text-xs text-gray-400">@Course.Level</MudText>
                <MudChip T="string" Color="Color.Primary" Size="Size.Small">@Course.Categories.FirstOrDefault()</MudChip>
                @if (Course.StartDate != default)
                {
                    <MudChip T="string" Color="Color.Dark" Variant="Variant.Outlined">@Course.StartDate.ToString("MMM dd, yyyy")</MudChip>
                }
                <MudText Typo="Typo.caption" Class="text-xs text-gray-400">@FormatDuration(Course.EstimatedDuration)</MudText>
            </div>
        </MudCardContent>
    </MudCard>
</div>

@code {
    [Parameter]
    public CourseModel Course { get; set; } = new();
    [Parameter]
    public EventCallback<CourseModel> OnClick { get; set; }

    private void OnCardClick()
    {
        if (OnClick.HasDelegate)
            OnClick.InvokeAsync(Course);
    }

    private string FormatDuration(TimeSpan duration)
    {
        var hours = (int)duration.TotalHours;
        var minutes = duration.Minutes;

        if (hours > 0)
        {
            return minutes > 0 ? $"{hours}h {minutes}m" : $"{hours}h";
        }
        return $"{minutes}m";
    }
}
