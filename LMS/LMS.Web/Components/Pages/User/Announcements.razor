@using LMS.Web.Components.Pages.User.Shared
@using MudBlazor;
@using MudBlazor.Utilities;
@using System.Net.Http.Json
@using LMS.Data.DTOs
@page "/user/lms/announcements"
@inject IAnnouncementRepository AnnouncementRepository
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Announcements - LMS</PageTitle>


<div class="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6">
        <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-lg p-6">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Latest Announcements</h1>
                <MudLink Href="/user/lms/announcement-list" Color="Color.Primary">View All</MudLink>
            </div>
            <div>
                @if (isLoading)
                {
                    <div class="flex flex-col gap-4">
                        @for (int i = 0; i < 3; i++)
                        {
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Class="rounded-xl w-full" />
                        }
                    </div>
                }
                else if (announcements?.Any() == true)
                {
                    <div class="flex flex-col gap-4">
                        @foreach (var announcement in announcements)
                        {
                            <AnnouncementCard Announcement="announcement" />
                        }
                    </div>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Campaign" Class="mt-6">
                        <MudText Typo="Typo.h5">No announcements available</MudText>
                        <MudText>There are no announcements at this time.</MudText>
                    </MudAlert>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<AnnouncementModel> announcements = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            announcements = await AnnouncementRepository.GetLatestAnnouncementsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
