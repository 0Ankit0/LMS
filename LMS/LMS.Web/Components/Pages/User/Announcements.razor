@using LMS.Web.Components.Pages.User.Shared
@using MudBlazor;
@using MudBlazor.Utilities;
@using System.Net.Http.Json
@using LMS.Data.DTOs
@page "/user/lms/announcements"
@inject IAnnouncementRepository AnnouncementRepository
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Announcements - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large"
    Class="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 py-8">
    <MudPaper Elevation="2" Class="rounded-2xl shadow-lg p-8">
        <!-- Header Section -->
        <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-6">
            <MudItem xs="12" md="8">
                <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.Campaign" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Latest Announcements
                    </MudText>
                </MudStack>
            </MudItem>
            <MudItem xs="12" md="4" Class="flex justify-end">
                <MudButton Href="/user/lms/announcement-list" Color="Color.Primary" Variant="Variant.Outlined"
                    EndIcon="@Icons.Material.Filled.ArrowForward" Class="rounded">View All</MudButton>
            </MudItem>
        </MudGrid>

        <!-- Content Section -->
        @if (isLoading)
        {
            <MudStack Spacing="4">
                @for (int i = 0; i < 3; i++)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Class="rounded-xl w-full" />
                }
            </MudStack>
        }
        else if (announcements?.Any() == true)
        {
            <MudStack Spacing="4">
                @foreach (var announcement in announcements)
                {
                    <AnnouncementCard Announcement="announcement" />
                }
            </MudStack>
        }
        else
        {
            <MudStack Spacing="4" AlignItems="AlignItems.Center" Class="py-12">
                <MudIcon Icon="@Icons.Material.Filled.Campaign" Size="Size.Large" Class="text-gray-400" />
                <MudText Typo="Typo.h5" Class="text-gray-500">No announcements available</MudText>
                <MudText Typo="Typo.body1" Class="text-gray-400 text-center">There are no announcements at this time. Check
                    back later for updates.</MudText>
            </MudStack>
        }
    </MudPaper>
</MudContainer>

@code {
    private bool isLoading = true;
    private List<AnnouncementModel> announcements = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            announcements = await AnnouncementRepository.GetLatestAnnouncementsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}



