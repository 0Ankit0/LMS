    </div>
</div>
    </div>
</div>
@using LMS.Web.Components.Account
@using MudBlazor;
@using MudBlazor.Utilities;
@using System.Security.Claims
@page "/user/lms/certificates"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICertificateRepository CertificateRepository
@inject ISnackbar Snackbar


<div class="min-h-screen bg-gradient-to-br from-yellow-50 to-green-50 dark:from-yellow-950/20 dark:to-green-950/20 border-b border-border">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 py-8">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-6 mb-10">
            <div class="flex items-center gap-4">
                <span class="inline-flex items-center justify-center p-3 bg-yellow-500 rounded-xl shadow-lg">
                    <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="h-7 w-7 text-white" />
                </span>
                <span class="text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white">My Certificates</span>
            </div>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RefreshCertificates"
                Class="flex items-center gap-2 px-6 py-2 rounded-lg font-semibold shadow-sm border border-primary hover:bg-primary hover:text-white transition-colors">
                <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2" /> Refresh
            </MudButton>
        </div>
        <!-- Summary Cards -->
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 mb-10">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-5">
                <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="text-primary" Size="Size.Large" />
                <div>
                    <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count() ?? 0)</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-500">Total Certificates</MudText>
                </div>
            </MudCard>
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-5">
                <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Class="text-success" Size="Size.Large" />
                <div>
                    <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count(c => c.IssuedAt >= DateTime.Now.AddDays(-30)) ?? 0)</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-500">This Month</MudText>
                </div>
            </MudCard>
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-5">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="text-info" Size="Size.Large" />
                <div>
                    <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count(c => c.IsValid) ?? 0)</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-500">Valid</MudText>
                </div>
            </MudCard>
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-5">
                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="text-warning" Size="Size.Large" />
                <div>
                    <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count(c => c.ExpiresAt.HasValue && c.ExpiresAt.Value <= DateTime.Now.AddDays(30)) ?? 0)</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-500">Expiring Soon</MudText>
                </div>
            </MudCard>
        </div>

        @if (isLoading)
        {
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                @for (int i = 0; i < 4; i++)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Class="rounded-2xl w-full" />
                }
            </div>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                @for (int i = 0; i < 3; i++)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" Class="rounded-2xl w-full" />
                }
            </div>
        }
    </div>
</div>
        else if (certificates != null && certificates.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var certificate in certificates)
                {
                    <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-col h-full">
                        <MudCardHeader>
                            <div class="flex items-center justify-between">
                                <MudText Typo="Typo.h6" Class="font-bold flex items-center">
                                    <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="mr-2" />
                                    Certificate
                                </MudText>
                                <MudChip T="string" Color="Color.Success" Size="Size.Small" Class="flex items-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="mr-1" /> Valid
                                </MudChip>
                            </div>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.h5" Class="text-primary mb-2">@certificate.CourseTitle</MudText>
                            <div class="mb-3 space-y-1">
                                <MudText Typo="Typo.body2">
                                    <strong>Certificate #:</strong> @certificate.CertificateNumber
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    <strong>Issued:</strong> @certificate.IssuedAt.ToString("MMMM dd, yyyy")
                                </MudText>
                                @if (certificate.ExpiresAt.HasValue)
                                {
                                    <MudText Typo="Typo.body2">
                                        <strong>Expires:</strong> @certificate.ExpiresAt.Value.ToString("MMMM dd, yyyy")
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2">
                                        <strong>Validity:</strong> <span class="text-success">Lifetime</span>
                                    </MudText>
                                }
                            </div>
                            <div class="mb-3">
                                <div class="flex items-center justify-between mb-1">
                                    <MudText Typo="Typo.body2">Final Grade: @certificate.FinalGrade.ToString("F1")%</MudText>
                                    <MudChip T="string" Color="@GetGradeBadgeColor(certificate.FinalGrade)">@GetGradeLabel(certificate.FinalGrade)</MudChip>
                                </div>
                                <MudProgressLinear Value="@(certificate.FinalGrade)" Color="@GetGradeProgressColor(certificate.FinalGrade)" Class="my-2" />
                            </div>
                        </MudCardContent>
                        <MudCardActions Class="flex flex-col gap-2 md:flex-row md:gap-4 p-4 border-t border-gray-100 dark:border-gray-800 mt-auto">
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" FullWidth="true">
                                <MudButton OnClick="() => ViewCertificate(certificate)" Class="flex items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Visibility" /> View
                                </MudButton>
                                <MudButton OnClick="() => DownloadCertificate(certificate)" Class="flex items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Download" /> Download
                                </MudButton>
                                <MudButton OnClick="() => ShareCertificate(certificate)" Class="flex items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Share" /> Share
                                </MudButton>
                            </MudButtonGroup>
                        </MudCardActions>
                    </MudCard>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Size="Size.Large" Class="text-muted mb-3" />
                        <MudText Typo="Typo.h5" Class="text-muted">No Certificates Earned</MudText>
                        <MudText Typo="Typo.body1" Class="text-muted">Complete courses to earn certificates and showcase your achievements.</MudText>
                        <MudButton Href="/user/lms/coursecatalog" Variant="Variant.Filled" Color="Color.Primary">
                            <MudIcon Icon="@Icons.Material.Filled.Book" Class="me-2" /> Browse Courses
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </div>
        }

@code {
    private List<CertificateModel>? certificates;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificates();
    }

    private async Task LoadCertificates()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var currentUserId = user?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (!string.IsNullOrEmpty(currentUserId))
            {
                certificates = await CertificateRepository.GetUserCertificatesAsync(currentUserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading certificates: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshCertificates()
    {
        await LoadCertificates();
    }

    private void ViewCertificate(CertificateModel certificate)
    {
        Snackbar.Add($"Viewing certificate: {certificate.CertificateNumber}", Severity.Info);
    }

    private void DownloadCertificate(CertificateModel certificate)
    {
        Snackbar.Add($"Downloading certificate: {certificate.CertificateNumber}", Severity.Info);
    }

    private void ShareCertificate(CertificateModel certificate)
    {
        var shareUrl = $"Certificate: {certificate.CourseTitle} - {certificate.CertificateNumber}";
        Snackbar.Add($"Share link copied: {shareUrl}", Severity.Success);
    }

    private MudBlazor.Color GetGradeBadgeColor(double grade) => grade switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private MudBlazor.Color GetGradeProgressColor(double grade) => grade switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private string GetGradeLabel(double grade) => grade switch
    {
        >= 90 => "Excellent",
        >= 80 => "Good",
        >= 70 => "Satisfactory",
        _ => "Pass"
    };
}