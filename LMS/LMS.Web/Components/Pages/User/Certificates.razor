@using LMS.Web.Components.Account
@using MudBlazor;
@using MudBlazor.Utilities;
@using System.Security.Claims
@page "/user/lms/certificates"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICertificateRepository CertificateRepository
@inject ISnackbar Snackbar

<PageTitle>My Certificates - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge"
    Class="min-h-screen bg-gradient-to-br from-yellow-50 to-green-50 dark:from-yellow-950/20 dark:to-green-950/20 py-8">
    <!-- Header Section -->
    <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-8">
        <MudItem xs="12" md="8">
            <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                <MudPaper Class="p-3 bg-yellow-500 rounded-xl shadow-lg">
                    <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="text-white" Size="Size.Large" />
                </MudPaper>
                <MudText Typo="Typo.h3" Class="font-extrabold tracking-tight text-gray-900 dark:text-white">My
                    Certificates</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12" md="4" Class="flex justify-end">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RefreshCertificates"
                StartIcon="@Icons.Material.Filled.Refresh" Class="rounded-lg font-semibold shadow-sm">
                Refresh
            </MudButton>
        </MudItem>
    </MudGrid>

    <!-- Summary Cards -->
    <MudGrid Spacing="4" Class="mb-8">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 p-5">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Class="text-primary" Size="Size.Large" />
                    <MudStack>
                        <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count() ?? 0)</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">Total Certificates</MudText>
                    </MudStack>
                </MudStack>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 p-5">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Class="text-success" Size="Size.Large" />
                    <MudStack>
                        <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count(c => c.IssuedAt >=
                                                        DateTime.Now.AddDays(-30)) ?? 0)</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">This Month</MudText>
                    </MudStack>
                </MudStack>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 p-5">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="text-info" Size="Size.Large" />
                    <MudStack>
                        <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count(c => c.IsValid) ?? 0)</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">Valid</MudText>
                    </MudStack>
                </MudStack>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 p-5">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="text-warning" Size="Size.Large" />
                    <MudStack>
                        <MudText Typo="Typo.h5" Class="font-bold">@(certificates?.Count(c => c.ExpiresAt.HasValue &&
                                                        c.ExpiresAt.Value <= DateTime.Now.AddDays(30)) ?? 0)</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">Expiring Soon</MudText>
                    </MudStack>
                </MudStack>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Certificates Grid -->
    @if (isLoading)
    {
        <MudGrid Spacing="4">
            @for (int i = 0; i < 6; i++)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" Class="rounded-2xl w-full" />
                </MudItem>
            }
        </MudGrid>
    }
    else if (certificates != null && certificates.Any())
    {
        <MudGrid Spacing="4">
            @foreach (var certificate in certificates)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 h-full">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Color="Color.Primary" />
                                        <MudText Typo="Typo.h6" Class="font-bold">Certificate</MudText>
                                    </MudStack>
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small"
                                        Icon="@Icons.Material.Filled.Check">
                                        Valid
                                    </MudChip>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudText Typo="Typo.h5" Class="text-primary font-semibold">@certificate.CourseTitle</MudText>

                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.body2">
                                        <strong>Certificate #:</strong> @certificate.CertificateNumber
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <strong>Issued:</strong> @certificate.IssuedAt.ToString("MMMM dd, yyyy")
                                    </MudText>
                                    @if (certificate.ExpiresAt.HasValue)
                                    {
                                        <MudText Typo="Typo.body2">
                                            <strong>Expires:</strong> @certificate.ExpiresAt.Value.ToString("MMMM dd, yyyy")
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2">
                                            <strong>Validity:</strong> <span class="text-green-600">Lifetime</span>
                                        </MudText>
                                    }
                                </MudStack>

                                <MudStack Spacing="2">
                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                        <MudText Typo="Typo.body2">Final Grade: @certificate.FinalGrade.ToString("F1")%
                                        </MudText>
                                        <MudChip T="string" Color="@GetGradeBadgeColor(certificate.FinalGrade)"
                                            Size="Size.Small">
                                            @GetGradeLabel(certificate.FinalGrade)
                                        </MudChip>
                                    </MudStack>
                                    <MudProgressLinear Value="@(certificate.FinalGrade)"
                                        Color="@GetGradeProgressColor(certificate.FinalGrade)" Class="rounded" />
                                </MudStack>
                            </MudStack>
                        </MudCardContent>
                        <MudCardActions Class="p-4 border-t border-gray-100 dark:border-gray-800">
                            <MudStack Row Spacing="2" Justify="Justify.SpaceEvenly" Class="w-full">
                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                    OnClick="() => ViewCertificate(certificate)" StartIcon="@Icons.Material.Filled.Visibility"
                                    Size="Size.Small" Class="rounded">
                                    View
                                </MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                    OnClick="() => DownloadCertificate(certificate)" StartIcon="@Icons.Material.Filled.Download"
                                    Size="Size.Small" Class="rounded">
                                    Download
                                </MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                    OnClick="() => ShareCertificate(certificate)" StartIcon="@Icons.Material.Filled.Share"
                                    Size="Size.Small" Class="rounded">
                                    Share
                                </MudButton>
                            </MudStack>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudPaper Elevation="2" Class="rounded-2xl p-12">
            <MudStack Spacing="4" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.WorkspacePremium" Size="Size.Large" Class="text-gray-400" />
                <MudText Typo="Typo.h5" Class="text-gray-500">No Certificates Earned</MudText>
                <MudText Typo="Typo.body1" Class="text-gray-400 text-center">Complete courses to earn certificates and
                    showcase your achievements.</MudText>
                <MudButton Href="/user/lms/courses/catalog" Variant="Variant.Filled" Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Book" Class="rounded mt-4">
                    Browse Courses
                </MudButton>
            </MudStack>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<CertificateModel>? certificates;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificates();
    }

    private async Task LoadCertificates()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var currentUserId = user?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (!string.IsNullOrEmpty(currentUserId))
            {
                certificates = await CertificateRepository.GetUserCertificatesAsync(currentUserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading certificates: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshCertificates()
    {
        await LoadCertificates();
    }

    private void ViewCertificate(CertificateModel certificate)
    {
        Snackbar.Add($"Viewing certificate: {certificate.CertificateNumber}", Severity.Info);
    }

    private void DownloadCertificate(CertificateModel certificate)
    {
        Snackbar.Add($"Downloading certificate: {certificate.CertificateNumber}", Severity.Info);
    }

    private void ShareCertificate(CertificateModel certificate)
    {
        var shareUrl = $"Certificate: {certificate.CourseTitle} - {certificate.CertificateNumber}";
        Snackbar.Add($"Share link copied: {shareUrl}", Severity.Success);
    }

    private MudBlazor.Color GetGradeBadgeColor(double grade) => grade switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private MudBlazor.Color GetGradeProgressColor(double grade) => grade switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };

    private string GetGradeLabel(double grade) => grade switch
    {
        >= 90 => "Excellent",
        >= 80 => "Good",
        >= 70 => "Satisfactory",
        _ => "Pass"
    };
}