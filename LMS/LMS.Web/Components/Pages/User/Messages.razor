@using LMS.Web.Components.Account
@using MudBlazor.Utilities;
@using MudBlazor.Components;
@using System.Security.Claims
@page "/user/lms/messages"
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMessageRepository MessageRepository
@inject ISnackbar Snackbar


<PageTitle>Messages - LMS</PageTitle>


<div class="min-h-screen bg-gradient-to-br from-indigo-50 to-blue-50 dark:from-indigo-950/20 dark:to-blue-950/20 border-b border-border">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 py-8">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
            <div class="flex items-center gap-3">
                <div class="p-3 bg-indigo-500 rounded-xl shadow-lg">
                    <MudIcon Icon="@Icons.Material.Filled.Mail" Class="h-6 w-6 text-white" />
                </div>
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Messages</h1>
            </div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowComposeModal" Class="rounded flex items-center gap-2">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1" />Compose
            </MudButton>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            <!-- Message List -->
            <div class="md:col-span-1">
                <MudPaper Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900 p-4">
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" FullWidth="true" Class="mb-4 flex gap-2">
                        <MudButton OnClick='() => SwitchFolder("inbox")' Variant="@(currentFolder == "inbox" ? Variant.Filled : Variant.Outlined)" Class="rounded flex items-center gap-2">
                            <MudIcon Icon="@Icons.Material.Filled.Inbox" Class="mr-1" />Inbox (@unreadCount)
                        </MudButton>
                        <MudButton OnClick='() => SwitchFolder("sent")' Variant="@(currentFolder == "sent" ? Variant.Filled : Variant.Outlined)" Class="rounded flex items-center gap-2">
                            <MudIcon Icon="@Icons.Material.Filled.Send" Class="mr-1" />Sent
                        </MudButton>
                    </MudButtonGroup>

                    @if (isLoadingMessages)
                    {
                        <div class="flex justify-center items-center py-6">
                            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                        </div>
                    }
                    else if (filteredMessages?.Any() == true)
                    {
                        <MudList T="MessageModel" Clickable="true" Class="divide-y divide-gray-100 dark:divide-gray-800">
                            @foreach (var message in filteredMessages)
                            {
                                var itemClass = "px-2 py-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 rounded transition-all ";
                                if (selectedMessage?.Id == message.Id)
                                    itemClass += "bg-indigo-100 dark:bg-indigo-900 ";
                                else if (!message.IsRead && currentFolder == "inbox")
                                    itemClass += "font-bold text-indigo-600 ";
                                <MudListItem T="MessageModel" OnClick="() => SelectMessage(message)" Class="@itemClass">
                                    <div class="flex justify-between items-center">
                                        <MudText Typo="Typo.subtitle1" Class="truncate">
                                            @if (currentFolder == "inbox")
                                            {
                                                @message.FromUserName
                                            }
                                            else
                                            {
                                                @message.ToUserName
                                            }
                                        </MudText>
                                        <MudText Typo="Typo.caption" Class="text-xs text-gray-400">@message.SentAt.ToString("MMM dd")</MudText>
                                    </div>
                                    <MudText Typo="Typo.body2" Class="truncate">@message.Subject</MudText>
                                    <MudText Typo="Typo.caption" Class="text-gray-400 truncate">
                                        @if (message.Content.Length > 60)
                                        {
                                            @(message.Content.Substring(0, 60) + "...")
                                        }
                                        else
                                        {
                                            @message.Content
                                        }
                                    </MudText>
                                    <div class="flex items-center gap-2 mt-1">
                                        @if (!message.IsRead && currentFolder == "inbox")
                                        {
                                            <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="rounded">New</MudChip>
                                        }
                                        @if (GetMessagePriorityIconName(message.Priority) is string iconName)
                                        {
                                            <MudIcon Icon="@iconName" Class="text-gray-400" />
                                        }
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    else
                    {
                        <div class="flex flex-col items-center justify-center py-16">
                            <MudIcon Icon="@Icons.Material.Filled.Inbox" Size="Size.Large" Class="text-gray-400 mb-3" />
                            <MudText Typo="Typo.h5" Class="text-gray-500">No messages in @currentFolder</MudText>
                        </div>
                    }
                </MudPaper>
            </div>

            <!-- Message Content -->
            <div class="md:col-span-2">
                <MudPaper Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900 p-6 h-full min-h-[400px] flex flex-col">
                    @if (selectedMessage != null)
                    {
                        <MudChat Style="height: 100%;" Class="flex flex-col gap-4">
                            <MudChatBubble Text="@((MarkupString)selectedMessage.Content.Replace("\n", "<br>"))"
                                Time="@selectedMessage.SentAt.ToString("MMM dd, yyyy 'at' h:mm tt")"
                                Origin="@(selectedMessage.FromUserId == currentUserId ? MudBlazor.Origin.TopRight : MudBlazor.Origin.TopLeft)"
                                Color="@(selectedMessage.FromUserId == currentUserId ? Color.Primary : Color.Secondary)">
                                <div class="flex items-center mb-2">
                                    <MudAvatar Color="Color.Dark" Variant="Variant.Outlined" Class="mr-2">
                                        <MudText Typo="Typo.h6">@selectedMessage.FromUserName?.FirstOrDefault()</MudText>
                                    </MudAvatar>
                                    <MudText Typo="Typo.subtitle1">@(selectedMessage.FromUserName ?? "Unknown")</MudText>
                                </div>
                                @if (selectedMessage.Attachments?.Any() == true)
                                {
                                    <div class="mt-3">
                                        <MudText Typo="Typo.subtitle1">Attachments:</MudText>
                                        @foreach (var attachment in selectedMessage.Attachments)
                                        {
                                            <div class="flex items-center mb-2">
                                                <MudIcon Icon="@Icons.Material.Filled.AttachFile" Class="mr-2" />
                                                <MudLink Href="#" Class="text-indigo-600 hover:underline">@attachment.FileName</MudLink>
                                                <MudText Typo="Typo.caption" Class="text-gray-400 ml-2">
                                                    (@FormatFileSize(attachment.FileSize))
                                                </MudText>
                                            </div>
                                        }
                                    </div>
                                }
                                <MudCardActions Class="p-0 flex gap-2 mt-2">
                                    <MudButton Variant="Variant.Text" Color="Color.Inherit" Size="Size.Small" OnClick="ReplyToMessage" Class="rounded flex items-center gap-1">
                                        <MudIcon Icon="@Icons.Material.Filled.Reply" Class="mr-1" />Reply
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Inherit" Size="Size.Small" OnClick="DeleteMessage" Class="rounded flex items-center gap-1">
                                        <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-1" />Delete
                                    </MudButton>
                                </MudCardActions>
                            </MudChatBubble>

                            @if (selectedMessage.Replies?.Any() == true)
                            {
                                @foreach (var reply in selectedMessage.Replies)
                                {
                                    <MudChatBubble Text="@((MarkupString)reply.Content.Replace("\n", "<br>"))"
                                        Time="@reply.SentAt.ToString("MMM dd, yyyy 'at' h:mm tt")"
                                        Origin="@(reply.FromUserId == currentUserId ? MudBlazor.Origin.TopRight : MudBlazor.Origin.TopLeft)"
                                        Color="@(reply.FromUserId == currentUserId ? Color.Primary : Color.Secondary)">
                                        <div class="flex items-center mb-2">
                                            <MudAvatar Color="Color.Dark" Variant="Variant.Outlined" Class="mr-2">
                                                <MudText Typo="Typo.h6">@reply.FromUserName?.FirstOrDefault()</MudText>
                                            </MudAvatar>
                                            <MudText Typo="Typo.subtitle1">@(reply.FromUserName ?? "Unknown")</MudText>
                                        </div>
                                    </MudChatBubble>
                                }
                            }
                        </MudChat>
                    }
                    else
                    {
                        <div class="flex flex-col items-center justify-center py-16">
                            <MudIcon Icon="@Icons.Material.Filled.MailOutline" Size="Size.Large" Class="text-gray-400 mb-3" />
                            <h4 class="text-gray-500">Select a message</h4>
                            <p class="text-gray-400">Choose a message from the list to read its content</p>
                        </div>
                    }
                </MudPaper>
            </div>
        </div>
    </div>

    <!-- Compose Message Modal -->
    <!-- Compose Message Modal -->
<MudDialog @bind-IsVisible="@isComposeModalVisible" Options="@dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">@(replyToMessage != null ? "Reply to: " + replyToMessage.Subject : "Compose Message")
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@newMessage" OnValidSubmit="SendMessage">
            <MudAlert Severity="Severity.Error" Class="mb-3" Visible="@(!string.IsNullOrEmpty(statusMessage))">
                <MudText>@statusMessage</MudText>
            </MudAlert>

            @if (replyToMessage == null)
            {
                <MudTextField T="string" Label="To" Variant="Variant.Text" @bind-Value="toUserSearch"
                    Placeholder="Search for a user..." />
                @if (searchedUsers?.Any() == true)
                {
                    <MudList T="UserModel" Clickable="true">
                        @foreach (var user in searchedUsers.Take(5))
                        {
                            <MudListItem T="UserModel" OnClick="() => SelectRecipient(user)">
                                @user.UserName (@user.Email)
                            </MudListItem>
                        }
                    </MudList>
                }
            }

            <MudTextField T="string" Label="Subject" Variant="Variant.Text" @bind-Value="newMessage.Subject"
                Required="true" RequiredError="Subject is required!" />

            <MudAutocomplete T="int" Label="Priority" Variant="Variant.Text" @bind-Value="newMessage.Priority"
                SearchFunc="@SearchPriorityOptions"
                ToStringFunc="@(p => priorityOptions.FirstOrDefault(x => x.Value == p)?.DisplayName ?? string.Empty)"
                Clearable="false" Placeholder="Select priority">
                <ItemTemplate Context="priorityContext">
                    <MudText>@(priorityOptions.FirstOrDefault(o => o.Value == priorityContext)?.DisplayName)</MudText>
                </ItemTemplate>
            </MudAutocomplete>

            <MudTextField T="string" Label="Message" Variant="Variant.Text" Lines="6" @bind-Value="newMessage.Content"
                Required="true" RequiredError="Message content is required!" />

            <MudDialogActions>
                <MudButton Color="Color.Secondary" OnClick="HideComposeModal">Cancel</MudButton>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Disabled="@isSending">
                    Send Message
                </MudButton>
            </MudDialogActions>
        </EditForm>
    </DialogContent>
</MudDialog>
</div>

@code {
    private bool isLoadingMessages = true;
    private bool isSending = false;
    private string statusMessage = "";
    private string currentFolder = "inbox";
    private string? currentUserId;
    private string toUserSearch = "";

    private List<MessageModel>? inboxMessages;
    private List<MessageModel>? sentMessages;
    private List<MessageModel>? filteredMessages;
    private List<UserModel>? searchedUsers;
    private MessageModel? selectedMessage;
    private MessageModel? replyToMessage;

    private CreateMessageRequest newMessage = new();
    private int unreadCount = 0;

    private bool isComposeModalVisible = false;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    private List<PriorityOption> priorityOptions = new(){
new PriorityOption { Value = 1, DisplayName = "Low" },
new PriorityOption { Value = 2, DisplayName = "Normal" },
new PriorityOption { Value = 3, DisplayName = "High" },
new PriorityOption { Value = 4, DisplayName = "Urgent" }
};

    private Task<IEnumerable<int>> SearchPriorityOptions(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(priorityOptions.Select(x => x.Value));
        return Task.FromResult(priorityOptions.Where(x => x.DisplayName.Contains(value,
        StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Value));
    }

    public class PriorityOption
    {
        public int Value { get; set; }
        public string DisplayName { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        try
        {
            isLoadingMessages = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user is not null)
            {
                currentUserId = user.Id;

                if (!string.IsNullOrEmpty(currentUserId))
                {
                    // Load inbox and sent messages via HTTP endpoints
                    inboxMessages = await MessageRepository.GetInboxMessagesAsync(currentUserId) ?? new List<MessageModel>();
                    sentMessages = await MessageRepository.GetSentMessagesAsync(currentUserId) ?? new List<MessageModel>();

                    unreadCount = inboxMessages?.Count(m => !m.IsRead) ?? 0;

                    FilterMessages();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading messages: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingMessages = false;
        }
    }

    private void FilterMessages()
    {
        filteredMessages = currentFolder switch
        {
            "sent" => sentMessages,
            _ => inboxMessages
        };
    }

    private void SwitchFolder(string folder)
    {
        currentFolder = folder;
        FilterMessages();
        selectedMessage = null;
    }

    private void SelectMessage(MessageModel message)
    {
        selectedMessage = message;

        // Mark as read if it's an inbox message and not already read
        if (currentFolder == "inbox" && !message.IsRead && currentUserId != null)
        {
            try
            {
                // Mark as read logic should be implemented in repository if needed
                message.ReadAt = DateTime.UtcNow;
                unreadCount = Math.Max(0, unreadCount - 1);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error marking message as read: {ex.Message}", Severity.Error);
            }
        }
    }

    private void ShowComposeModal()
    {
        replyToMessage = null;
        newMessage = new CreateMessageRequest();
        toUserSearch = "";
        searchedUsers = null;
        isComposeModalVisible = true;
    }

    private void ReplyToMessage()
    {
        if (selectedMessage == null) return;

        replyToMessage = selectedMessage;
        newMessage = new CreateMessageRequest
        {
            Subject = selectedMessage.Subject.StartsWith("Re: ") ? selectedMessage.Subject : $"Re: {selectedMessage.Subject}",
            ToUserId = selectedMessage.FromUserId,
            ParentMessageId = selectedMessage.Id,
            Priority = 2
        };
        toUserSearch = "";
        searchedUsers = null;
        isComposeModalVisible = true;
    }

    private void HideComposeModal()
    {
        isComposeModalVisible = false;
        replyToMessage = null;
        newMessage = new CreateMessageRequest();
        toUserSearch = "";
        searchedUsers = null;
    }

    private async Task SendMessage()
    {
        if (currentUserId == null) return;

        try
        {
            isSending = true;
            var sentMessage = await MessageRepository.SendMessageAsync(newMessage, currentUserId);
            if (sentMessage != null)
            {
                Snackbar.Add("Message sent successfully!", Severity.Success);
                HideComposeModal();
                await LoadMessages();
            }
            else
            {
                statusMessage = $"Failed to send message.";
                Snackbar.Add(statusMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error sending message: {ex.Message}";
            Snackbar.Add(statusMessage, Severity.Error);
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task DeleteMessage()
    {
        if (selectedMessage == null || currentUserId == null) return;

        try
        {
            var success = await MessageRepository.DeleteMessageAsync(selectedMessage.Id, currentUserId);
            if (success)
            {
                Snackbar.Add("Message deleted successfully!", Severity.Success);
                selectedMessage = null;
                await LoadMessages();
            }
            else
            {
                Snackbar.Add("Failed to delete message", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting message: {ex.Message}", Severity.Error);
        }
    }

    private void SelectRecipient(UserModel user)
    {
        newMessage.ToUserId = user.Id;
        toUserSearch = user.UserName;
        searchedUsers = null;
    }

    // Returns a MudBlazor icon string for the given priority
    private string GetMessagePriorityIconName(string priority)
    {
        return priority switch
        {
            "High" => Icons.Material.Filled.PriorityHigh,
            "Urgent" => Icons.Material.Filled.CrisisAlert,
            _ => Icons.Material.Filled.MailOutline
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}
