@using LMS.Web.Components.Account
@using MudBlazor.Utilities
@page "/user/lms/courses/{CourseId:int}"
@inject ICourseRepository CourseRepository
@inject IEnrollmentRepository EnrollmentRepository
@inject ISnackbar Snackbar
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<PageTitle>Course Details - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large"
    Class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 py-8">
    @if (isLoading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" Class="rounded-2xl w-full mb-6" />
    }
    else
    {
        <MudCard Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900 mb-6">
            <MudCardContent Class="p-8">
                <MudGrid>
                    <MudItem xs="12" md="4" Class="flex justify-center">
                        <MudImage Src="/course.png" Alt="@courseTitle" Elevation="25"
                            Class="rounded-xl w-full max-w-64 h-64 object-cover" />
                    </MudItem>
                    <MudItem xs="12" md="8">
                        <MudStack Spacing="4">
                            <MudText Typo="Typo.h4" Class="font-bold text-indigo-700 dark:text-indigo-300">@courseTitle
                            </MudText>
                            <MudText Typo="Typo.body1" Class="text-gray-600 dark:text-gray-300">@courseDescription</MudText>
                            <MudStack Row Spacing="6" Class="text-gray-500 dark:text-gray-400 flex-wrap">
                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    <MudText>@instructorName</MudText>
                                </MudStack>
                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" />
                                    <MudText>@DateTime.Now.AddDays(-30).ToString("MMM dd, yyyy")</MudText>
                                </MudStack>
                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.AccessTime" />
                                    <MudText>@GetTotalDuration() hours</MudText>
                                </MudStack>
                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.People" />
                                    <MudText>1250 students</MudText>
                                </MudStack>
                            </MudStack>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }

    <!-- Stats Cards -->
    <MudGrid Spacing="4" Class="mb-6">
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 p-4">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" Color="Color.Primary" />
                    <MudStack>
                        <MudText Typo="Typo.h5" Class="font-bold">@(modules?.Count ?? 0)</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">Modules</MudText>
                    </MudStack>
                </MudStack>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 p-4">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Size="Size.Large" Color="Color.Secondary" />
                    <MudStack>
                        <MudText Typo="Typo.h5" Class="font-bold">@GetTotalLessons()</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">Lessons</MudText>
                    </MudStack>
                </MudStack>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 p-4">
                <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" Color="Color.Warning" />
                    <MudStack>
                        <MudText Typo="Typo.h5" Class="font-bold">4.7</MudText>
                        <MudText Typo="Typo.body2" Class="text-gray-500">Rating</MudText>
                    </MudStack>
                </MudStack>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Enrollment Button -->
    <MudStack Row Spacing="4" AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Class="mb-8">
        @if (!isEnrolled)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="EnrollInCourse"
                Disabled="@isEnrolling" Class="rounded-xl px-8 py-3">
                @if (isEnrolling)
                {
                    <MudProgressCircular Size="Size.Small" Class="mr-2" />
                    <span>Enrolling...</span>
                }
                else
                {
                    <span>Enroll in Course</span>
                }
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Large" Disabled="true"
                StartIcon="@Icons.Material.Filled.CheckCircle" Class="rounded-xl px-8 py-3">Enrolled</MudButton>
        }
    </MudStack>

    <!-- Course Modules Section -->
    <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900">
        <MudCardContent Class="p-8">
            <MudStack Spacing="4">
                <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Course Modules</MudText>
                <MudText Typo="Typo.subtitle1" Class="text-gray-500">Explore the course content organized by modules
                </MudText>

                @if (modules?.Any() == true)
                {
                    <MudExpansionPanels MultiExpansion="true" Class="mt-4">
                        @foreach (var module in modules)
                        {
                            <MudExpansionPanel Class="mb-4 rounded-xl">
                                <TitleContent>
                                    <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Material.Filled.Folder" />
                                        <MudText Typo="Typo.h6" Class="font-semibold">@module.Title</MudText>
                                        <MudBadge Content="@(module.Lessons?.Count ?? 0)" Color="Color.Primary" />
                                    </MudStack>
                                </TitleContent>
                                <ChildContent>
                                    <MudStack Spacing="3" Class="p-4">
                                        @if (module.Lessons?.Any() == true)
                                        {
                                            @foreach (var lesson in module.Lessons)
                                            {
                                                <MudCard Elevation="1" Class="rounded-lg">
                                                    <MudCardContent Class="p-4">
                                                        <MudGrid AlignItems="AlignItems.Center">
                                                            <MudItem xs="12" md="8">
                                                                <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                                                                    <MudIcon Icon="@Icons.Material.Filled.PlayCircle"
                                                                        Color="Color.Primary" />
                                                                    <MudStack>
                                                                        <MudText Typo="Typo.h6" Class="font-medium">@lesson.Title
                                                                        </MudText>
                                                                        <MudText Typo="Typo.body2" Class="text-gray-600">
                                                                            @lesson.Description</MudText>
                                                                    </MudStack>
                                                                </MudStack>
                                                            </MudItem>
                                                            <MudItem xs="12" md="4" Class="flex justify-end items-center gap-3">
                                                                @if (lesson.EstimatedDuration.HasValue && lesson.EstimatedDuration > 0)
                                                                {
                                                                    <MudChip T="string" Size="Size.Small" Color="Color.Info"
                                                                        Class="rounded">
                                                                        @lesson.EstimatedDuration min
                                                                    </MudChip>
                                                                }
                                                                <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                                                    Size="Size.Small" Class="rounded">
                                                                    Start Lesson
                                                                </MudButton>
                                                            </MudItem>
                                                        </MudGrid>
                                                    </MudCardContent>
                                                </MudCard>
                                            }
                                        }
                                        else
                                        {
                                            <MudAlert Severity="Severity.Info" Class="rounded">
                                                This module doesn't have any lessons yet.
                                            </MudAlert>
                                        }
                                    </MudStack>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Category" Class="rounded mt-4">
                        This course doesn't have any modules yet.
                    </MudAlert>
                }
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudContainer>


@code {
    [Parameter] public int CourseId { get; set; }

    // Data properties
    private CourseModel? course;
    private List<ModuleModel> modules = new();
    private bool isEnrolled = false;
    private bool isLoading = false;
    private bool isEnrolling = false;
    private string? currentUserId;

    // UI state
    private int completionPercentage = 0;
    private HashSet<int> expandedModules = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCourseData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CourseId > 0)
        {
            await LoadCourseData();
        }
    }

    private async Task LoadCourseData()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            currentUserId = user?.Id;

            course = await CourseRepository.GetCourseByIdAsync(CourseId);
            modules = await CourseRepository.GetCourseModulesAsync(CourseId) ?? new();
            if (modules.Any())
            {
                expandedModules.Add(modules.First().Id);
            }

            if (!string.IsNullOrEmpty(currentUserId))
            {
                var enrollment = await EnrollmentRepository.GetEnrollmentByUserAndCourseAsync(currentUserId, CourseId);
                isEnrolled = enrollment != null;
                if (isEnrolled)
                {
                    completionPercentage = 0; // Real completion percentage would come from progress endpoint
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading course: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleModule(int moduleId)
    {
        if (expandedModules.Contains(moduleId))
        {
            expandedModules.Remove(moduleId);
        }
        else
        {
            expandedModules.Add(moduleId);
        }
    }

    private async Task EnrollInCourse()
    {
        try
        {
            isEnrolling = true;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                var success = await EnrollmentRepository.EnrollUserAsync(currentUserId, CourseId);
                if (success)
                {
                    isEnrolled = true;
                    completionPercentage = 0;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error enrolling in course: {ex.Message}");
        }
        finally
        {
            isEnrolling = false;
        }
    }

    private int GetTotalLessons()
    {
        return modules.Sum(m => m.Lessons?.Count ?? 0);
    }

    private double GetTotalDuration()
    {
        var totalMinutes = modules.Sum(m => m.Lessons?.Sum(l => l.EstimatedDuration ?? 0) ?? 0);
        return Math.Round(totalMinutes / 60.0, 1);
    }

    private int GetModuleCompletionPercentage(int moduleId)
    {
        // Real completion percentage would come from progress endpoint
        return new Random(moduleId).Next(0, 101);
    }

    // Properties for backward compatibility with the UI
    private string courseTitle => course?.Title ?? "Loading...";
    private string courseDescription => course?.Description ?? "Loading course description...";
    private string instructorName => course?.InstructorName ?? "Unknown Instructor";
}
