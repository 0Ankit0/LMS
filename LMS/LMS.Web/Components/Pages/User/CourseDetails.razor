@using LMS.Web.Components.Account
@using MudBlazor.Utilities
@page "/user/lms/courses/{CourseId:int}"
@inject ICourseRepository CourseRepository
@inject IEnrollmentRepository EnrollmentRepository
@inject ISnackbar Snackbar
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<PageTitle>Course Details - LMS</PageTitle>



<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 py-8">
    <div class="max-w-5xl mx-auto px-4 sm:px-6">
        @if (isLoading)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" Class="rounded-2xl w-full mb-6" />
        }
        else
        {
            <MudCard Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900 mb-6">
                <MudCardContent>
                    <div class="flex flex-col md:flex-row items-center gap-8">
                        <MudImage Src="/course.png" Alt="@courseTitle" Elevation="25"
                            Class="rounded-xl w-64 h-64 object-cover" />
                        <div class="flex-1">
                            <MudText Typo="Typo.h4" Class="font-bold text-indigo-700 dark:text-indigo-300">@courseTitle
                            </MudText>
                            <MudText Typo="Typo.body1" Class="mt-2 text-gray-600 dark:text-gray-300">@courseDescription
                            </MudText>
                            <div class="flex flex-wrap gap-6 mt-4 text-gray-500 dark:text-gray-400 items-center">
                                <div class="flex items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    <MudText>@instructorName</MudText>
                                </div>
                                <div class="flex items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" />
                                    <MudText>@DateTime.Now.AddDays(-30).ToString("MMM dd, yyyy")</MudText>
                                </div>
                                <div class="flex items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.AccessTime" />
                                    <MudText>@GetTotalDuration() hours</MudText>
                                </div>
                                <div class="flex items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.People" />
                                    <MudText>1250 students</MudText>
                                </div>
                            </div>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        }

        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
            <MudCard Elevation="2"
                Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-4">
                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" />
                <div>
                    <MudText Typo="Typo.h5" Class="font-bold">@(modules?.Count ?? 0)</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-500">Modules</MudText>
                </div>
            </MudCard>
            <MudCard Elevation="2"
                Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-4">
                <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Size="Size.Large" />
                <div>
                    <MudText Typo="Typo.h5" Class="font-bold">@GetTotalLessons()</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-500">Lessons</MudText>
                </div>
            </MudCard>
            <MudCard Elevation="2"
                Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-4">
                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" />
                <div>
                    <MudText Typo="Typo.h5" Class="font-bold">4.7</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-500">Rating</MudText>
                </div>
            </MudCard>
        </div>

        <div class="mt-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
                @if (!isEnrolled)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="EnrollInCourse"
                        Disabled="@isEnrolling" Class="rounded">Enroll in Course</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Large" Disabled="true"
                        StartIcon="@Icons.Material.Filled.CheckCircle" Class="rounded">Enrolled</MudButton>
                }
            </div>
        </div>

        <div class="mt-10">
            <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Course Modules</MudText>
            <MudText Typo="Typo.subtitle1" Class="mb-4 text-gray-500">Explore the course content organized by modules
            </MudText>

            @if (modules?.Any() == true)
            {
                <MudExpansionPanels>
                    @foreach (var module in modules)
                    {
                        <MudExpansionPanel Text="@module.Title">
                            @foreach (var lesson in module.Lessons)
                            {
                                <MudCard Elevation="0" Class="mb-2">
                                    <MudCardContent>
                                        <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                            <MudItem xs="12" md="8">
                                                <div class="d-flex align-items-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Class="me-3" />
                                                    <div>
                                                        <MudText Typo="Typo.h6">@lesson.Title</MudText>
                                                        <MudText Typo="Typo.body2">@lesson.Description</MudText>
                                                    </div>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="12" md="4" Class="d-flex justify-content-end align-items-center">
                                                @if (lesson.EstimatedDuration.TotalMinutes > 0)
                                                {
                                                    <MudText Class="me-3">@((int)lesson.EstimatedDuration.TotalMinutes) min</MudText>
                                                }
                                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">Start
                                                    Lesson
                                                </MudButton>
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Category">This course doesn't have any
                    modules yet.
                </MudAlert>
            }
        </div>
    </div>
</div>


<div class="max-w-5xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
    <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-4">
        <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" />
        <div>
            <MudText Typo="Typo.h5" Class="font-bold">@(modules?.Count ?? 0)</MudText>
            <MudText Typo="Typo.body2" Class="text-gray-500">Modules</MudText>
        </div>
    </MudCard>
    <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-4">
        <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Size="Size.Large" />
        <div>
            <MudText Typo="Typo.h5" Class="font-bold">@GetTotalLessons()</MudText>
            <MudText Typo="Typo.body2" Class="text-gray-500">Lessons</MudText>
        </div>
    </MudCard>
    <MudCard Elevation="2" Class="rounded-2xl shadow bg-white dark:bg-gray-900 flex flex-row items-center gap-4 p-4">
        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" />
        <div>
            <MudText Typo="Typo.h5" Class="font-bold">4.7</MudText>
            <MudText Typo="Typo.body2" Class="text-gray-500">Rating</MudText>
        </div>
    </MudCard>
</div>


<div class="max-w-5xl mx-auto mt-6">
    @if (!isEnrolled)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="EnrollInCourse"
            Disabled="@isEnrolling" Class="rounded">Enroll in Course</MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Large" Disabled="true"
            StartIcon="@Icons.Material.Filled.CheckCircle" Class="rounded">Enrolled</MudButton>
    }
</div>

<div class="max-w-5xl mx-auto mt-10">
    <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Course Modules</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-4 text-gray-500">Explore the course content organized by modules</MudText>

    @if (modules?.Any() == true)
    {
        <MudExpansionPanels>
            @foreach (var module in modules)
            {
                <MudExpansionPanel Text="@module.Title">
                    @foreach (var lesson in module.Lessons)
                    {
                        <MudCard Elevation="0" Class="mb-2">
                            <MudCardContent>
                                <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudItem xs="12" md="8">
                                        <div class="d-flex align-items-center">
                                            <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Class="me-3" />
                                            <div>
                                                <MudText Typo="Typo.h6">@lesson.Title</MudText>
                                                <MudText Typo="Typo.body2">@lesson.Description</MudText>
                                            </div>
                                        </div>
                                    </MudItem>
                                    <MudItem xs="12" md="4" Class="d-flex justify-content-end align-items-center">
                                        @if (lesson.EstimatedDuration.TotalMinutes > 0)
                                        {
                                            <MudText Class="me-3">@((int)lesson.EstimatedDuration.TotalMinutes) min</MudText>
                                        }
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">Start Lesson
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    }
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Category">This course doesn't have any modules yet.
        </MudAlert>
    }
</div>

@code {
    [Parameter] public int CourseId { get; set; }

    // Data properties
    private CourseModel? course;
    private List<ModuleModel> modules = new();
    private bool isEnrolled = false;
    private bool isLoading = false;
    private bool isEnrolling = false;
    private string? currentUserId;

    // UI state
    private int completionPercentage = 0;
    private HashSet<int> expandedModules = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCourseData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CourseId > 0)
        {
            await LoadCourseData();
        }
    }

    private async Task LoadCourseData()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            currentUserId = user?.Id;

            course = await CourseRepository.GetCourseByIdAsync(CourseId);
            modules = await CourseRepository.GetCourseModulesAsync(CourseId) ?? new();
            if (modules.Any())
            {
                expandedModules.Add(modules.First().Id);
            }

            if (!string.IsNullOrEmpty(currentUserId))
            {
                var enrollment = await EnrollmentRepository.GetEnrollmentByUserAndCourseAsync(currentUserId, CourseId);
                isEnrolled = enrollment != null;
                if (isEnrolled)
                {
                    completionPercentage = 65; // Mock data - would come from progress endpoint
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading course: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleModule(int moduleId)
    {
        if (expandedModules.Contains(moduleId))
        {
            expandedModules.Remove(moduleId);
        }
        else
        {
            expandedModules.Add(moduleId);
        }
    }

    private async Task EnrollInCourse()
    {
        try
        {
            isEnrolling = true;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                var success = await EnrollmentRepository.EnrollUserAsync(currentUserId, CourseId);
                if (success)
                {
                    isEnrolled = true;
                    completionPercentage = 0;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error enrolling in course: {ex.Message}");
        }
        finally
        {
            isEnrolling = false;
        }
    }

    private int GetTotalLessons()
    {
        return modules.Sum(m => m.Lessons?.Count ?? 0);
    }

    private double GetTotalDuration()
    {
        var totalMinutes = modules.Sum(m => m.Lessons?.Sum(l => l.EstimatedDuration.TotalMinutes) ?? 0);
        return Math.Round(totalMinutes / 60.0, 1);
    }

    private int GetModuleCompletionPercentage(int moduleId)
    {
        // Mock completion percentage - would come from progress endpoint
        return new Random(moduleId).Next(0, 101);
    }

    // Properties for backward compatibility with the UI
    private string courseTitle => course?.Title ?? "Loading...";
    private string courseDescription => course?.Description ?? "Loading course description...";
    private string instructorName => course?.InstructorName ?? "Unknown Instructor";
}
