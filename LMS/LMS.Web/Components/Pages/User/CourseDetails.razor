
@using LMS.Web.Components.Account
@using MudBlazor.Utilities
@page "/user/lms/courses/{CourseId:int}"
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IdentityUserAccessor UserAccessor
@using System.Security.Claims

<PageTitle>Course Details - LMS</PageTitle>

<MudGrid Spacing="4">
    <MudItem xs="12">
        @if (isLoading)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
        }
        else
        {
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudGrid AlignItems="AlignItems.Center">
                        <MudItem xs="12" md="4">
                            <MudImage Src="/course.png" Alt="@courseTitle" Elevation="25" Class="rounded-lg" />
                        </MudItem>
                        <MudItem xs="12" md="8">
                            <MudText Typo="Typo.h4">@courseTitle</MudText>
                            <MudText Typo="Typo.body1" Class="mt-2">@courseDescription</MudText>
                            <div class="d-flex mt-3">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="me-2" />
                                <MudText>@instructorName</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Class="ms-4 me-2" />
                                <MudText>@DateTime.Now.AddDays(-30).ToString("MMM dd, yyyy")</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="ms-4 me-2" />
                                <MudText>@GetTotalDuration() hours</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.People" Class="ms-4 me-2" />
                                <MudText>1250 students</MudText>
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        }
    </MudItem>
</MudGrid>

                        <MudGrid Spacing="4" Class="mt-4">
    <MudItem xs="12" md="4">
        <MudCard Elevation="2">
            <MudCardContent class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" />
                <div class="ms-3">
                    <MudText Typo="Typo.h5">@(modules?.Count ?? 0)</MudText>
                    <MudText Typo="Typo.body2">Modules</MudText>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudCard Elevation="2">
            <MudCardContent class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Size="Size.Large" />
                <div class="ms-3">
                    <MudText Typo="Typo.h5">@GetTotalLessons()</MudText>
                    <MudText Typo="Typo.body2">Lessons</MudText>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudCard Elevation="2">
            <MudCardContent class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" />
                <div class="ms-3">
                    <MudText Typo="Typo.h5">4.7</MudText>
                    <MudText Typo="Typo.body2">Rating</MudText>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<div class="mt-4">
    @if (!isEnrolled)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="EnrollInCourse" Disabled="@isEnrolling">Enroll in Course</MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Large" Disabled="true" StartIcon="@Icons.Material.Filled.CheckCircle">Enrolled</MudButton>
    }
</div>

<div class="mt-5">
    <MudText Typo="Typo.h4">Course Modules</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-4">Explore the course content organized by modules</MudText>

    @if (modules?.Any() == true)
    {
        <MudExpansionPanels>
            @foreach (var module in modules)
            {
                <MudExpansionPanel Text="@module.Title">
                    @foreach (var lesson in module.Lessons)
                    {
                        <MudCard Elevation="0" Class="mb-2">
                            <MudCardContent>
                                <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudItem xs="12" md="8">
                                        <div class="d-flex align-items-center">
                                            <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Class="me-3" />
                                            <div>
                                                <MudText Typo="Typo.h6">@lesson.Title</MudText>
                                                <MudText Typo="Typo.body2">@lesson.Description</MudText>
                                            </div>
                                        </div>
                                    </MudItem>
                                    <MudItem xs="12" md="4" Class="d-flex justify-content-end align-items-center">
                                        @if (lesson.EstimatedDuration.TotalMinutes > 0)
                                        {
                                            <MudText Class="me-3">@((int)lesson.EstimatedDuration.TotalMinutes) min</MudText>
                                        }
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">Start Lesson</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    }
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Category">This course doesn't have any modules yet.</MudAlert>
    }
</div>

@code {
    [CascadingParameter] 
    private HttpContext HttpContext { get; set; } = default!;
    [Parameter] public int CourseId { get; set; }

    // Data properties
    private CourseModel? course;
    private List<ModuleModel> modules = new();
    private bool isEnrolled = false;
    private bool isLoading = false;
    private bool isEnrolling = false;
    private string? currentUserId;

    // UI state
    private int completionPercentage = 0;
    private HashSet<int> expandedModules = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCourseData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CourseId > 0)
        {
            await LoadCourseData();
        }
    }

    private async Task LoadCourseData()
    {
        try
        {
            isLoading = true;

            var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            

            // Load course details via HTTP endpoint
            var courseResponse = await HttpClient.GetAsync($"/api/courses/{CourseId}");
            if (courseResponse.IsSuccessStatusCode)
            {
                course = await courseResponse.Content.ReadFromJsonAsync<CourseModel>();
            }

            // Load course modules via HTTP endpoint
            var modulesResponse = await HttpClient.GetAsync($"/api/courses/{CourseId}/modules");
            if (modulesResponse.IsSuccessStatusCode)
            {
                modules = await modulesResponse.Content.ReadFromJsonAsync<List<ModuleModel>>() ?? new();

                // Expand first module by default
                if (modules.Any())
                {
                    expandedModules.Add(modules.First().Id);
                }
            }

            // Check if user is enrolled via HTTP endpoint
            if (!string.IsNullOrEmpty(currentUserId))
            {
                var enrollmentResponse = await
                HttpClient.GetAsync($"/api/enrollments/user/{user.Id}/course/{CourseId}/isenrolled");
                if (enrollmentResponse.IsSuccessStatusCode)
                {
                    isEnrolled = await enrollmentResponse.Content.ReadFromJsonAsync<bool>();
                }

                // Get completion percentage if enrolled (mock for now)
                if (isEnrolled)
                {
                    completionPercentage = 65; // Mock data - would come from progress endpoint
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading course: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleModule(int moduleId)
    {
        if (expandedModules.Contains(moduleId))
        {
            expandedModules.Remove(moduleId);
        }
        else
        {
            expandedModules.Add(moduleId);
        }
    }

    private async Task EnrollInCourse()
    {
        try
        {
            isEnrolling = true;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                var enrollmentRequest = new CreateEnrollmentRequest { CourseId = CourseId };
                var response = await HttpClient.PostAsJsonAsync($"/api/enrollments/user/{currentUserId}", enrollmentRequest);

                if (response.IsSuccessStatusCode)
                {
                    isEnrolled = true;
                    completionPercentage = 0;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error enrolling in course: {ex.Message}");
        }
        finally
        {
            isEnrolling = false;
        }
    }

    private int GetTotalLessons()
    {
        return modules.Sum(m => m.Lessons?.Count ?? 0);
    }

    private double GetTotalDuration()
    {
        var totalMinutes = modules.Sum(m => m.Lessons?.Sum(l => l.EstimatedDuration.TotalMinutes) ?? 0);
        return Math.Round(totalMinutes / 60.0, 1);
    }

    private int GetModuleCompletionPercentage(int moduleId)
    {
        // Mock completion percentage - would come from progress endpoint
        return new Random(moduleId).Next(0, 101);
    }

    // Properties for backward compatibility with the UI
    private string courseTitle => course?.Title ?? "Loading...";
    private string courseDescription => course?.Description ?? "Loading course description...";
    private string instructorName => course?.InstructorName ?? "Unknown Instructor";
}
