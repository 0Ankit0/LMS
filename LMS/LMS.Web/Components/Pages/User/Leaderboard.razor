@using LMS.Web.Components.Account
@using MudBlazor.Utilities;
@using System.Security.Claims
@page "/user/lms/leaderboard"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILeaderboardRepository LeaderboardRepository
@inject IJSRuntime JSRuntime
@using MudBlazor.Components

<PageTitle>Leaderboard - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="min-h-screen bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20 py-8">
    <!-- Header Section -->
    <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-8">
        <MudItem xs="12" md="8">
            <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                <MudPaper Class="p-3 bg-yellow-500 rounded-xl shadow-lg">
                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="text-white" Size="Size.Large" />
                </MudPaper>
                <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Leaderboard</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12" md="4" Class="flex flex-wrap gap-2">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                <MudButton OnClick='@(() => SelectPeriod("all"))'
                    Variant="@(selectedPeriod == "all" ? Variant.Filled : Variant.Outlined)" Class="rounded">All Time</MudButton>
                <MudButton OnClick='@(() => SelectPeriod("month"))'
                    Variant="@(selectedPeriod == "month" ? Variant.Filled : Variant.Outlined)" Class="rounded">This Month</MudButton>
                <MudButton OnClick='@(() => SelectPeriod("week"))'
                    Variant="@(selectedPeriod == "week" ? Variant.Filled : Variant.Outlined)" Class="rounded">This Week</MudButton>
            </MudButtonGroup>
            <MudButton OnClick="RefreshLeaderboard" Variant="Variant.Outlined" Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Refresh" Class="rounded">Refresh</MudButton>
        </MudItem>
    </MudGrid>

    @if (isLoading)
    {
        <!-- Loading Skeleton -->
        <MudStack Spacing="6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="150px" Class="rounded-2xl w-full" />
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" Class="rounded-2xl w-full" />
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" Class="rounded-2xl w-full" />
        </MudStack>
    }
    else
    {
        <!-- Current User Stats -->
        @if (currentUserRank != null)
        {
            <MudCard Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900 mb-8">
                <MudCardContent Class="p-6">
                    <MudGrid AlignItems="AlignItems.Center" Spacing="6">
                        <MudItem xs="12" md="3" Class="flex justify-center">
                            <MudStack AlignItems="AlignItems.Center">
                                <div class="relative">
                                    <MudAvatar Image="@GetAvatarUrl(currentUserRank.UserId)" Alt="@currentUserRank.UserName"
                                        Class="border-4 border-white dark:border-gray-900 shadow-lg w-20 h-20" />
                                    <MudChip T="string" Color="Color.Warning" Class="absolute -top-2 -right-2 rounded-full">
                                        #@currentUserRank.Rank
                                    </MudChip>
                                </div>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12" md="9">
                            <MudStack Spacing="4">
                                <MudText Typo="Typo.h5" Class="font-bold text-gray-900 dark:text-white">Your Ranking</MudText>
                                <MudGrid Spacing="4">
                                    <MudItem xs="6" sm="3">
                                        <MudPaper Class="p-3 text-center rounded">
                                            <MudText Typo="Typo.h6" Class="font-bold">@currentUserRank.Rank</MudText>
                                            <MudText Typo="Typo.caption" Class="text-gray-500">Rank</MudText>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudPaper Class="p-3 text-center rounded">
                                            <MudText Typo="Typo.h6" Class="font-bold">@currentUserRank.Score</MudText>
                                            <MudText Typo="Typo.caption" Class="text-gray-500">Points</MudText>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudPaper Class="p-3 text-center rounded">
                                            <MudText Typo="Typo.h6" Class="font-bold">@currentUserRank.CompletedCourses</MudText>
                                            <MudText Typo="Typo.caption" Class="text-gray-500">Courses</MudText>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudPaper Class="p-3 text-center rounded">
                                            <MudText Typo="Typo.h6" Class="font-bold">@currentUserRank.Achievements</MudText>
                                            <MudText Typo="Typo.caption" Class="text-gray-500">Achievements</MudText>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        }

        <!-- Top 3 Podium -->
        @if (topRanks?.Count >= 3)
        {
            <MudCard Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900 mb-8">
                <MudCardContent Class="p-8">
                    <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="mb-6">
                        <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="text-yellow-500" Size="Size.Large" />
                        <MudText Typo="Typo.h5" Class="font-bold text-yellow-700 dark:text-yellow-300">Top Performers</MudText>
                    </MudStack>
                    <MudGrid Justify="Justify.Center" Spacing="8">
                        <!-- 2nd Place -->
                        <MudItem xs="12" sm="4" Class="flex justify-center order-1">
                            <MudStack AlignItems="AlignItems.Center" Spacing="3">
                                <div class="relative">
                                    <MudAvatar Image="@GetAvatarUrl(topRanks[1].UserId)" Alt="@topRanks[1].UserName"
                                        Class="border-4 border-gray-400 dark:border-gray-700 shadow-lg w-20 h-20" />
                                    <MudChip T="string" Color="Color.Secondary"
                                        Class="absolute -top-2 -right-2 rounded-full" Icon="@Icons.Material.Filled.EmojiEvents">
                                        2
                                    </MudChip>
                                </div>
                                <MudText Typo="Typo.h6" Class="font-bold">@topRanks[1].UserName</MudText>
                                <MudText Typo="Typo.body2" Class="text-gray-500">@topRanks[1].Score pts</MudText>
                                <MudText Typo="Typo.caption" Class="text-gray-400">@topRanks[1].CompletedCourses courses</MudText>
                            </MudStack>
                        </MudItem>
                        <!-- 1st Place -->
                        <MudItem xs="12" sm="4" Class="flex justify-center order-2">
                            <MudStack AlignItems="AlignItems.Center" Spacing="3">
                                <div class="relative">
                                    <MudAvatar Image="@GetAvatarUrl(topRanks[0].UserId)" Alt="@topRanks[0].UserName"
                                        Class="border-4 border-yellow-400 dark:border-yellow-600 shadow-lg w-24 h-24" />
                                    <MudChip T="string" Color="Color.Warning"
                                        Class="absolute -top-2 -right-2 rounded-full" Icon="@Icons.Material.Filled.EmojiEvents">
                                        1
                                    </MudChip>
                                </div>
                                <MudText Typo="Typo.h5" Class="font-bold text-yellow-700 dark:text-yellow-300">
                                    @topRanks[0].UserName
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Class="text-yellow-700 dark:text-yellow-300">
                                    @topRanks[0].Score pts
                                </MudText>
                                <MudText Typo="Typo.caption" Class="text-gray-400">@topRanks[0].CompletedCourses courses</MudText>
                            </MudStack>
                        </MudItem>
                        <!-- 3rd Place -->
                        <MudItem xs="12" sm="4" Class="flex justify-center order-3">
                            <MudStack AlignItems="AlignItems.Center" Spacing="3">
                                <div class="relative">
                                    <MudAvatar Image="@GetAvatarUrl(topRanks[2].UserId)" Alt="@topRanks[2].UserName"
                                        Class="border-4 border-red-400 dark:border-red-700 shadow-lg w-20 h-20" />
                                    <MudChip T="string" Color="Color.Error"
                                        Class="absolute -top-2 -right-2 rounded-full" Icon="@Icons.Material.Filled.EmojiEvents">
                                        3
                                    </MudChip>
                                </div>
                                <MudText Typo="Typo.h6" Class="font-bold">@topRanks[2].UserName</MudText>
                                <MudText Typo="Typo.body2" Class="text-red-500">@topRanks[2].Score pts</MudText>
                                <MudText Typo="Typo.caption" Class="text-gray-400">@topRanks[2].CompletedCourses courses</MudText>
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        }

        <!-- Full Leaderboard Table -->
        @if (leaderboard?.Any() == true)
        {
            <MudCard Elevation="2" Class="rounded-2xl shadow-lg bg-white dark:bg-gray-900">
                <MudCardHeader Class="border-b border-gray-100 dark:border-gray-800">
                    <CardHeaderContent>
                        <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudItem xs="12" md="6">
                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.FormatListNumbered" />
                                    <MudText Typo="Typo.h6" Class="font-bold text-gray-900 dark:text-white">Full Rankings</MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" md="6" Class="flex justify-end">
                                <MudTextField Value="searchTerm" ValueChanged="@((string value) => { searchTerm = value; FilterLeaderboard(); })"
                                    Placeholder="Search users..." Variant="Variant.Outlined" Clearable="true" 
                                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                    OnClearButtonClick="FilterLeaderboard" Class="max-w-64 rounded" />
                            </MudItem>
                        </MudGrid>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="p-0">
                    <MudTable T="LeaderboardEntryModel" Items="@filteredLeaderboard" Hover="true"
                        Breakpoint="Breakpoint.Sm" Class="w-full">
                        <HeaderContent>
                            <MudTh>Rank</MudTh>
                            <MudTh>User</MudTh>
                            <MudTh>Points</MudTh>
                            <MudTh>Courses</MudTh>
                            <MudTh>Achievements</MudTh>
                            <MudTh>Avg. Score</MudTh>
                            <MudTh>Streak</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Rank">
                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                    @if (context.Rank <= 3)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.EmojiEvents"
                                            Class="@GetRankColor(context.Rank)" />
                                    }
                                    <MudText Typo="Typo.body2" Class="font-bold">@context.Rank</MudText>
                                    @if (context.UserId == currentUserId)
                                    {
                                        <MudChip T="string" Color="Color.Primary" Size="Size.Small">You</MudChip>
                                    }
                                </MudStack>
                            </MudTd>
                            <MudTd DataLabel="User">
                                <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                                    <MudAvatar Image="@GetAvatarUrl(context.UserId)" Alt="@context.UserName"
                                        Class="w-10 h-10" />
                                    <MudStack>
                                        <MudText Typo="Typo.body1" Class="font-bold">@context.UserName</MudText>
                                        <MudText Typo="Typo.caption" Class="text-gray-400">@context.UserName</MudText>
                                    </MudStack>
                                </MudStack>
                            </MudTd>
                            <MudTd DataLabel="Points" Class="text-center">
                                <MudChip T="string" Color="Color.Primary" Size="Size.Medium">@context.Score</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Courses" Class="text-center">
                                <MudChip T="string" Color="Color.Success" Size="Size.Medium">@context.CompletedCourses</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Achievements" Class="text-center">
                                <MudChip T="string" Color="Color.Warning" Size="Size.Medium">@context.Achievements</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Avg. Score" Class="text-center">
                                <MudChip T="string" Color="@GetScoreBadgeColor(context.AverageScore)">
                                    @context.AverageScore.ToString("F1")%
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Streak" Class="text-center">
                                @if (context.CurrentStreak > 0)
                                {
                                    <MudChip T="string" Color="Color.Info" Icon="@Icons.Material.Filled.LocalFireDepartment">
                                        @context.CurrentStreak
                                    </MudChip>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Class="text-gray-400">-</MudText>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    @if (filteredLeaderboard.Count == 0 && !string.IsNullOrEmpty(searchTerm))
                    {
                        <MudStack AlignItems="AlignItems.Center" Class="py-8">
                            <MudText Typo="Typo.body1" Class="text-gray-400">No users found matching "@searchTerm"</MudText>
                        </MudStack>
                    }
                </MudCardContent>
            </MudCard>
        }
    }
</MudContainer>

@code {
    private List<LeaderboardEntryModel>? leaderboard;
    private List<LeaderboardEntryModel> filteredLeaderboard = new();
    private List<LeaderboardEntryModel>? topRanks;
    private LeaderboardEntryModel? currentUserRank;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedPeriod = "all";
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        }

        await LoadLeaderboard();
    }

    private async Task LoadLeaderboard()
    {
        try
        {
            isLoading = true;

            // Load leaderboard data based on selected period via HTTP endpoints
            if (selectedPeriod == "week")
            {
                leaderboard = await LeaderboardRepository.GetWeeklyLeaderboardAsync();
            }
            else if (selectedPeriod == "month")
            {
                leaderboard = await LeaderboardRepository.GetMonthlyLeaderboardAsync();
            }
            else
            {
                leaderboard = await LeaderboardRepository.GetOverallLeaderboardAsync();
            }

            topRanks = leaderboard?.Take(3).ToList() ?? new List<LeaderboardEntryModel>();
            currentUserRank = leaderboard?.FirstOrDefault(l => l.UserId == currentUserId);

            FilterLeaderboard();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading leaderboard: {ex.Message}");
            leaderboard = new List<LeaderboardEntryModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshLeaderboard()
    {
        await LoadLeaderboard();
    }

    private void SelectPeriod(string period)
    {
        selectedPeriod = period;
        _ = LoadLeaderboard();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterLeaderboard();
    }

    private void FilterLeaderboard()
    {
        if (leaderboard == null) return;

        var filtered = leaderboard.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(l =>
            l.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        filteredLeaderboard = filtered.ToList();
    }

    private string GetAvatarUrl(string userId)
    {
        // In a real implementation, this would return the actual user avatar URL
        return $"https://ui-avatars.com/api/?name={Uri.EscapeDataString(userId)}&background=007bff&color=fff&size=100";
    }

    private string GetRankColor(int rank) => rank switch
    {
        1 => "text-warning", // Gold
        2 => "text-secondary", // Silver
        3 => "text-danger", // Bronze
        _ => "text-muted"
    };

    private MudBlazor.Color GetScoreBadgeColor(double score) => score switch
    {
        >= 90 => MudBlazor.Color.Success,
        >= 80 => MudBlazor.Color.Info,
        >= 70 => MudBlazor.Color.Warning,
        _ => MudBlazor.Color.Secondary
    };
}