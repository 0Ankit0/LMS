@using LMS.Data.DTOs
@using System.Security.Claims
@using MudBlazor
@using LMS.Web.Repositories
@page "/user/lms/achievements"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAchievementRepository AchievementRepository
@inject ILeaderboardRepository LeaderboardRepository
@inject ISnackbar Snackbar

<PageTitle>Achievements - LMS</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="min-h-screen bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20 py-8">
    <!-- Header Section -->
    <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-8">
        <MudItem xs="12" md="8">
            <MudStack>
                <MudText Typo="Typo.h4" Class="font-bold text-gray-900 dark:text-white">Achievements</MudText>
                <MudText Typo="Typo.body1" Class="text-gray-500 dark:text-gray-300">Track your progress and celebrate your accomplishments</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshAchievements"
                StartIcon="@Icons.Material.Filled.Refresh" Class="rounded" FullWidth="true">
                Refresh Achievements
            </MudButton>
        </MudItem>
    </MudGrid>

    @if (isLoading)
    {
        <!-- Loading State -->
        <MudGrid Spacing="6">
            <!-- Stats Cards Skeleton -->
            <MudItem xs="12">
                <MudGrid Spacing="4">
                    @for (int i = 0; i < 4; i++)
                    {
                        <MudItem xs="12" sm="6" lg="3">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Class="rounded-2xl" />
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
            <!-- Tabs Skeleton -->
            <MudItem xs="12">
                <MudStack Spacing="4">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="60px" Class="rounded" />
                    <MudGrid Spacing="4">
                        @for (int i = 0; i < 6; i++)
                        {
                            <MudItem xs="12" sm="6" lg="4">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="220px" Class="rounded-2xl" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudStack>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <!-- Stats Cards -->
        <MudGrid Spacing="4" Class="mb-8">
            <!-- Earned Achievements Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3" Class="rounded-2xl overflow-hidden bg-gradient-to-r from-blue-500 to-blue-600 text-white">
                    <MudStack AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">@earnedCount</MudText>
                        <MudText Typo="Typo.body2" Class="opacity-90">Earned</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Total Points Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3" Class="rounded-2xl overflow-hidden bg-gradient-to-r from-green-500 to-green-600 text-white">
                    <MudStack AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">@totalPoints</MudText>
                        <MudText Typo="Typo.body2" Class="opacity-90">Total Points</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Available Achievements Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3" Class="rounded-2xl overflow-hidden bg-gradient-to-r from-cyan-500 to-cyan-600 text-white">
                    <MudStack AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.TrackChanges" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">@availableCount</MudText>
                        <MudText Typo="Typo.body2" Class="opacity-90">Available</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- User Rank Card -->
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Elevation="3" Class="rounded-2xl overflow-hidden bg-gradient-to-r from-orange-500 to-orange-600 text-white">
                    <MudStack AlignItems="AlignItems.Center" Class="p-6">
                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Large" />
                        <MudText Typo="Typo.h4" Class="font-bold">#@userRank</MudText>
                        <MudText Typo="Typo.body2" Class="opacity-90">Rank</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <!-- Achievements Tabs -->
        <MudTabs @bind-ActivePanelIndex="@currentTab" Elevation="2" Rounded="true" Class="bg-white dark:bg-gray-800">
            <!-- Earned Achievements Tab -->
            <MudTabPanel Text="Earned Achievements" Icon="@Icons.Material.Filled.EmojiEvents">
                <MudStack Spacing="4" Class="p-6">
                    @if (earnedAchievements?.Any() == true)
                    {
                        <MudGrid Spacing="4">
                            @foreach (var achievement in earnedAchievements)
                            {
                                <MudItem xs="12" sm="6" lg="4">
                                    <MudPaper Elevation="3" Class="rounded-2xl p-6 border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20">
                                        <MudStack AlignItems="AlignItems.Center" Spacing="3">
                                            <MudAvatar Size="Size.Large" Class="mud-elevation-4" Style="@($"background: {achievement.BadgeColor}")">
                                                @if (!string.IsNullOrEmpty(achievement.AchievementIconUrl))
                                                {
                                                    <MudImage Src="@achievement.AchievementIconUrl" Alt="@achievement.AchievementName" 
                                                        ObjectFit="ObjectFit.Cover" Height="40" Width="40" />
                                                }
                                                else
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Medium" Color="Color.Inherit" />
                                                }
                                            </MudAvatar>
                                            
                                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                                <MudText Typo="Typo.h6" Class="font-bold text-center">@achievement.AchievementName</MudText>
                                                <MudText Typo="Typo.body2" Class="text-gray-600 dark:text-gray-300 text-center">
                                                    @achievement.AchievementDescription
                                                </MudText>
                                            </MudStack>

                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="w-full">
                                                <MudChip T="string" Text="@($"{achievement.Points} pts")" Color="Color.Success" 
                                                    Variant="Variant.Filled" Class="rounded" />
                                                <MudText Typo="Typo.caption" Class="text-gray-500">
                                                    @achievement.EarnedAt.ToString("MMM dd, yyyy")
                                                </MudText>
                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudPaper Elevation="2" Class="rounded-2xl p-12">
                            <MudStack Spacing="4" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" Class="text-gray-400" />
                                <MudText Typo="Typo.h5" Class="font-bold text-gray-500">No achievements earned yet</MudText>
                                <MudText Typo="Typo.body1" Class="text-gray-400 text-center">
                                    Complete courses and activities to earn your first achievement!
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    }
                </MudStack>
            </MudTabPanel>

            <!-- Available Achievements Tab -->
            <MudTabPanel Text="Available" Icon="@Icons.Material.Filled.TrackChanges">
                <MudStack Spacing="4" Class="p-6">
                    @if (availableAchievements?.Any() == true)
                    {
                        <MudGrid Spacing="4">
                            @foreach (var achievement in availableAchievements)
                            {
                                <MudItem xs="12" sm="6" lg="4">
                                    <MudPaper Elevation="2" Class="rounded-2xl p-6 border border-gray-200 dark:border-gray-700">
                                        <MudStack AlignItems="AlignItems.Center" Spacing="3">
                                            <MudAvatar Size="Size.Large" Class="opacity-50" Style="@($"background: {achievement.BadgeColor}")">
                                                @if (!string.IsNullOrEmpty(achievement.IconUrl))
                                                {
                                                    <MudImage Src="@achievement.IconUrl" Alt="@achievement.Name" 
                                                        ObjectFit="ObjectFit.Cover" Height="40" Width="40" />
                                                }
                                                else
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Medium" Color="Color.Inherit" />
                                                }
                                            </MudAvatar>
                                            
                                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                                <MudText Typo="Typo.h6" Class="font-bold text-center">@achievement.Name</MudText>
                                                <MudText Typo="Typo.body2" Class="text-gray-600 dark:text-gray-300 text-center">
                                                    @achievement.Description
                                                </MudText>
                                            </MudStack>

                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="w-full">
                                                <MudChip T="string" Text="@($"{achievement.Points} pts")" Color="Color.Primary" 
                                                    Variant="Variant.Outlined" Class="rounded" />
                                                <MudChip T="string" Text="@achievement.Type" Color="Color.Secondary" 
                                                    Variant="Variant.Text" Class="rounded" />
                                            </MudStack>

                                            @if (achievement.Criteria?.Any() == true)
                                            {
                                                <MudStack Spacing="2" Class="w-full">
                                                    <MudText Typo="Typo.subtitle2" Class="font-medium">Requirements:</MudText>
                                                    @foreach (var criterion in achievement.Criteria)
                                                    {
                                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Color="Color.Primary" />
                                                            <MudText Typo="Typo.caption" Class="text-blue-600 dark:text-blue-400">
                                                                @criterion.Type
                                                            </MudText>
                                                        </MudStack>
                                                    }
                                                </MudStack>
                                            }
                                        </MudStack>
                                    </MudPaper>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudPaper Elevation="2" Class="rounded-2xl p-12">
                            <MudStack Spacing="4" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.TrackChanges" Size="Size.Large" Class="text-gray-400" />
                                <MudText Typo="Typo.h5" Class="font-bold text-gray-500">No available achievements</MudText>
                                <MudText Typo="Typo.body1" Class="text-gray-400 text-center">
                                    All achievements have been earned! Great job!
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    }
                </MudStack>
            </MudTabPanel>

            <!-- Leaderboard Tab -->
            <MudTabPanel Text="Leaderboard" Icon="@Icons.Material.Filled.BarChart">
                <MudStack Spacing="4" Class="p-6">
                    @if (leaderboardEntries?.Any() == true)
                    {
                        <MudTable Items="@leaderboardEntries" Hover="true" Striped="true" 
                            Class="rounded-2xl overflow-hidden" Elevation="2">
                            <HeaderContent>
                                <MudTh><MudText Typo="Typo.subtitle2" Class="font-bold">Rank</MudText></MudTh>
                                <MudTh><MudText Typo="Typo.subtitle2" Class="font-bold">User</MudText></MudTh>
                                <MudTh><MudText Typo="Typo.subtitle2" Class="font-bold">Total Points</MudText></MudTh>
                                <MudTh><MudText Typo="Typo.subtitle2" Class="font-bold">Achievements</MudText></MudTh>
                                <MudTh><MudText Typo="Typo.subtitle2" Class="font-bold">Last Updated</MudText></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText Typo="Typo.body1" Class="font-bold">#@context.Rank</MudText>
                                        @if (context.Rank <= 3)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" 
                                                Color="@GetRankIconColor(context.Rank)" Size="Size.Small" />
                                        }
                                    </MudStack>
                                </MudTd>
                                <MudTd>
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudAvatar Size="Size.Small" Color="Color.Primary">
                                            @context.UserName?.Substring(0, 1).ToUpper()
                                        </MudAvatar>
                                        <MudText Typo="Typo.body1">@context.UserName</MudText>
                                    </MudStack>
                                </MudTd>
                                <MudTd>
                                    <MudChip T="string" Text="@context.TotalPoints.ToString()" Color="Color.Success" 
                                        Variant="Variant.Filled" Class="rounded" />
                                </MudTd>
                                <MudTd>
                                    <MudText Typo="Typo.body1">@context.AchievementCount</MudText>
                                </MudTd>
                                <MudTd>
                                    <MudText Typo="Typo.body2" Class="text-gray-600">
                                        @context.LastUpdated.ToString("MMM dd, yyyy")
                                    </MudText>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    else
                    {
                        <MudPaper Elevation="2" Class="rounded-2xl p-12">
                            <MudStack Spacing="4" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Large" Class="text-gray-400" />
                                <MudText Typo="Typo.h5" Class="font-bold text-gray-500">No leaderboard data available</MudText>
                                <MudText Typo="Typo.body1" Class="text-gray-400 text-center">
                                    Leaderboard will appear as users earn achievements.
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    }
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    private int currentTab = 0;
    private List<UserAchievementModel> earnedAchievements = new();
    private List<AchievementModel> availableAchievements = new();
    private List<LeaderboardEntryModel> leaderboardEntries = new();
    private int earnedCount = 0;
    private int availableCount = 0;
    private int totalPoints = 0;
    private int userRank = 0;
    private string? currentUserId;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        await LoadAchievementData();
    }

    private async Task LoadAchievementData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (!string.IsNullOrEmpty(currentUserId))
            {
                try
                {
                    // Load user achievements data via repository
                    var userAchievementsData = await AchievementRepository.GetUserAchievementsDataAsync(currentUserId);
                    
                    earnedAchievements = userAchievementsData.EarnedAchievements;
                    availableAchievements = userAchievementsData.AvailableAchievements;
                    leaderboardEntries = userAchievementsData.LeaderboardEntries;
                    totalPoints = userAchievementsData.TotalPoints;
                    earnedCount = userAchievementsData.EarnedCount;
                    availableCount = userAchievementsData.AvailableCount;
                    userRank = userAchievementsData.UserRank;
                }
                catch
                {
                    // If repository call fails, show empty states
                    earnedAchievements = new List<UserAchievementModel>();
                    availableAchievements = new List<AchievementModel>();
                    leaderboardEntries = new List<LeaderboardEntryModel>();
                    totalPoints = 0;
                    earnedCount = 0;
                    availableCount = 0;
                    userRank = 0;
                }
            }
            else
            {
                // No user ID found, show empty states
                earnedAchievements = new List<UserAchievementModel>();
                availableAchievements = new List<AchievementModel>();
                leaderboardEntries = new List<LeaderboardEntryModel>();
                totalPoints = 0;
                earnedCount = 0;
                availableCount = 0;
                userRank = 0;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading achievements: {ex.Message}", Severity.Error);
            // Show empty states on exception
            earnedAchievements = new List<UserAchievementModel>();
            availableAchievements = new List<AchievementModel>();
            leaderboardEntries = new List<LeaderboardEntryModel>();
            totalPoints = 0;
            earnedCount = 0;
            availableCount = 0;
            userRank = 0;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshAchievements()
    {
        await LoadAchievementData();
        Snackbar.Add("Achievements refreshed successfully", Severity.Success);
    }

    private MudBlazor.Color GetRankIconColor(int rank) => rank switch
    {
        1 => MudBlazor.Color.Warning,  // Gold
        2 => MudBlazor.Color.Default,  // Silver  
        3 => MudBlazor.Color.Error,    // Bronze
        _ => MudBlazor.Color.Default
    };
}
