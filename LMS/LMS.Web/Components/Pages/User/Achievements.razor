@using LMS.Data.DTOs
@using LMS.Data.Entities
@using System.Security.Claims
@page "/user/lms/achievements"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAchievementRepository AchievementRepository
@inject ILeaderboardRepository LeaderboardRepository
@inject ISnackbar Snackbar

<div class="p-6">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="flex items-center space-x-3 mb-8">
            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="h-8 w-8 text-yellow-500" />
            <h1 class="text-3xl font-bold text-gray-900">Achievements</h1>
        </div>
        <MudTabs @bind-ActivePanelIndex="@currentTab" Elevation="2" Rounded="true" Class="space-y-6">
            <MudTabPanel Text="Earned">
                @if (earnedAchievements?.Any() == true)
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        @foreach (var achievement in earnedAchievements)
                        {
                            <MudCard Class="border-green-200 bg-green-50">
                                <MudCardContent Class="p-6 text-center">
                                    <div class="w-16 h-16 rounded-full mx-auto mb-4 flex items-center justify-center" style="background-color: @achievement.BadgeColor">
                                        @if (!string.IsNullOrEmpty(achievement.AchievementIconUrl))
                                        {
                                            <img src="@achievement.AchievementIconUrl" alt="@achievement.AchievementName" class="w-10 h-10" />
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="h-8 w-8 text-white" />
                                        }
                                    </div>
                                    <MudText Typo="Typo.h5" Class="text-lg font-semibold mb-2">@achievement.AchievementName</MudText>
                                    <MudText Typo="Typo.body2" Class="text-gray-600 text-sm mb-4">@achievement.AchievementDescription</MudText>
                                    <div class="flex items-center justify-between">
                                        <MudChip T="string" Color="Color.Success" Class="bg-green-100 text-green-800">@achievement.Points pts</MudChip>
                                        <span class="text-xs text-gray-500">Earned @achievement.EarnedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        }
                    </div>
                }
                else
                {
                    <MudCard Class="text-center py-12">
                        <MudCardContent>
                            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="h-16 w-16 text-gray-400 mx-auto mb-4" />
                            <MudText Typo="Typo.h4" Class="text-xl font-semibold text-gray-900 mb-2">No achievements earned yet</MudText>
                            <MudText Typo="Typo.body1" Class="text-gray-600">Complete courses and activities to earn your first achievement!</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </MudTabPanel>
            <MudTabPanel Text="Available">
                @if (availableAchievements?.Any() == true)
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        @foreach (var achievement in availableAchievements)
                        {
                            <MudCard>
                                <MudCardContent Class="p-6 text-center">
                                    <div class="w-16 h-16 rounded-full mx-auto mb-4 flex items-center justify-center opacity-50" style="background-color: @achievement.BadgeColor">
                                        @if (!string.IsNullOrEmpty(achievement.IconUrl))
                                        {
                                            <img src="@achievement.IconUrl" alt="@achievement.Name" class="w-10 h-10" />
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="h-8 w-8 text-white" />
                                        }
                                    </div>
                                    <MudText Typo="Typo.h5" Class="text-lg font-semibold mb-2">@achievement.Name</MudText>
                                    <MudText Typo="Typo.body2" Class="text-gray-600 text-sm mb-4">@achievement.Description</MudText>
                                    <div class="flex items-center justify-between mb-4">
                                        <MudChip T="string" Color="Color.Primary" Class="text-blue-600 border-blue-200">@achievement.Points pts</MudChip>
                                        <span class="text-xs text-gray-500">@achievement.Type</span>
                                    </div>
                                    @if (achievement.Criteria.Count > 0)
                                    {
                                        <div class="space-y-2">
                                            @foreach (var criterion in achievement.Criteria)
                                            {
                                                <div class="flex items-center text-xs text-blue-600">
                                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="h-3 w-3 mr-1" />
                                                    <span>@criterion.Type</span>
                                                </div>
                                            }
                                        </div>
                                    }
                                </MudCardContent>
                            </MudCard>
                        }
                    </div>
                }
                else
                {
                    <MudCard Class="text-center py-12">
                        <MudCardContent>
                            <MudIcon Icon="@Icons.Material.Filled.TrackChanges" Class="h-16 w-16 text-gray-400 mx-auto mb-4" />
                            <MudText Typo="Typo.h4" Class="text-xl font-semibold text-gray-900 mb-2">No available achievements</MudText>
                            <MudText Typo="Typo.body1" Class="text-gray-600">All achievements have been earned! Great job!</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </MudTabPanel>
            <MudTabPanel Text="Leaderboard">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5" Class="flex items-center space-x-2">
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="h-5 w-5" />
                            <span>Achievement Leaderboard</span>
                        </MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (leaderboardEntries?.Any() == true)
                        {
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rank</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Points</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Achievements</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Latest Achievement</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        @foreach (var entry in leaderboardEntries)
                                        {
                                            <tr>
                                                <td class="px-6 py-4 whitespace-nowrap">
                                                    <div class="flex items-center space-x-2">
                                                        <span class="font-bold">#@entry.Rank</span>
                                                        @if (entry.Rank <= 3)
                                                        {
                                                            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class=$"h-4 w-4 {GetRankIconClass(entry.Rank)}" />
                                                        }
                                                    </div>
                                                </td>
                                                <td class="px-6 py-4 whitespace-nowrap">
                                                    <div class="flex items-center space-x-3">
                                                        @if (!string.IsNullOrEmpty(entry.ProfilePictureUrl))
                                                        {
                                                            <MudAvatar Image="@entry.ProfilePictureUrl" Class="h-8 w-8" />
                                                        }
                                                        else
                                                        {
                                                            <MudAvatar Color="Color.Secondary" Class="h-8 w-8">
                                                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="h-4 w-4" />
                                                            </MudAvatar>
                                                        }
                                                        <div class="flex items-center space-x-2">
                                                            <span>@entry.UserName</span>
                                                            @if (entry.UserId == currentUserId)
                                                            {
                                                                <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="text-xs">You</MudChip>
                                                            }
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="px-6 py-4 whitespace-nowrap font-medium">@entry.TotalPoints</td>
                                                <td class="px-6 py-4 whitespace-nowrap">@entry.AchievementCount</td>
                                                <td class="px-6 py-4 whitespace-nowrap text-gray-500">@entry.LastUpdated.ToString("MMM dd, yyyy")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-12">
                                <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="h-16 w-16 text-gray-400 mx-auto mb-4" />
                                <MudText Typo="Typo.h4" Class="text-xl font-semibold text-gray-900 mb-2">No leaderboard data available</MudText>
                                <MudText Typo="Typo.body1" Class="text-gray-600">Start earning achievements to appear on the leaderboard!</MudText>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
        </MudTabs>
    </div>

    @if (isLoading)
    {
        <!-- Skeleton Loader -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            @for (int i = 0; i < 4; i++)
            {
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Class="h-32" />
            }
        </div>
        <MudTabs Elevation="2" Rounded="true" Class="space-y-6">
            <MudTabPanel Text="Earned">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-4">
                    @for (int i = 0; i < 6; i++)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="220px" Class="h-64" />
                    }
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Available">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-4">
                    @for (int i = 0; i < 6; i++)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="220px" Class="h-64" />
                    }
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Leaderboard">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" Class="mt-4 h-80" />
            </MudTabPanel>
        </MudTabs>
    }
    else
    {
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <MudCard>
                <MudCardContent Class="p-6 text-center bg-blue-600 text-white">
                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="h-8 w-8 mx-auto mb-2" />
                    <MudText Typo="Typo.h4" Class="text-3xl font-bold">@earnedCount</MudText>
                    <MudText Typo="Typo.body1" Class="text-sm opacity-90">Earned</MudText>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardContent Class="p-6 text-center bg-green-600 text-white">
                    <MudIcon Icon="@Icons.Material.Filled.Star" Class="h-8 w-8 mx-auto mb-2" />
                    <MudText Typo="Typo.h4" Class="text-3xl font-bold">@totalPoints</MudText>
                    <MudText Typo="Typo.body1" Class="text-sm opacity-90">Total Points</MudText>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardContent Class="p-6 text-center bg-cyan-600 text-white">
                    <MudIcon Icon="@Icons.Material.Filled.TrackChanges" Class="h-8 w-8 mx-auto mb-2" />
                    <MudText Typo="Typo.h4" Class="text-3xl font-bold">@availableCount</MudText>
                    <MudText Typo="Typo.body1" Class="text-sm opacity-90">Available</MudText>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardContent Class="p-6 text-center bg-orange-600 text-white">
                    <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="h-8 w-8 mx-auto mb-2" />
                    <MudText Typo="Typo.h4" Class="text-3xl font-bold">#@userRank</MudText>
                    <MudText Typo="Typo.body1" Class="text-sm opacity-90">Rank</MudText>
                </MudCardContent>
            </MudCard>
        </div>
    }
</div>


@code {
    private int currentTab = 0;
    private List<UserAchievementModel> earnedAchievements = new();
    private List<AchievementModel> availableAchievements = new();
    private List<LeaderboardEntryModel> leaderboardEntries = new();
    private int earnedCount = 0;
    private int availableCount = 0;
    private int totalPoints = 0;
    private int userRank = 0;
    private string? currentUserId;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        await LoadAchievementData();
    }

    private async Task LoadAchievementData()
    {
        try
        {
            isLoading = true;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                try
                {
                    // Load user achievements via repository
                    var userAchievements = await AchievementRepository.GetUserAchievementsAsync(currentUserId);
                    earnedAchievements = userAchievements ?? new List<UserAchievementModel>();
                    earnedCount = earnedAchievements?.Count ?? 0;
                    totalPoints = earnedAchievements?.Sum(a => a.Points) ?? 0;

                    // Load all achievements to find available ones
                    var allAchievements = await AchievementRepository.GetAllAchievementsAsync();
                    var earnedIds = earnedAchievements?.Select(a => a.AchievementId).ToHashSet() ?? new HashSet<int>();
                    availableAchievements = allAchievements?.Where(a => !earnedIds.Contains(a.Id)).ToList() ?? new List<AchievementModel>();
                    availableCount = availableAchievements?.Count ?? 0;

                    // Load leaderboard data via repository
                    leaderboardEntries = await LeaderboardRepository.GetAchievementLeaderboardAsync();

                    // Find user rank via repository
                    userRank = await LeaderboardRepository.GetUserAchievementRankAsync(currentUserId);
                }
                catch
                {
                    // If any repository calls fail, load dummy data
                    LoadDummyData();
                }
            }
            else
            {
                // No user ID found, load dummy data
                LoadDummyData();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading achievements: {ex.Message}", Severity.Error);
            LoadDummyData(); // Fall back to dummy data on exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadDummyData()
    {
        LoadDummyEarnedAchievements();
        LoadDummyAvailableAchievements();
        LoadDummyLeaderboardEntries();
        userRank = 3; // Default dummy rank
    }

    private void LoadDummyEarnedAchievements()
    {
        earnedAchievements = new List<UserAchievementModel>
        {
            new UserAchievementModel
            {
                Id = 1,
                UserId = "dummyUser1",
                UserName = "CurrentUser",
                AchievementId = 101,
                AchievementName = "First Course Completed",
                AchievementDescription = "Successfully completed your first course",
                AchievementIconUrl = "/images/achievements/course-complete.png",
                Points = 50,
                BadgeColor = "#28a745",
                EarnedAt = DateTime.Now.AddDays(-15)
            },
            new UserAchievementModel
            {
                Id = 2,
                UserId = "dummyUser1",
                UserName = "CurrentUser",
                AchievementId = 102,
                AchievementName = "Perfect Score",
                AchievementDescription = "Achieved 100% on an assessment",
                AchievementIconUrl = "/images/achievements/perfect-score.png",
                Points = 100,
                BadgeColor = "#007bff",
                EarnedAt = DateTime.Now.AddDays(-7)
            },
            new UserAchievementModel
            {
                Id = 3,
                UserId = "dummyUser1",
                UserName = "CurrentUser",
                AchievementId = 103,
                AchievementName = "Streak Master",
                AchievementDescription = "Logged in for 7 consecutive days",
                AchievementIconUrl = null,
                Points = 75,
                BadgeColor = "#fd7e14",
                EarnedAt = DateTime.Now.AddDays(-2)
            }
        };

        earnedCount = earnedAchievements.Count;
        totalPoints = earnedAchievements.Sum(a => a.Points);
    }

    private void LoadDummyAvailableAchievements()
    {
        availableAchievements = new List<AchievementModel>
    {
        new AchievementModel
        {
            Id = 104,
            Name = "Course Creator",
            Description = "Create your first course",
            IconUrl = "/images/achievements/course-creator.png",
            Points = 150,
            BadgeColor = "#6f42c1",
            Type = "Creation",
            Criteria = new List<AchievementCriteria>
            {
                new AchievementCriteria { Type = CriteriaType.CourseCompletion }
            },
            IsActive = true
        },
        new AchievementModel
        {
            Id = 105,
            Name = "Community Contributor",
            Description = "Post 10 helpful comments in discussions",
            IconUrl = "/images/achievements/contributor.png",
            Points = 100,
            BadgeColor = "#20c997",
            Type = "Community",
            Criteria = new List<AchievementCriteria>
            {
                new AchievementCriteria { Type = CriteriaType.Participation },
                new AchievementCriteria { Type = CriteriaType.Social }
            },
            IsActive = true
        },
        new AchievementModel
        {
            Id = 106,
            Name = "Advanced Learner",
            Description = "Complete 5 advanced courses",
            IconUrl = null,
            Points = 200,
            BadgeColor = "#dc3545",
            Type = "Learning",
            Criteria = new List<AchievementCriteria>
            {
                new AchievementCriteria { Type = CriteriaType.CourseCompletion }
            },
            IsActive = true
        }
    };

        availableCount = availableAchievements.Count;
    }
    private void LoadDummyLeaderboardEntries()
    {
        leaderboardEntries = new List<LeaderboardEntryModel>
        {
            new LeaderboardEntryModel
            {
                Rank = 1,
                UserId = "user123",
                UserName = "LearningMaster",
                UserEmail = "master@example.com",
                ProfilePictureUrl = "/images/profiles/user1.jpg",
                TotalPoints = 850,
                AchievementCount = 12,
                LastUpdated = DateTime.Now.AddDays(-1)
            },
            new LeaderboardEntryModel
            {
                Rank = 2,
                UserId = "user456",
                UserName = "KnowledgeSeeker",
                UserEmail = "seeker@example.com",
                ProfilePictureUrl = "/images/profiles/user2.jpg",
                TotalPoints = 720,
                AchievementCount = 9,
                LastUpdated = DateTime.Now.AddDays(-3)
            },
            new LeaderboardEntryModel
            {
                Rank = 3,
                UserId = "dummyUser1", // Current user
                UserName = "CurrentUser",
                UserEmail = "current@example.com",
                ProfilePictureUrl = null,
                TotalPoints = 225,
                AchievementCount = 3,
                LastUpdated = DateTime.Now.AddDays(-2)
            },
            new LeaderboardEntryModel
            {
                Rank = 4,
                UserId = "user789",
                UserName = "StudyBuddy",
                UserEmail = "buddy@example.com",
                ProfilePictureUrl = "/images/profiles/user3.jpg",
                TotalPoints = 180,
                AchievementCount = 3,
                LastUpdated = DateTime.Now.AddDays(-5)
            },
            new LeaderboardEntryModel
            {
                Rank = 5,
                UserId = "user321",
                UserName = "CourseExplorer",
                UserEmail = "explorer@example.com",
                ProfilePictureUrl = null,
                TotalPoints = 125,
                AchievementCount = 2,
                LastUpdated = DateTime.Now.AddDays(-7)
            }
        };
    }

    private string GetRankIconClass(int rank)
    {
        return rank switch
        {
            1 => "text-warning ms-1",
            2 => "text-secondary ms-1",
            3 => "text-danger ms-1",
            _ => "ms-1"
        };
    }
}