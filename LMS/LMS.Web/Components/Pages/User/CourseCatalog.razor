@using LMS.Web.Components.Pages.User.Shared
@using MudBlazor
@page "/user/lms/courses/catalog"
@inject ICourseRepository CourseRepository
@inject NavigationManager NavigationManager



<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 grid grid-cols-1 md:grid-cols-4 gap-8">
        <!-- Sidebar -->
        <aside class="md:col-span-1">
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-lg p-6 sticky top-8">
                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Categories</h2>
                <nav class="flex flex-col gap-2 mb-6">
                    <MudNavMenu>
                        <MudNavLink Href="javascript:void(0)" OnClick='@(() => SelectCategory("all"))'
                            Icon="@Icons.Material.Filled.AllInclusive">All Courses</MudNavLink>
                        <MudNavLink Href="javascript:void(0)" OnClick='@(() => SelectCategory("development"))'
                            Icon="@Icons.Material.Filled.Code">Development</MudNavLink>
                        <MudNavLink Href="javascript:void(0)" OnClick='@(() => SelectCategory("business"))'
                            Icon="@Icons.Material.Filled.BusinessCenter">Business</MudNavLink>
                        <MudNavLink Href="javascript:void(0)" OnClick='@(() => SelectCategory("design"))'
                            Icon="@Icons.Material.Filled.Palette">Design</MudNavLink>
                        <MudNavLink Href="javascript:void(0)" OnClick='@(() => SelectCategory("security"))'
                            Icon="@Icons.Material.Filled.Security">Security</MudNavLink>
                    </MudNavMenu>
                </nav>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Filters</h3>
                <div class="mb-4">
                    <div class="text-sm font-medium text-gray-500 mb-1">Level</div>
                    <div class="flex flex-col gap-2">
                        <MudCheckBox T="bool" @bind-Checked="filters.Beginner" Label="Beginner" Color="Color.Primary"
                            OnChange="ApplyFilters" />
                        <MudCheckBox T="bool" @bind-Checked="filters.Intermediate" Label="Intermediate"
                            Color="Color.Primary" OnChange="ApplyFilters" />
                        <MudCheckBox T="bool" @bind-Checked="filters.Advanced" Label="Advanced" Color="Color.Primary"
                            OnChange="ApplyFilters" />
                    </div>
                </div>
            </div>
        </aside>
        <!-- Main Content -->
        <main class="md:col-span-3">
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-lg p-8">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Course Catalog</h1>
                        <p class="text-gray-500 dark:text-gray-300">Discover and learn new skills</p>
                    </div>
                    <div class="flex flex-col sm:flex-row gap-4 items-center">
                        <MudTextField @bind-Value="searchQuery" Placeholder="Search courses, instructors, topics..."
                            Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" Class="w-full sm:w-64" />
                        <MudSelect T="string" Label="Sort By" Variant="Variant.Outlined" @bind-Value="sortBy"
                            TextChanged="SetSort" Class="w-full sm:w-40">
                            <MudSelectItem Value='@("popular")'>Most Popular</MudSelectItem>
                            <MudSelectItem Value='@("newest")'>Newest</MudSelectItem>
                            <MudSelectItem Value='@("alphabetical")'>A-Z</MudSelectItem>
                            <MudSelectItem Value='@("level")'>By Level</MudSelectItem>
                        </MudSelect>
                    </div>
                </div>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    @if (isLoading)
                    {
                        @for (int i = 0; i < 6; i++)
                        {
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" Class="rounded-2xl w-full" />
                        }
                    }
                    else if (filteredCourses.Any())
                    {
                        @foreach (var course in filteredCourses)
                        {
                            <CourseCard Course="course"
                                OnClick="@(c => NavigationManager.NavigateTo($"/user/lms/course/{c.Id}"))" />
                        }
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.SearchOff" Class="col-span-full">
                            <MudText Typo="Typo.h5">No courses found</MudText>
                            <MudText>Try adjusting your search criteria or filters.</MudText>
                        </MudAlert>
                    }
                </div>
            </div>
        </main>
    </div>
</div>


@code {
    // State variables
    private string selectedCategory = "all";
    private string searchQuery = "";
    private string sortBy = "popular";
    private FilterModel filters = new();
    private HashSet<int> bookmarkedCourses = new();
    private List<CourseModel> filteredCourses = new();
    private List<CourseModel> allCourses = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        try
        {
            isLoading = true;
            allCourses = await CourseRepository.GetAllCoursesAsync() ?? new();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
        ApplyFilters();
    }

    private void SetSort(string sortType)
    {
        sortBy = sortType;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var courses = allCourses.AsQueryable();

        // Apply category filter
        if (selectedCategory != "all")
        {
            courses = courses.Where(c => c.Categories != null && c.Categories.Contains(selectedCategory));
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            courses = courses.Where(c =>
            c.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            c.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            c.InstructorName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
        }

        // Apply level filters
        if (filters.HasAnyLevelFilter())
        {
            courses = courses.Where(c =>
            (filters.Beginner && c.Level == "Beginner") ||
            (filters.Intermediate && c.Level == "Intermediate") ||
            (filters.Advanced && c.Level == "Advanced"));
        }

        // Apply sorting
        courses = sortBy switch
        {
            "popular" => courses.OrderByDescending(c => c.EnrollmentCount),
            "newest" => courses.OrderByDescending(c => c.StartDate),
            "alphabetical" => courses.OrderBy(c => c.Title),
            "level" => courses.OrderBy(c => c.Level == "Beginner" ? 1 : c.Level == "Intermediate" ? 2 : 3),
            _ => courses.OrderByDescending(c => c.EnrollmentCount)
        };

        filteredCourses = courses.ToList();
        StateHasChanged();
    }

    private void ToggleBookmark(int courseId)
    {
        if (bookmarkedCourses.Contains(courseId))
        {
            bookmarkedCourses.Remove(courseId);
        }
        else
        {
            bookmarkedCourses.Add(courseId);
        }
    }

    private string FormatDuration(TimeSpan duration)
    {
        var hours = (int)duration.TotalHours;
        var minutes = duration.Minutes;

        if (hours > 0)
        {
            return minutes > 0 ? $"{hours}h {minutes}m" : $"{hours}h";
        }
        return $"{minutes}m";
    }



    // Helper classes
    public class FilterModel
    {
        public bool Beginner { get; set; }
        public bool Intermediate { get; set; }
        public bool Advanced { get; set; }

        public bool HasAnyLevelFilter() => Beginner || Intermediate || Advanced;
    }
}