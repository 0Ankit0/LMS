@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient Http
@rendermode InteractiveAuto

<MudAppBar Elevation="0">
    <MudText Typo="Typo.h6" Class="mud-text-primary" Href="/home" Style="font-size:1.3rem; letter-spacing:1px;">LMS</MudText>
    <MudSpacer />
    @if (isAuthenticated)
    {
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                <MudButton Variant="Variant.Text" Color="Color.Inherit" EndIcon="@Icons.Material.Filled.ArrowDropDown">Account</MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/user/account/manage"))">Manage</MudMenuItem>
                <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/user/account/changepassword"))">Change Password</MudMenuItem>
                <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/user/account/externallogins"))">External Logins</MudMenuItem>
                <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/user/account/personaldata"))">Personal Data</MudMenuItem>
                <MudDivider />
                <MudMenuItem OnClick="LogoutAsync">Logout</MudMenuItem>
            </ChildContent>
        </MudMenu>
    }
    else
    {
        <MudButton Href="/user/account/login" Variant="Variant.Text" Color="Color.Inherit">Login</MudButton>
    }
</MudAppBar>

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }
    private async Task LogoutAsync()
    {
        NavigationManager.NavigateTo("/api/user/account/logout", forceLoad: true);
    }
}