@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using System.Security.Claims
@page "/user/lms/analytics"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject ToastService ToastService

<div class="analytics-layout">
    <!-- Analytics Sidebar -->
    <Offcanvas @ref="offcanvas"
               Placement="Placement.Start"
               Title="Analytics">
        <BodyTemplate>
            <Nav Class="flex-column analytics-nav">
                <NavItem>
                    <NavLink class="@GetOverviewNavClass()" @onclick='() => SelectView("overview")'>
                        <div class="nav-icon">
                            <Icon Name="IconName.Speedometer2" />
                        </div>
                        <span class="nav-text">Overview</span>
                    </NavLink>
                </NavItem>
                <NavItem>
                    <NavLink class="@GetProgressNavClass()" @onclick='() => SelectView("progress")'>
                        <div class="nav-icon">
                            <Icon Name="IconName.GraphUp" />
                        </div>
                        <span class="nav-text">Progress</span>
                    </NavLink>
                </NavItem>
                <NavItem>
                    <NavLink class="@GetPerformanceNavClass()" @onclick='() => SelectView("performance")'>
                        <div class="nav-icon">
                            <Icon Name="IconName.Trophy" />
                        </div>
                        <span class="nav-text">Performance</span>
                    </NavLink>
                </NavItem>
                <NavItem>
                    <NavLink class="@GetActivityNavClass()" @onclick='() => SelectView("activity")'>
                        <div class="nav-icon">
                            <Icon Name="IconName.ClockHistory" />
                        </div>
                        <span class="nav-text">Activity</span>
                    </NavLink>
                </NavItem>
            </Nav>

            <div class="filters-section">
                <h6 class="filter-title">Time Period</h6>
                <div class="filter-group">
                    <div class="btn-group">
                        <Button Color="@(selectedPeriod == "week" ? ButtonColor.Primary : ButtonColor.Secondary)"
                                @onclick='() => SelectPeriod("week")'>
                            This Week
                        </Button>
                        <Button Color="@(selectedPeriod == "month" ? ButtonColor.Primary : ButtonColor.Secondary)"
                                @onclick='() => SelectPeriod("month")'>
                            This Month
                        </Button>
                        <Button Color="@(selectedPeriod == "all" ? ButtonColor.Primary : ButtonColor.Secondary)"
                                @onclick='() => SelectPeriod("all")'>
                            All Time
                        </Button>
                    </div>
                </div>
            </div>
            <div class="mt-3">
                <Button Color="ButtonColor.Primary" @onclick="OnHideOffcanvasClick">Hide Offcanvas</Button>
            </div>
        </BodyTemplate>
    </Offcanvas>

    <Button Color="ButtonColor.Primary" @onclick="OnShowOffcanvasClick">Show offcanvas</Button>

    <!-- Main Analytics Area -->
    <div class="analytics-main">
        <!-- Header -->
        <div class="analytics-header">
            <div class="header-info">
                <h3 class="page-title">Learning Analytics</h3>
                <p class="page-subtitle">Track your learning progress and performance</p>
            </div>
            <div class="header-actions">
                <Button Color="ButtonColor.Primary" @onclick="RefreshAnalytics">
                    <Icon Name="IconName.ArrowClockwise" />
                    <span>Refresh</span>
                </Button>
            </div>
        </div>

        <!-- Analytics Content -->
        <div class="analytics-content">
            @if (isLoading)
            {
                <div class="loading-container">
                    <div class="spinner">
                        <Spinner Color="SpinnerColor.Primary" />
                    </div>
                    <p class="loading-text">Loading your analytics...</p>
                </div>
            }
            else
            {
                @if (selectedView == "overview")
                {
                    <!-- KPI Cards -->
                    <div class="kpi-grid">
                        <Card Background="Background.Primary" Class="kpi-card">
                            <CardBody>
                                <div class="kpi-icon">
                                    <Icon Name="IconName.GraphUpArrow" />
                                </div>
                                <div class="kpi-content">
                                    <div class="kpi-value">@overallProgress.ToString("F1")%</div>
                                    <div class="kpi-label">Overall Progress</div>
                                </div>
                            </CardBody>
                        </Card>

                        <Card Background="Background.Success" Class="kpi-card">
                            <CardBody>
                                <div class="kpi-icon">
                                    <Icon Name="IconName.CheckCircle" />
                                </div>
                                <div class="kpi-content">
                                    <div class="kpi-value">@completedCourses</div>
                                    <div class="kpi-label">Completed Courses</div>
                                </div>
                            </CardBody>
                        </Card>

                        <Card Background="Background.Info" Class="kpi-card">
                            <CardBody>
                                <div class="kpi-icon">
                                    <Icon Name="IconName.Clock" />
                                </div>
                                <div class="kpi-content">
                                    <div class="kpi-value">@totalStudyHours</div>
                                    <div class="kpi-label">Study Hours</div>
                                </div>
                            </CardBody>
                        </Card>

                        <Card Background="Background.Warning" Class="kpi-card">
                            <CardBody>
                                <div class="kpi-icon">
                                    <Icon Name="IconName.Star" />
                                </div>
                                <div class="kpi-content">
                                    <div class="kpi-value">@averageScore.ToString("F1")%</div>
                                    <div class="kpi-label">Average Score</div>
                                </div>
                            </CardBody>
                        </Card>
                    </div>

                    <!-- Charts Row -->
                    <div class="charts-row">
                        <!-- Course Progress Chart -->
                        <Card Class="chart-card large">
                            <CardHeader>
                                <h6 class="card-title">
                                    <Icon Name="IconName.BarChart" />
                                    Course Progress Overview
                                </h6>
                            </CardHeader>
                            <CardBody>
                                @if (enrollments?.Any() == true)
                                {
                                    @foreach (var enrollment in enrollments.Take(5))
                                    {
                                        var courseProgress = GetCourseProgress(enrollment.Id);
                                        <div class="progress-item">
                                            <div class="progress-header">
                                                <span class="course-name">@enrollment.CourseTitle</span>
                                                <span class="progress-value">@courseProgress.ToString("F1")%</span>
                                            </div>
                                            <Progress Value="(int)courseProgress" Color="@GetProgressColor(courseProgress)" />
                                            <div class="progress-meta">
                                                <span class="modules-info">
                                                    @GetCompletedModules(enrollment.Id) / @GetTotalModules(enrollment.Id) modules
                                                </span>
                                                <span class="enrollment-date">
                                                    Enrolled: @enrollment.EnrolledAt.ToString("MMM dd, yyyy")
                                                </span>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <Alert Color="AlertColor.Info" Class="text-center">
                                        <Icon Name="IconName.Book" />
                                        <p class="mb-2">No course enrollments found.</p>
                                        <Button Color="ButtonColor.Primary" To="/user/lms/courses/catalog">Browse Courses</Button>
                                    </Alert>
                                }
                            </CardBody>
                        </Card>

                        <!-- Activity Summary -->
                        <Card Class="chart-card small">
                            <CardHeader>
                                <h6 class="card-title">
                                    <Icon Name="IconName.Activity" />
                                    Activity Summary
                                </h6>
                            </CardHeader>
                            <CardBody Class="center">
                                <div class="circular-progress">
                                    <Progress Circle="true" Value="(int)overallProgress" />
                                    <div class="progress-label">Overall Progress</div>
                                </div>

                                <div class="stats-grid">
                                    <div class="stat-item">
                                        <div class="stat-value">@totalLessonsCompleted</div>
                                        <div class="stat-label">Lessons</div>
                                    </div>
                                    <div class="stat-item">
                                        <div class="stat-value">@totalModulesCompleted</div>
                                        <div class="stat-label">Modules</div>
                                    </div>
                                    <div class="stat-item">
                                        <div class="stat-value">@currentStreak</div>
                                        <div class="stat-label">Day Streak</div>
                                    </div>
                                    <div class="stat-item">
                                        <div class="stat-value">@activeDays</div>
                                        <div class="stat-label">Active Days</div>
                                    </div>
                                </div>
                            </CardBody>
                        </Card>
                    </div>
                }

                @if (selectedView == "activity")
                {
                    <!-- Recent Activity -->
                    <div class="activity-section">
                        <div class="activity-card">
                            <div class="card-header">
                                <h6 class="card-title">
                                    <Icon Name="IconName.ClockHistory" />
                                    Recent Activity
                                </h6>
                            </div>
                            <div class="card-content">
                                @if (recentActivities?.Any() == true)
                                {
                                    <div class="activity-timeline">
                                        @foreach (var activity in recentActivities.Take(10))
                                        {
                                            <div class="timeline-item">
                                                <div class="timeline-marker @GetActivityColor(activity.Type)"></div>
                                                <div class="timeline-content">
                                                    <div class="activity-header">
                                                        <strong class="activity-title">@activity.Description</strong>
                                                        <span class="activity-time">@activity.Timestamp.ToString("MMM dd, HH:mm")</span>
                                                    </div>
                                                    <div class="activity-course">@activity.CourseTitle</div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <Alert Color="AlertColor.Secondary" Class="text-center">
                                        <Icon Name="IconName.ClockHistory" />
                                        <p class="mb-0">No recent activity found.</p>
                                    </Alert>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (selectedView == "performance")
                {
                    <!-- Performance Metrics -->
                    <div class="performance-section">
                        <div class="performance-card">
                            <div class="card-header">
                                <h6 class="card-title">
                                    <Icon Name="IconName.GraphUp" />
                                    Performance Metrics
                                </h6>
                            </div>
                            <div class="card-content">
                                @if (performanceMetrics?.Any() == true)
                                {
                                    @foreach (var metric in performanceMetrics)
                                    {
                                        <div class="metric-item">
                                            <div class="metric-header">
                                                <span class="metric-name">@metric.Name</span>
                                                <Badge Color="@GetMetricBadgeColor(metric.Value)">
                                                    @metric.Value.ToString("F1")@metric.Unit
                                                </Badge>
                                            </div>
                                            <Progress Value="(int)GetMetricPercentage(metric.Value, metric.MaxValue)" Color="@GetMetricProgressBarColor(metric.Value)" />
                                            <div class="metric-description">@metric.Description</div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <Alert Color="AlertColor.Info" Class="text-center">
                                        <Icon Name="IconName.GraphUp" />
                                        <p class="mb-0">Performance data will appear as you progress through courses.</p>
                                    </Alert>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private Offcanvas offcanvas = default!;

    private async Task OnShowOffcanvasClick() => await offcanvas.ShowAsync();

    private async Task OnHideOffcanvasClick() => await offcanvas.HideAsync();

    private List<EnrollmentModel>? enrollments;
    private List<ActivityModel> recentActivities = new();
    private List<MetricModel> performanceMetrics = new();
    private bool isLoading = true;
    private string selectedPeriod = "month";
    private string selectedView = "overview";
    private double overallProgress = 0;
    private int completedCourses = 0;
    private int totalStudyHours = 0;
    private double averageScore = 0;
    private int totalLessonsCompleted = 0;
    private int totalModulesCompleted = 0;
    private int currentStreak = 0;
    private int activeDays = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalytics();
    }

    private async Task LoadAnalytics()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(currentUserId))
                {
                    // Load user enrollments via HTTP endpoint
                    var enrollmentsResponse = await HttpClient.GetAsync($"/api/enrollments/user/{currentUserId}/enrollments");
                    if (enrollmentsResponse.IsSuccessStatusCode)
                    {
                        enrollments = await enrollmentsResponse.Content.ReadFromJsonAsync<List<EnrollmentModel>>();
                    }
                    
                    // Calculate analytics
                    await CalculateAnalytics(currentUserId);
                    
                    // Load recent activities (mock data for now)
                    LoadRecentActivities();
                    
                    // Load performance metrics (mock data for now)
                    LoadPerformanceMetrics();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading analytics: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private Task CalculateAnalytics(string userId)
    {
        if (enrollments == null) return Task.CompletedTask;

        var completedEnrollments = enrollments.Where(e => e.ProgressPercentage >= 100).ToList();
        completedCourses = completedEnrollments.Count;

        if (enrollments.Any())
        {
            overallProgress = enrollments.Average(e => e.ProgressPercentage);
            averageScore = enrollments.Where(e => e.FinalGrade.HasValue).Any() 
                ? enrollments.Where(e => e.FinalGrade.HasValue).Average(e => e.FinalGrade!.Value) 
                : 0;
        }

        // Calculate study hours and other metrics (mock calculation)
        totalStudyHours = enrollments.Count * 10; // Mock: 10 hours per enrollment
        totalLessonsCompleted = enrollments.Sum(e => (int)(e.ProgressPercentage / 100 * 20)); // Mock: 20 lessons per course
        totalModulesCompleted = enrollments.Sum(e => (int)(e.ProgressPercentage / 100 * 5)); // Mock: 5 modules per course
        currentStreak = 7; // Mock data
        activeDays = 45; // Mock data
        
        return Task.CompletedTask;
    }

    private void LoadRecentActivities()
    {
        // Mock recent activities
        recentActivities = new List<ActivityModel>
        {
            new() { Type = "lesson", Description = "Completed lesson: Introduction to Programming", CourseTitle = "Programming Basics", Timestamp = DateTime.Now.AddHours(-2) },
            new() { Type = "quiz", Description = "Passed quiz with 85%", CourseTitle = "Data Structures", Timestamp = DateTime.Now.AddHours(-5) },
            new() { Type = "module", Description = "Finished module: Web Development Fundamentals", CourseTitle = "Full Stack Development", Timestamp = DateTime.Now.AddDays(-1) },
            new() { Type = "certificate", Description = "Earned certificate", CourseTitle = "JavaScript Essentials", Timestamp = DateTime.Now.AddDays(-2) },
            new() { Type = "enrollment", Description = "Enrolled in new course", CourseTitle = "Machine Learning Basics", Timestamp = DateTime.Now.AddDays(-3) }
        };
    }

    private void LoadPerformanceMetrics()
    {
        // Mock performance metrics
        performanceMetrics = new List<MetricModel>
        {
            new() { Name = "Completion Rate", Value = overallProgress, Unit = "%", MaxValue = 100, Description = "Average course completion" },
            new() { Name = "Quiz Average", Value = averageScore, Unit = "%", MaxValue = 100, Description = "Average quiz score" },
            new() { Name = "Study Consistency", Value = 85, Unit = "%", MaxValue = 100, Description = "Daily learning consistency" },
            new() { Name = "Engagement Score", Value = 78, Unit = "%", MaxValue = 100, Description = "Course interaction level" }
        };
    }

    private async Task RefreshAnalytics()
    {
        await LoadAnalytics();
    }

    private async Task SelectPeriod(string period)
    {
        selectedPeriod = period;
        await LoadAnalytics();
    }

    private void SelectView(string view)
    {
        selectedView = view;
    }

    private double GetCourseProgress(int enrollmentId)
    {
        var enrollment = enrollments?.FirstOrDefault(e => e.Id == enrollmentId);
        return enrollment?.ProgressPercentage ?? 0;
    }

    private int GetCompletedModules(int enrollmentId)
    {
        var progress = GetCourseProgress(enrollmentId);
        return (int)(progress / 100 * 5); // Mock: 5 modules per course
    }

    private int GetTotalModules(int enrollmentId)
    {
        return 5; // Mock: 5 modules per course
    }

    private ProgressColor GetProgressColor(double progress) => progress switch
    {
        >= 90 => ProgressColor.Success,
        >= 70 => ProgressColor.Info,
        >= 50 => ProgressColor.Warning,
        _ => ProgressColor.Danger
    };

    private string GetProgressBarClass(double progress) => progress switch
    {
        >= 90 => "bg-success",
        >= 70 => "bg-info",
        >= 50 => "bg-warning",
        _ => "bg-danger"
    };

    private string GetActivityColor(string type) => type switch
    {
        "lesson" => "primary",
        "quiz" => "success",
        "module" => "info",
        "certificate" => "warning",
        "enrollment" => "secondary",
        _ => "muted"
    };

    private BadgeColor GetMetricBadgeColor(double value) => value switch
    {
        >= 90 => BadgeColor.Success,
        >= 80 => BadgeColor.Info,
        >= 70 => BadgeColor.Warning,
        _ => BadgeColor.Secondary
    };

    private string GetMetricBadgeClass(double value) => value switch
    {
        >= 90 => "bg-success",
        >= 80 => "bg-info",
        >= 70 => "bg-warning",
        _ => "bg-secondary"
    };

    private string GetMetricProgressClass(double value) => value switch
    {
        >= 90 => "bg-success",
        >= 80 => "bg-info",
        >= 70 => "bg-warning",
        _ => "bg-secondary"
    };

    // FIX: Add the missing method for Progress color in performance metrics
    private ProgressColor GetMetricProgressBarColor(double value) => value switch
    {
        >= 90 => ProgressColor.Success,
        >= 80 => ProgressColor.Info,
        >= 70 => ProgressColor.Warning,
        _ => ProgressColor.Secondary
    };

    private double GetMetricPercentage(double value, double maxValue)
    {
        return maxValue > 0 ? (value / maxValue) * 100 : 0;
    }

    private string GetOverviewNavClass() => $"nav-item {(selectedView == "overview" ? "active" : "")}";
    private string GetProgressNavClass() => $"nav-item {(selectedView == "progress" ? "active" : "")}";
    private string GetPerformanceNavClass() => $"nav-item {(selectedView == "performance" ? "active" : "")}";
    private string GetActivityNavClass() => $"nav-item {(selectedView == "activity" ? "active" : "")}";

    // Helper models for analytics
    public class ActivityModel
    {
        public string Type { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string CourseTitle { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
    }

    public class MetricModel
    {
        public string Name { get; set; } = string.Empty;
        public double Value { get; set; }
        public string Unit { get; set; } = string.Empty;
        public double MaxValue { get; set; }
        public string Description { get; set; } = string.Empty;
    }
}