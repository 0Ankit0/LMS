@using BlazorBootstrap;
@page "/user/lms/certificates"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><Icon Name="IconName.Award" Class="me-2" />My Certificates</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="RefreshCertificates">
            <Icon Name="IconName.ArrowClockwise" /> Refresh
        </Button>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <Spinner />
    </div>
}
else if (certificates?.Any() == true)
{
    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <Card>
                <CardBody>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <Icon Name="IconName.Award" Class="text-primary" Size="IconSize.x3" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5 class="card-title">@certificates.Count()</h5>
                            <p class="card-text">Total Certificates</p>
                        </div>
                    </div>
                </CardBody>
            </Card>
        </div>
        <div class="col-md-3">
            <Card>
                <CardBody>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <Icon Name="IconName.CalendarCheck" Class="text-success" Size="IconSize.x3" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5 class="card-title">@certificates.Count(c => c.IssuedAt >= DateTime.Now.AddDays(-30))</h5>
                            <p class="card-text">This Month</p>
                        </div>
                    </div>
                </CardBody>
            </Card>
        </div>
        <div class="col-md-3">
            <Card>
                <CardBody>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <Icon Name="IconName.CheckCircle" Class="text-info" Size="IconSize.x3" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5 class="card-title">@certificates.Count(c => c.IsValid)</h5>
                            <p class="card-text">Valid</p>
                        </div>
                    </div>
                </CardBody>
            </Card>
        </div>
        <div class="col-md-3">
            <Card>
                <CardBody>
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <Icon Name="IconName.Clock" Class="text-warning" Size="IconSize.x3" />
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5 class="card-title">@certificates.Count(c => c.ExpiresAt.HasValue && c.ExpiresAt.Value <= DateTime.Now.AddDays(30))</h5>
                            <p class="card-text">Expiring Soon</p>
                        </div>
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>

    <!-- Certificates Grid -->
    <div class="row">
        @foreach (var certificate in certificates)
        {
            <div class="col-lg-6 col-xl-4 mb-4">
                <Card>
                    <CardHeader>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <Icon Name="IconName.Award" Class="me-2" />
                                <h6 class="mb-0 d-inline">Certificate</h6>
                            </div>
                            <Badge Color="BadgeColor.Success">
                                <Icon Name="IconName.Check" /> Valid
                            </Badge>
                        </div>
                    </CardHeader>

                    <CardBody>
                        <h5 class="card-title text-primary">@certificate.CourseTitle</h5>

                        <div class="mb-3">
                            <p class="card-text">
                                <strong>Certificate #:</strong> @certificate.CertificateNumber
                            </p>
                            <p class="card-text">
                                <strong>Issued:</strong> @certificate.IssuedAt.ToString("MMMM dd, yyyy")
                            </p>
                            @if (certificate.ExpiresAt.HasValue)
                            {
                                <p class="card-text">
                                    <strong>Expires:</strong> @certificate.ExpiresAt.Value.ToString("MMMM dd, yyyy")
                                </p>
                            }
                            else
                            {
                                <p class="card-text">
                                    <strong>Validity:</strong> <span class="text-success">Lifetime</span>
                                </p>
                            }
                        </div>

                        <!-- Certificate Grade/Score -->
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-1">
                                <span>Final Grade: @certificate.FinalGrade.ToString("F1")%</span>
                                <Badge Color="@GetGradeBadgeColor(certificate.FinalGrade)">
                                    @GetGradeLabel(certificate.FinalGrade)
                                </Badge>
                            </div>
                            <Progress Value="(int)certificate.FinalGrade" Color="@GetGradeProgressColor(certificate.FinalGrade)" />
                        </div>
                    </CardBody>

                    <CardFooter>
                        <div class="d-grid gap-2">
                            <div class="btn-group">
                                <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="() => ViewCertificate(certificate)">
                                    <Icon Name="IconName.Eye" /> View
                                </Button>
                                <Button Color="ButtonColor.Success" Size="ButtonSize.Small" @onclick="() => DownloadCertificate(certificate)">
                                    <Icon Name="IconName.Download" /> Download
                                </Button>
                                <Button Color="ButtonColor.Info" Size="ButtonSize.Small" @onclick="() => ShareCertificate(certificate)">
                                    <Icon Name="IconName.Share" /> Share
                                </Button>
                            </div>
                        </div>
                    </CardFooter>
                </Card>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <Card>
            <CardBody>
                <Icon Name="IconName.Award" Size="IconSize.x3" Class="text-muted mb-3" />
                <h4 class="text-muted">No Certificates Earned</h4>
                <p class="text-muted">Complete courses to earn certificates and showcase your achievements.</p>
                <Button Color="ButtonColor.Primary" To="/user/lms/coursecatalog">
                    <Icon Name="IconName.Book" /> Browse Courses
                </Button>
            </CardBody>
        </Card>
    </div>
}

@code {
    private List<CertificateModel>? certificates;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificates();
    }

    private async Task LoadCertificates()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUserId = authState.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                certificates = await HttpClient.GetFromJsonAsync<List<CertificateModel>>($"/api/certificates/user/{currentUserId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading certificates: {ex.Message}");
            // Fallback to mock data
            certificates = GetMockCertificates();
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<CertificateModel> GetMockCertificates()
    {
        return new List<CertificateModel>
        {
            new()
            {
                Id = 1,
                CourseTitle = "Introduction to Programming",
                CertificateNumber = "CERT-2024-001",
                IssuedAt = DateTime.Now.AddDays(-30),
                FinalGrade = 92.5,
                IsValid = true
            },
            new()
            {
                Id = 2,
                CourseTitle = "Web Development Fundamentals",
                CertificateNumber = "CERT-2024-002",
                IssuedAt = DateTime.Now.AddDays(-60),
                ExpiresAt = DateTime.Now.AddYears(2),
                FinalGrade = 87.0,
                IsValid = true
            },
            new()
            {
                Id = 3,
                CourseTitle = "Database Design",
                CertificateNumber = "CERT-2024-003",
                IssuedAt = DateTime.Now.AddDays(-90),
                FinalGrade = 95.5,
                IsValid = true
            }
        };
    }

    private async Task RefreshCertificates()
    {
        await LoadCertificates();
    }

    private async Task ViewCertificate(CertificateModel certificate)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Viewing certificate: {certificate.CertificateNumber}");
    }

    private async Task DownloadCertificate(CertificateModel certificate)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Downloading certificate: {certificate.CertificateNumber}");
    }

    private async Task ShareCertificate(CertificateModel certificate)
    {
        var shareUrl = $"Certificate: {certificate.CourseTitle} - {certificate.CertificateNumber}";
        await JSRuntime.InvokeVoidAsync("alert", $"Share link copied: {shareUrl}");
    }

    private BadgeColor GetGradeBadgeColor(double grade) => grade switch
    {
        >= 90 => BadgeColor.Success,
        >= 80 => BadgeColor.Info,
        >= 70 => BadgeColor.Warning,
        _ => BadgeColor.Secondary
    };

    private ProgressColor GetGradeProgressColor(double grade) => grade switch
    {
        >= 90 => ProgressColor.Success,
        >= 80 => ProgressColor.Info,
        >= 70 => ProgressColor.Warning,
        _ => ProgressColor.Secondary
    };

    private string GetGradeLabel(double grade) => grade switch
    {
        >= 90 => "Excellent",
        >= 80 => "Good",
        >= 70 => "Satisfactory",
        _ => "Pass"
    };
}