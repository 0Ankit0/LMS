@using BlazorBootstrap;
@page "/user/lms/announcements"
@inject HttpClient HttpClient

<PageTitle>Announcements - LMS</PageTitle>

<div class="simple-announcements-layout">
    <div class="announcements-container">
        <!-- Announcements Content -->
        <div class="announcements-content">
            @if (isLoading)
            {
                <div class="loading-container">
                    <Spinner />
                    <p class="loading-text">Loading announcements...</p>
                </div>
            }
            else if (announcements?.Any() == true)
            {
                <div class="announcements-list">
                    @foreach (var announcement in announcements)
                    {
                        <div class="announcement-item" @onclick="() => ShowAnnouncement(announcement)">
                            <div class="announcement-priority">
                                <i class="@GetPriorityIcon(announcement.Priority) @GetPriorityClass(announcement.Priority)"></i>
                            </div>
                            <div class="announcement-content">
                                <div class="announcement-header">
                                    <h5 class="announcement-title">@announcement.Title</h5>
                                    <div class="announcement-meta">
                                        <span class="announcement-author">
                                            <i class="bi bi-person-circle"></i>
                                            @announcement.AuthorName
                                        </span>
                                        <span class="announcement-date">
                                            <i class="bi bi-calendar"></i>
                                            @FormatDate(announcement.PublishedAt)
                                        </span>
                                    </div>
                                </div>
                                <p class="announcement-excerpt">@GetExcerpt(announcement.Content)</p>
                            </div>
                            <div class="announcement-actions">
                                <Button Color="ButtonColor.Primary" Outline="true" Size="ButtonSize.Small" class="view-btn"
                                    @onclick="() => ShowAnnouncement(announcement)">
                                    <Icon Name="IconName.Eye" />
                                </Button>
                            </div>
                        </div>
                    }
                    <div class="d-flex justify-content-end mt-2">
                        <a href="/user/lms/announcement-list"
                            class="btn btn-link btn-sm text-primary text-decoration-underline p-0"
                            style="font-size: 0.95em;">View All</a>
                    </div>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="bi bi-megaphone"></i>
                    <h5>No announcements available</h5>
                    <p>There are no announcements at this time.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Announcement Detail Modal -->
<Modal @ref="announcementModal" Title="@selectedAnnouncement?.Title">
    <BodyTemplate>
        @if (selectedAnnouncement != null)
        {
            <div class="announcement-detail-meta mb-3">
                <div class="meta-item">
                    <i class="bi bi-person-circle text-primary"></i>
                    <span>@selectedAnnouncement.AuthorName</span>
                </div>
                <div class="meta-item">
                    <i class="bi bi-calendar-event text-primary"></i>
                    <span>@selectedAnnouncement.PublishedAt.ToString("MMM dd, yyyy HH:mm")</span>
                </div>
                <div class="meta-item">
                    <span class="priority-badge @GetPriorityClass(selectedAnnouncement.Priority)">
                        <i class="@GetPriorityIcon(selectedAnnouncement.Priority)"></i>
                        @selectedAnnouncement.Priority Priority
                    </span>
                </div>
            </div>
            <div class="announcement-detail-content">
                @selectedAnnouncement.Content
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseModal">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    // Properties
    private bool isLoading = true;

    // Collections and selected items
    private List<AnnouncementModel> announcements = new();
    private AnnouncementModel? selectedAnnouncement;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;

        try
        {
            // Load announcements from HTTP endpoint
            var response = await HttpClient.GetAsync("api/announcements/latest");
            if (response.IsSuccessStatusCode)
            {
                announcements = await response.Content.ReadFromJsonAsync<List<AnnouncementModel>>() ?? new List<AnnouncementModel>();
            }
        }
        catch (Exception ex)
        {
            // Log error
            Console.WriteLine($"Error loading announcements: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private Modal announcementModal = default!;

    private async Task ShowAnnouncement(AnnouncementModel announcement)
    {
        selectedAnnouncement = announcement;
        await announcementModal.ShowAsync();
    }

    private async Task CloseModal()
    {
        await announcementModal.HideAsync();
        selectedAnnouncement = null;
    }

    private string GetPriorityClass(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "priority-high",
            "medium" => "priority-medium",
            "low" => "priority-low",
            _ => "priority-medium"
        };
    }

    private string GetPriorityIcon(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "bi-exclamation-triangle",
            "medium" => "bi-info-circle",
            "low" => "bi-bell",
            _ => "bi-info-circle"
        };
    }

    private string FormatDate(DateTime date)
    {
        var timeSpan = DateTime.Now - date;

        if (timeSpan.Days > 0)
        {
            return $"{timeSpan.Days} day{(timeSpan.Days > 1 ? "s" : "")} ago";
        }
        else if (timeSpan.Hours > 0)
        {
            return $"{timeSpan.Hours} hour{(timeSpan.Hours > 1 ? "s" : "")} ago";
        }
        else if (timeSpan.Minutes > 0)
        {
            return $"{timeSpan.Minutes} minute{(timeSpan.Minutes > 1 ? "s" : "")} ago";
        }
        else
        {
            return "Just now";
        }
    }

    private string GetExcerpt(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "";

        const int maxLength = 120;
        if (content.Length <= maxLength)
            return content;

        return content.Substring(0, maxLength) + "...";
    }
}
