
@using BlazorBootstrap;
@page "/user/lms/dashboard"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient

<div class="container-fluid py-4" style="background: #f6f7fb; min-height: 100vh;">
    <div class="row g-4 mb-4">
        <!-- Continue with Course -->
        <div class="col-lg-8">
            <Card class="border-0 shadow-sm h-100" style="background: #fff; border-radius: 18px;">
                <CardBody class="d-flex align-items-center" style="padding: 2rem;">
                    <img src="@ContinueCourse.ThumbnailUrl" class="rounded-4 shadow-sm me-4" style="width: 140px; height: 90px; object-fit: cover; background: #e9ecef;" alt="Course image" />
                    <div class="flex-grow-1">
                        <div class="d-flex align-items-center mb-2">
                            <Badge Color="BadgeColor.Primary" class="bg-opacity-10 text-primary fw-semibold me-2" style="font-size: 0.9rem;">Continue Course</Badge>
                        </div>
                        <h4 class="fw-bold mb-1" style="letter-spacing: -0.5px;">@ContinueCourse.Title</h4>
                        <p class="mb-3 text-muted" style="font-size: 1rem;">@ContinueCourse.Description</p>
                        <Button Color="ButtonColor.Primary" class="px-4 py-2 rounded-pill fw-semibold" To="@($"/courses/details?id={ContinueCourse.Id}")" style="font-size: 1rem;">
                            Go to Course <Icon Name="IconName.ArrowRight" class="ms-1" />
                        </Button>
                    </div>
                </CardBody>
            </Card>
        </div>
        <!-- Your Progress -->
        <div class="col-lg-4">
            <Card class="border-0 shadow-sm h-100" style="background: #fff; border-radius: 18px;">
                <CardHeader class="fs-4 text-center fw-bold text-primary mt-2" style="font-size: 1.1rem; width: 100%;">Your Progress</CardHeader>
                <CardBody class="d-flex flex-column align-items-center justify-content-center">
                    <select class="form-select form-select-sm w-full" @onchange="OnProgressCourseChanged" style="border-radius: 12px;">
                        @foreach (var item in ProgressCourses)
                        {
                            <option value="@item.Course.Id" selected="@(item.Course.Id == (SelectedProgressCourse?.Id ?? 0))">
                                @item.Course.Title
                            </option>
                        }
                    </select>
                    <div class="w-100 m-2 d-flex">
                        <div class="position-relative mx-auto" style="width: 110px; height: 110px;">
                            <Progress Circle="true" Value="(int)SelectedProgressCourseProgress" />
                        </div>
                        <div class="justify-content-center">

                            <div class="text-bold text-center mb-2" style="font-size: 1rem; width: 100%;">@(SelectedProgressCourse?.Title ?? "No course selected")</div>
                            <div class="text-muted text-center small mb-2" style="min-height: 38px; width: 100%;">@(SelectedProgressCourse?.Description ?? "")</div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-center">
                        @if (SelectedProgressCourse != null)
                        {
                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" class="rounded-pill fw-semibold" To="@($"/courses/details?id={SelectedProgressCourse.Id}")">
                                Go to Course <Icon Name="IconName.ArrowRight" class="ms-1" />
                            </Button>
                        }
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row g-4 mb-4">
        <!-- New Courses -->
        <div class="col-lg-6">
            <Card class="border-0 shadow-sm h-100" style="background: #fff; border-radius: 18px;">
                <CardBody style="padding: 2rem;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="fw-bold text-primary" style="font-size: 1.1rem;">New Courses</span>
                        <Button Color="ButtonColor.Link" Size="ButtonSize.Small" class="px-0 fw-semibold" To="/courses" style="text-decoration: none;">See All</Button>
                    </div>
                    <div class="row g-3">
                        @foreach (var course in NewCourses)
                        {
                            <div class="col-md-6">
                                <Card class="border-0 shadow-sm h-100" style="border-radius: 14px;">
                                    <img src="@course.ThumbnailUrl" class="card-img-top rounded-top" style="height: 90px; object-fit: cover; background: #e9ecef;" alt="Course image" />
                                    <CardBody class="p-2">
                                        <h6 class="fw-bold mb-1" style="font-size: 1rem;">@course.Title</h6>
                                        <p class="text-muted small mb-2">@course.Description</p>
                                        <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" class="w-100 rounded-pill fw-semibold" To="@($"/courses/details?id={course.Id}")">View</Button>
                                    </CardBody>
                                </Card>
                            </div>
                        }
                    </div>
                </CardBody>
            </Card>
        </div>
        <!-- Your Courses -->
        <div class="col-lg-6">
            <Card class="border-0 shadow-sm h-100" style="background: #fff; border-radius: 18px;">
                <CardBody style="padding: 2rem;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="fw-bold text-primary" style="font-size: 1.1rem;">Your Courses</span>
                        <Button Color="ButtonColor.Link" Size="ButtonSize.Small" class="px-0 fw-semibold" To="/user/courses" style="text-decoration: none;">See All</Button>
                    </div>
                    <div class="row g-3">
                        @foreach (var course in YourCourses)
                        {
                            <div class="col-md-6">
                                <Card class="border-0 shadow-sm h-100" style="border-radius: 14px;">
                                    <img src="@course.ThumbnailUrl" class="card-img-top rounded-top" style="height: 90px; object-fit: cover; background: #e9ecef;" alt="Course image" />
                                    <CardBody class="p-2">
                                        <h6 class="fw-bold mb-1" style="font-size: 1rem;">@course.Title</h6>
                                        <p class="text-muted small mb-2">@course.Description</p>
                                        <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" class="w-100 rounded-pill fw-semibold" To="@($"/courses/details?id={course.Id}")">View</Button>
                                    </CardBody>
                                </Card>
                            </div>
                        }
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row g-4 mb-4">
        <!-- Upcoming Courses -->
        <div class="col-lg-8">
            <Card class="border-0 shadow-sm h-100" style="background: #fff; border-radius: 18px;">
                <CardBody style="padding: 2rem;">
                    <div class="fw-bold text-primary mb-3" style="font-size: 1.1rem;">
                        Upcoming Courses
                    </div>
                    @if (UpcomingCourses.Any())
                    {
                        @foreach (var course in UpcomingCourses)
                        {
                            <div class="d-flex align-items-center mb-3 p-3" style="background: #f6f7fb; border-radius: 12px;">
                                <img src="@course.ThumbnailUrl" class="rounded-3 shadow-sm me-3" style="width: 70px; height: 50px; object-fit: cover; background: #e9ecef;" alt="Course image" />
                                <div class="flex-grow-1">
                                    <h6 class="fw-bold mb-1" style="font-size: 1rem;">@course.Title</h6>
                                    <p class="text-muted small mb-1">@course.Description</p>
                                    <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" class="px-3 rounded-pill fw-semibold" To="@($"/courses/details?id={course.Id}")">Go to Course</Button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No upcoming courses.</p>
                    }
                </CardBody>
            </Card>
        </div>
        <!-- Your Notes -->
        <div class="col-lg-4">
            <Card class="border-0 shadow-sm h-100" style="background: #fff; border-radius: 18px;">
                <CardBody style="padding: 2rem;">
                    <div class="fw-bold text-primary mb-3" style="font-size: 1.1rem;">
                        Your Notes
                    </div>
                    @if (UserNotes.Any())
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var note in UserNotes)
                            {
                                <li class="list-group-item border-0 px-0 py-2" style="background: transparent;">
                                    <div class="fw-bold mb-1" style="font-size: 1rem;">@note.Title</div>
                                    <div class="text-muted small">@note.Content</div>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No notes yet.</p>
                    }
                </CardBody>
            </Card>
        </div>
    </div>
</div>


@code {
    private bool isLoading = true;
    private string? currentUserId;
    
    private CourseModel? continueCourse;
    private List<CourseModel>? newCourses;
    private List<CourseModel>? yourCourses;
    private List<CourseModel>? upcomingCourses;
    private List<(CourseModel Course, double Progress)>? progressCourses;
    
    private int selectedProgressCourseId = 0;
    private CourseModel? SelectedProgressCourse => progressCourses?.FirstOrDefault(c => c.Course.Id == selectedProgressCourseId).Course;
    private double SelectedProgressCourseProgress => progressCourses?.FirstOrDefault(c => c.Course.Id == selectedProgressCourseId).Progress ?? 0;

    private List<UserNoteModel> userNotes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(currentUserId))
                {
                    // Load enrolled courses via HTTP endpoint
                    var enrolledResponse = await HttpClient.GetAsync($"/api/enrollments/user/{currentUserId}/enrollments");
                    if (enrolledResponse.IsSuccessStatusCode)
                    {
                        var enrollments = await enrolledResponse.Content.ReadFromJsonAsync<List<EnrollmentModel>>();
                        yourCourses = enrollments?.Select(e => new CourseModel 
                        { 
                            Id = e.CourseId, 
                            Title = e.CourseTitle, 
                            Description = e.CourseDescription,
                            ThumbnailUrl = e.CourseThumbnailUrl
                        }).ToList();
                        
                        // Set continue course as the first enrolled course for simplicity
                        continueCourse = yourCourses?.FirstOrDefault();
                        
                        // Mock progress data - in real app, this would come from progress endpoint
                        if (yourCourses?.Any() == true)
                        {
                            progressCourses = yourCourses.Select(c => (c, Random.Shared.NextDouble() * 100)).ToList();
                            selectedProgressCourseId = progressCourses.First().Course.Id;
                        }
                    }

                    // Load all courses to find new ones via HTTP endpoint
                    var allCoursesResponse = await HttpClient.GetAsync("/api/courses");
                    if (allCoursesResponse.IsSuccessStatusCode)
                    {
                        var allCourses = await allCoursesResponse.Content.ReadFromJsonAsync<List<CourseModel>>();
                        var enrolledIds = yourCourses?.Select(c => c.Id).ToHashSet() ?? new HashSet<int>();
                        newCourses = allCourses?.Where(c => !enrolledIds.Contains(c.Id)).Take(4).ToList();
                        upcomingCourses = allCourses?.Where(c => !enrolledIds.Contains(c.Id)).Skip(4).Take(2).ToList();
                    }
                    
                    // Mock notes - in real app, this would come from notes endpoint
                    userNotes = new List<UserNoteModel>
                    {
                        new UserNoteModel { Title = "Blazor Tips", Content = "Remember to use @key when rendering lists." },
                        new UserNoteModel { Title = "API Auth", Content = "Use JWT for securing your APIs." }
                    };
                }
            }
        }
        catch (Exception ex)
        {
            // Handle error
            await Console.Out.WriteLineAsync($"Error loading dashboard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnProgressCourseChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            selectedProgressCourseId = id;
        }
    }

    public class UserNoteModel
    {
        public string Title { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
    }

    // Properties for backward compatibility with the UI
    private CourseModel ContinueCourse => continueCourse ?? new CourseModel { Title = "No courses", Description = "Start learning today!" };
    private List<CourseModel> NewCourses => newCourses ?? new();
    private List<CourseModel> YourCourses => yourCourses ?? new();
    private List<CourseModel> UpcomingCourses => upcomingCourses ?? new();
    private List<(CourseModel Course, double Progress)> ProgressCourses => progressCourses ?? new();
    private List<UserNoteModel> UserNotes => userNotes;
}