@page "/user/lms/assessments"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><i class="fas fa-clipboard-check text-success me-2"></i>Assessments & Quizzes</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2" role="group">
            <button type="button" class="btn @(selectedFilter == "all" ? "btn-primary" : "btn-outline-primary") btn-sm"
                @onclick='() => FilterAssessments("all")'>
                All
            </button>
            <button type="button"
                class="btn @(selectedFilter == "available" ? "btn-primary" : "btn-outline-primary") btn-sm"
                @onclick='() => FilterAssessments("available")'>
                Available
            </button>
            <button type="button"
                class="btn @(selectedFilter == "completed" ? "btn-primary" : "btn-outline-primary") btn-sm"
                @onclick='() => FilterAssessments("completed")'>
                Completed
            </button>
            <button type="button"
                class="btn @(selectedFilter == "pending" ? "btn-primary" : "btn-outline-primary") btn-sm"
                @onclick='() => FilterAssessments("pending")'>
                Pending
            </button>
        </div>
        <button class="btn btn-outline-primary btn-sm" @onclick="RefreshAssessments">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading assessments...</span>
        </div>
    </div>
}
else
{
    <!-- Assessment Statistics -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white text-center">
                <div class="card-body">
                    <i class="fas fa-list-alt fa-2x mb-2"></i>
                    <h4>@totalAssessments</h4>
                    <small>Total Assessments</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white text-center">
                <div class="card-body">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h4>@completedAssessments</h4>
                    <small>Completed</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white text-center">
                <div class="card-body">
                    <i class="fas fa-clock fa-2x mb-2"></i>
                    <h4>@pendingAssessments</h4>
                    <small>Pending</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white text-center">
                <div class="card-body">
                    <i class="fas fa-percentage fa-2x mb-2"></i>
                    <h4>@averageScore.ToString("F1")%</h4>
                    <small>Average Score</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" placeholder="Search assessments..." @bind="searchTerm"
                    @oninput="OnSearchTermChanged" />
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @onchange="FilterByCourse">
                <option value="">All Courses</option>
                @if (availableCourses?.Any() == true)
                {
                    @foreach (var course in availableCourses)
                    {
                        <option value="@course.Id">@course.Title</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @onchange="SortAssessments">
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
                <option value="course">By Course</option>
                <option value="difficulty">By Difficulty</option>
                <option value="score">By Score</option>
            </select>
        </div>
    </div>

    <!-- Assessments List -->
    @if (filteredAssessments?.Any() == true)
    {
        <div class="row">
            @foreach (var assessment in filteredAssessments)
            {
                var userAttempt = GetUserAttempt(assessment.Id);
                var isCompleted = userAttempt != null;
                var canRetake = !isCompleted || assessment.AllowRetakes;

                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="card h-100 shadow-sm @(isCompleted ? "border-success" : "")">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <i class="fas @GetAssessmentIcon(assessment.Type) me-2"></i>
                                <span class="fw-bold">@assessment.Type</span>
                            </div>

                            @if (isCompleted)
                            {
                                <span class="badge bg-success">
                                    <i class="fas fa-check"></i> Completed
                                </span>
                            }
                            else if (IsAssessmentAvailable(assessment))
                            {
                                <span class="badge bg-primary">
                                    <i class="fas fa-play"></i> Available
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">
                                    <i class="fas fa-lock"></i> Locked
                                </span>
                            }
                        </div>

                        <div class="card-body">
                            <h5 class="card-title">@assessment.Title</h5>
                            <p class="card-text text-muted">@assessment.Description</p>

                            <div class="mb-3">
                                <div class="row text-center">
                                    <div class="col-4">
                                        <div class="border rounded p-2">
                                            <small class="text-muted d-block">Questions</small>
                                            <strong>@assessment.Questions.Count()</strong>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="border rounded p-2">
                                            <small class="text-muted d-block">Duration</small>
                                            <strong>@assessment.TimeLimit min</strong>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="border rounded p-2">
                                            <small class="text-muted d-block">Pass %</small>
                                            <strong>@assessment.PassingScore%</strong>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (isCompleted && userAttempt != null)
                            {
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>Your Score</span>
                                        <span class="fw-bold @GetScoreClass(userAttempt.Score)">
                                            @userAttempt.Score.ToString("F1")%
                                        </span>
                                    </div>
                                    <div class="progress mb-2" style="height: 8px;">
                                        <div class="progress-bar @GetScoreProgressClass(userAttempt.Score)"
                                            style="width: @userAttempt.Score%"></div>
                                    </div>
                                    <small class="text-muted">
                                        Completed: @userAttempt.CompletedAt?.ToString("MMM dd, yyyy 'at' HH:mm")
                                    </small>
                                </div>
                            }

                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="fas fa-book"></i> @assessment.Course?.Title
                                </small>
                            </div>

                            @if (assessment.Module != null)
                            {
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-folder"></i> @assessment.Module.Title
                                    </small>
                                </div>
                            }
                        </div>

                        <div class="card-footer bg-transparent">
                            @if (IsAssessmentAvailable(assessment))
                            {
                                @if (!isCompleted)
                                {
                                    <button class="btn btn-primary w-100" @onclick="() => StartAssessment(assessment)">
                                        <i class="fas fa-play"></i> Start Assessment
                                    </button>
                                }
                                else if (canRetake)
                                {
                                    <div class="btn-group w-100">
                                        <button class="btn btn-outline-primary" @onclick="() => ViewResults(assessment)">
                                            <i class="fas fa-chart-bar"></i> View Results
                                        </button>
                                        <button class="btn btn-primary" @onclick="() => RetakeAssessment(assessment)">
                                            <i class="fas fa-redo"></i> Retake
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <button class="btn btn-outline-primary w-100" @onclick="() => ViewResults(assessment)">
                                        <i class="fas fa-chart-bar"></i> View Results
                                    </button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-secondary w-100" disabled>
                                    <i class="fas fa-lock"></i> Prerequisites Required
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="card">
                <div class="card-body">
                    @if (string.IsNullOrEmpty(searchTerm) && selectedFilter == "all")
                    {
                        <i class="fas fa-clipboard-check fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No Assessments Available</h4>
                        <p class="text-muted">Enroll in courses to access assessments and quizzes.</p>
                        <a href="/user/lms/coursecatalog" class="btn btn-primary">
                            <i class="fas fa-book"></i> Browse Courses
                        </a>
                    }
                    else
                    {
                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No Assessments Found</h4>
                        <p class="text-muted">Try adjusting your search criteria or filters.</p>
                        <button class="btn btn-outline-primary" @onclick="ClearFilters">
                            <i class="fas fa-times"></i> Clear Filters
                        </button>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    private List<AssessmentModel>? assessments;
    private List<AssessmentModel> filteredAssessments = new();
    private List<CourseModel> availableCourses = new();
    private List<AssessmentAttemptModel> userAttempts = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedFilter = "all";
    private string selectedCourse = string.Empty;
    private string sortBy = "newest";

    // Statistics
    private int totalAssessments = 0;
    private int completedAssessments = 0;
    private int pendingAssessments = 0;
    private double averageScore = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessments();
    }

    private async Task LoadAssessments()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(currentUserId))
                {
                    // Get user enrollments to find available assessments
                    var enrollmentsResponse = await HttpClient.GetAsync($"/api/enrollments/user/{currentUserId}/enrollments");
                    if (enrollmentsResponse.IsSuccessStatusCode)
                    {
                        var enrollments = await enrollmentsResponse.Content.ReadFromJsonAsync<List<EnrollmentModel>>();
                        var courseIds = enrollments?.Select(e => e.CourseId).ToList() ?? new List<int>();
                        // Load assessments for enrolled courses
                        var allAssessments = new List<AssessmentModel>();
                        foreach (var courseId in courseIds)
                        {
                            var assessmentsResponse = await HttpClient.GetAsync($"/api/assessments/course/{courseId}");
                            if (assessmentsResponse.IsSuccessStatusCode)
                            {
                                var courseAssessments = await assessmentsResponse.Content.ReadFromJsonAsync<List<AssessmentModel>>() ?? new
                                List<AssessmentModel>();
                                allAssessments.AddRange(courseAssessments);
                            }
                        }
                        assessments = allAssessments.ToList();
                        // Load available courses for filtering
                        availableCourses = enrollments?
                        .Where(e => !string.IsNullOrEmpty(e.CourseTitle))
                        .Select(e => new CourseModel
                        {
                            Id = e.CourseId,
                            Title = e.CourseTitle,
                            ThumbnailUrl = e.CourseThumbnailUrl
                        })
                        .DistinctBy(c => c.Id)
                        .ToList() ?? new List<CourseModel>();
                    }
                    // Load user attempts (mock data for now)
                    LoadUserAttempts(currentUserId);
                    // Calculate statistics
                    CalculateStatistics();
                    // Apply initial filtering
                    FilterAndSortAssessments();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assessments: {ex.Message}");
            assessments = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadUserAttempts(string userId)
    {
        userAttempts = new List<AssessmentAttemptModel>
        {
            new AssessmentAttemptModel { AssessmentId = 1, UserId = userId, Score = 85, CompletedAt = DateTime.Now.AddDays(-10) },
            new AssessmentAttemptModel { AssessmentId = 2, UserId = userId, Score = 90, CompletedAt = DateTime.Now.AddDays(-5) },
            new AssessmentAttemptModel { AssessmentId = 3, UserId = userId, Score = 75, CompletedAt = DateTime.Now.AddDays(-2) }
        };
    }

    private void CalculateStatistics()
    {
        if (assessments == null) return;

        totalAssessments = assessments.Count;
        completedAssessments = userAttempts.Count;
        pendingAssessments = totalAssessments - completedAssessments;
        averageScore = userAttempts.Any() ? userAttempts.Average(a => a.Score) : 0;
    }

    private async Task RefreshAssessments()
    {
        await LoadAssessments();
    }

    private void FilterAssessments(string filter)
    {
        selectedFilter = filter;
        FilterAndSortAssessments();
    }

    private void FilterByCourse()
    {
        FilterAndSortAssessments();
    }

    private void SortAssessments()
    {
        FilterAndSortAssessments();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterAndSortAssessments();
    }

    private void FilterAndSortAssessments()
    {
        if (assessments == null) return;

        var filtered = assessments.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a =>
            a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            a.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            (a.Course?.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Apply status filter
        filtered = selectedFilter switch
        {
            "available" => filtered.Where(a => IsAssessmentAvailable(a) && GetUserAttempt(a.Id) == null),
            "completed" => filtered.Where(a => GetUserAttempt(a.Id) != null),
            "pending" => filtered.Where(a => IsAssessmentAvailable(a) && GetUserAttempt(a.Id) == null),
            _ => filtered
        };

        // Apply course filter
        if (!string.IsNullOrEmpty(selectedCourse) && int.TryParse(selectedCourse, out var courseId))
        {
            filtered = filtered.Where(a => a.CourseId == courseId);
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "oldest" => filtered.OrderBy(a => a.CreatedAt),
            "course" => filtered.OrderBy(a => a.Course?.Title),
            "difficulty" => filtered.OrderByDescending(a => a.PassingScore),
            "score" => filtered.OrderByDescending(a => GetUserAttempt(a.Id)?.Score ?? 0),
            _ => filtered.OrderByDescending(a => a.CreatedAt)
        };

        filteredAssessments = filtered.ToList();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedFilter = "all";
        selectedCourse = string.Empty;
        FilterAndSortAssessments();
    }

    private AssessmentAttemptModel? GetUserAttempt(int assessmentId)
    {
        return userAttempts.FirstOrDefault(a => a.AssessmentId == assessmentId);
    }

    private bool IsAssessmentAvailable(AssessmentModel assessment)
    {
        // In a real implementation, this would check prerequisites, course progress, etc.
        return true; // Mock: all assessments are available
    }

    private async Task StartAssessment(AssessmentModel assessment)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Starting assessment: {assessment.Title}");
        // In real implementation, navigate to assessment page
    }

    private async Task RetakeAssessment(AssessmentModel assessment)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Retaking assessment: {assessment.Title}");
        // In real implementation, navigate to assessment page
    }

    private async Task ViewResults(AssessmentModel assessment)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Viewing results for: {assessment.Title}");
        // In real implementation, navigate to results page
    }

    private string GetAssessmentIcon(string type) => type.ToLower() switch
    {
        "quiz" => "fa-question-circle",
        "exam" => "fa-graduation-cap",
        "assignment" => "fa-file-alt",
        "project" => "fa-code",
        _ => "fa-clipboard-check"
    };

    private string GetScoreClass(double score) => score switch
    {
        >= 90 => "text-success",
        >= 80 => "text-info",
        >= 70 => "text-warning",
        _ => "text-danger"
    };

    private string GetScoreProgressClass(double score) => score switch
    {
        >= 90 => "bg-success",
        >= 80 => "bg-info",
        >= 70 => "bg-warning",
        _ => "bg-danger"
    };

    // Helper model for user attempts
    public class AssessmentAttemptModel
    {
        public int AssessmentId { get; set; }
        public string UserId { get; set; } = string.Empty;
        public double Score { get; set; }
        public DateTime? CompletedAt { get; set; }
    }
}
