@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="card h-100 d-flex flex-column border-0">
    <div class="card-header bg-info p-0 border-0 rounded-top">
        <div class="input-group input-group-lg">
            <input type="text"
                   class="form-control border-0 rounded-0 bg-light"
                   style="border-radius: .5rem 0 0 0; min-height: 56px;"
                   placeholder="Search courses..."
                   @bind="searchTerm"
                   @oninput="OnSearchChanged" />
            <span class="input-group-text bg-info text-white border-0 rounded-0" style="border-radius: 0 .5rem 0 0;">
                <i class="bi bi-search"></i>
            </span>
        </div>
    </div>
    <div class="card-body border-0 p-0 flex-grow-1 overflow-auto">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center h-100 py-5">
                <div class="spinner-border text-info" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (filteredCourses?.Any() == true)
        {
            <div class="p-2 d-flex flex-column gap-4 border-0">
                @foreach (var course in filteredCourses)
                {
                    <div class="col-12 ">
                        <div class="card border-0 shadow mb-1" style="cursor:pointer;"
                             @onclick="@(() => NavigationManager.NavigateTo($"/user/lms/course/{course.Id}"))">
                            <div class="card-body px-3 d-flex flex-column justify-content-between">
                                <div>
                                    <h6 class="card-title mb-1 text-primary" style="font-size: 1.05rem;">@course.Title</h6>
                                    <div class="mb-1 text-muted"><i class="bi bi-person-circle me-1"></i>@course.InstructorName</div>
                                    <div class="mb-1 text-truncate" style="max-width: 100%;">
                                        <small>
                                            @if (!string.IsNullOrWhiteSpace(course.Description))
                                            {
                                                @((course.Description.Length > 100) ? course.Description.Substring(0, 100) + "..." : course.Description)
                                            }
                                        </small>
                                    </div>
                                </div>
                                <div class="mt-1 d-flex align-items-center">
                                    <span class="badge bg-secondary me-2">@course.Level</span>
                                    @if (course.StartDate != default)
                                    {
                                        <span class="badge bg-light text-dark border">@course.StartDate.ToString("MMM dd, yyyy")</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="card m-3 shadow-sm d-flex align-items-center justify-content-center border-0 bg-white" style="min-height: 140px;">
                <div class="card-body text-center text-muted">
                    <i class="bi bi-emoji-frown fs-2 mb-2"></i>
                    <div>No courses found.</div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public UserModel? User { get; set; }

    private string searchTerm = string.Empty;
    private List<CourseModel>? courses;
    private List<CourseModel>? filteredCourses;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        isLoading = true;
        StateHasChanged();
        courses = await HttpClient.GetFromJsonAsync<List<CourseModel>>("api/courses");
        FilterCourses();
        isLoading = false;
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterCourses();
    }

    private void FilterCourses()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCourses = courses;
        }
        else
        {
            filteredCourses = courses?
                .Where(c =>
                    (!string.IsNullOrEmpty(c.Title) && c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(c.Description) && c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(c.InstructorName) && c.InstructorName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
    }
}