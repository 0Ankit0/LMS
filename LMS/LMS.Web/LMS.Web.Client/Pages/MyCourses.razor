@page "/user/lms/my-courses"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<PageTitle>My Courses - LMS</PageTitle>

<div class="container-fluid">
    <div
        class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2"><i class="fas fa-book-open me-2"></i>My Courses</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <div class="btn-group me-2" role="group">
                <input type="radio" class="btn-check" name="filter" id="all" autocomplete="off" checked
                    @onchange='() => FilterCourses("all")'>>
                <label class="btn btn-outline-primary" for="all">All</label>

                <input type="radio" class="btn-check" name="filter" id="active" autocomplete="off"
                    @onchange='() => FilterCourses("active")'>>
                <label class="btn btn-outline-primary" for="active">Active</label>

                <input type="radio" class="btn-check" name="filter" id="completed" autocomplete="off"
                    @onchange='() => FilterCourses("completed")'>>
                <label class="btn btn-outline-primary" for="completed">Completed</label>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading courses...</span>
            </div>
        </div>
    }
    else if (filteredEnrollments?.Any() == true)
    {
        <div class="row">
            @foreach (var enrollment in filteredEnrollments)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100 shadow-sm">
                        @if (!string.IsNullOrEmpty(enrollment.CourseThumbnailUrl))
                        {
                            <img src="@enrollment.CourseThumbnailUrl" class="card-img-top" style="height: 200px; object-fit: cover;" alt="@enrollment.CourseTitle">
                        }
                        else
                        {
                            <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                <i class="fas fa-book fa-3x text-muted"></i>
                            </div>
                        }

                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@enrollment.CourseTitle</h5>
                            <p class="card-text text-muted small">@enrollment.CourseDescription</p>

                            <!-- Progress Bar -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <small class="text-muted">Progress</small>
                                    <small class="text-muted">@($"{enrollment.ProgressPercentage:F0}%")</small>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar bg-success" role="progressbar"
                                        style="width: @($"{enrollment.ProgressPercentage}%")"
                                        aria-valuenow="@enrollment.ProgressPercentage" aria-valuemin="0" aria-valuemax="100">
                                    </div>
                                </div>
                            </div>

                            <!-- Status Badge -->
                            <div class="mb-3">
                                @if (enrollment.CompletedAt.HasValue)
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-check me-1"></i>Completed
                                    </span>
                                }
                                else if (enrollment.LastAccessedAt.HasValue && enrollment.LastAccessedAt >
                                DateTime.Now.AddDays(-7))
                                {
                                    <span class="badge bg-primary">
                                        <i class="fas fa-play me-1"></i>Active
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-warning">
                                        <i class="fas fa-pause me-1"></i>Paused
                                    </span>
                                }
                            </div>

                            <!-- Course Info -->
                            <div class="mb-3">
                                <small class="text-muted d-block">
                                    <i class="fas fa-calendar me-1"></i>
                                    Enrolled: @enrollment.EnrolledAt.ToString("MMM dd, yyyy")
                                </small>
                                @if (enrollment.LastAccessedAt.HasValue)
                                {
                                    <small class="text-muted d-block">
                                        <i class="fas fa-clock me-1"></i>
                                        Last accessed: @enrollment.LastAccessedAt.Value.ToString("MMM dd, yyyy")
                                    </small>
                                }
                            </div>

                            <!-- Action Buttons -->
                            <div class="mt-auto">
                                @if (enrollment.CompletedAt.HasValue)
                                {
                                    <a href="/course/@enrollment.CourseId" class="btn btn-outline-primary btn-sm me-2">
                                        <i class="fas fa-eye me-1"></i>Review
                                    </a>
                                    <button class="btn btn-success btn-sm"
                                        @onclick="() => DownloadCertificate(enrollment.CourseId)">
                                        <i class="fas fa-download me-1"></i>Certificate
                                    </button>
                                }
                                else
                                {
                                    <a href="/course/@enrollment.CourseId" class="btn btn-primary btn-sm me-2">
                                        <i class="fas fa-play me-1"></i>Continue
                                    </a>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowUnenrollModal(enrollment)">
                                        <i class="fas fa-times me-1"></i>Unenroll
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-book-open fa-4x text-muted mb-3"></i>
            <h4 class="text-muted">No courses found</h4>
            <p class="text-muted">@GetEmptyStateMessage()</p>
            <a href="/courses" class="btn btn-primary">
                <i class="fas fa-search me-1"></i>Browse Courses
            </a>
        </div>
    }
</div>

<!-- Unenroll Confirmation Modal -->
@if (showUnenrollModal && selectedEnrollment != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Unenrollment</h5>
                    <button type="button" class="btn-close" @onclick="HideUnenrollModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to unenroll from <strong>@selectedEnrollment.CourseTitle</strong>?</p>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Your progress will be lost and cannot be recovered.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideUnenrollModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmUnenroll" disabled="@isUnenrolling">
                        @if (isUnenrolling)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Unenroll
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool isLoading = true;
    private bool isUnenrolling = false;
    private bool showUnenrollModal = false;
    private string currentFilter = "all";
    private string? currentUserId;

    private List<EnrollmentModel>? enrollments;
    private List<EnrollmentModel>? filteredEnrollments;
    private EnrollmentModel? selectedEnrollment;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserCourses();
    }

    private async Task LoadUserCourses()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(currentUserId))
                {
                    var response = await HttpClient.GetAsync($"/api/enrollments/user/{currentUserId}/enrollments");
                    if (response.IsSuccessStatusCode)
                    {
                        enrollments = await response.Content.ReadFromJsonAsync<List<EnrollmentModel>>();
                        FilterCourses(currentFilter);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading courses:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterCourses(string filter)
    {
        currentFilter = filter;
        if (enrollments == null) return;

        filteredEnrollments = filter switch
        {
            "active" => enrollments.Where(e => !e.CompletedAt.HasValue).ToList(),
            "completed" => enrollments.Where(e => e.CompletedAt.HasValue).ToList(),
            _ => enrollments.ToList()
        };
    }

    private string GetEmptyStateMessage()
    {
        return currentFilter switch
        {
            "active" => "You don't have any active courses.",
            "completed" => "You haven't completed any courses yet.",
            _ => "You haven't enrolled in any courses yet."
        };
    }

    private void ShowUnenrollModal(EnrollmentModel enrollment)
    {
        selectedEnrollment = enrollment;
        showUnenrollModal = true;
    }

    private void HideUnenrollModal()
    {
        showUnenrollModal = false;
        selectedEnrollment = null;
    }

    private async Task ConfirmUnenroll()
    {
        if (selectedEnrollment == null || currentUserId == null) return;

        try
        {
            isUnenrolling = true;
            var response = await HttpClient.DeleteAsync($"/api/enrollments/user/{currentUserId}/course/{selectedEnrollment.CourseId}");

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Successfully unenrolled from course", "success");
                await LoadUserCourses();
                HideUnenrollModal();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Failed to unenroll from course", "error");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error: {ex.Message}", "error");
        }
        finally
        {
            isUnenrolling = false;
        }
    }

    private async Task DownloadCertificate(int courseId)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Certificate download feature coming soon!", "info");
            // TODO: Implement certificate download via HTTP endpoint
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error: {ex.Message}", "error");
        }
    }
}
