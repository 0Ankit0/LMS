@using BlazorBootstrap;
@using System.Security.Claims;
@page "/user/lms/my-courses"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject ToastService ToastService

<PageTitle>My Courses - LMS</PageTitle>

<div class="container-fluid">
    <div
        class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">
            <Icon Name="IconName.Book" Class="me-2" />My Courses
        </h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <div class="btn-group me-2" role="group">
                <Button Color="ButtonColor.Primary" Outline="@(currentFilter != "all")"
                    @onclick='() => FilterCourses("all")'>All</Button>
                <Button Color="ButtonColor.Primary" Outline="@(currentFilter != "active")"
                    @onclick='() => FilterCourses("active")'>Active</Button>
                <Button Color="ButtonColor.Primary" Outline="@(currentFilter != "completed")"
                    @onclick='() => FilterCourses("completed")'>Completed</Button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center py-5">
            <Spinner />
        </div>
    }
    else if (filteredEnrollments?.Any() == true)
    {
        <div class="row">
            @foreach (var enrollment in filteredEnrollments)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <Card Class="h-100 shadow-sm">
                        @if (!string.IsNullOrEmpty(enrollment.CourseThumbnailUrl))
                        {
                            <img src="@enrollment.CourseThumbnailUrl" class="card-img-top" style="height: 200px; object-fit: cover;"
                                alt="@enrollment.CourseTitle">
                        }
                        else
                        {
                            <div class="card-img-top bg-light d-flex align-items-center justify-content-center"
                                style="height: 200px;">
                                <Icon Name="IconName.Book" Size="IconSize.x3" Class="text-muted" />
                            </div>
                        }

                        <CardBody Class="d-flex flex-column">
                            <CardTitle>@enrollment.CourseTitle</CardTitle>
                            <CardText>@enrollment.CourseDescription</CardText>

                            <!-- Progress Bar -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <small class="text-muted">Progress</small>
                                    <small class="text-muted">@($"{enrollment.ProgressPercentage:F0}%")</small>
                                </div>
                                <Progress Value="(int)enrollment.ProgressPercentage" Color="ProgressColor.Success" />
                            </div>

                            <!-- Status Badge -->
                            <div class="mb-3">
                                @if (enrollment.CompletedAt.HasValue)
                                {
                                    <Badge Color="BadgeColor.Success">
                                        <Icon Name="IconName.Check" Class="me-1" />Completed
                                    </Badge>
                                }
                                else if (enrollment.LastAccessedAt.HasValue && enrollment.LastAccessedAt >
                                DateTime.Now.AddDays(-7))
                                {
                                    <Badge Color="BadgeColor.Primary">
                                        <Icon Name="IconName.Play" Class="me-1" />Active
                                    </Badge>
                                }
                                else
                                {
                                    <Badge Color="BadgeColor.Warning">
                                        <Icon Name="IconName.Pause" Class="me-1" />Paused
                                    </Badge>
                                }
                            </div>

                            <!-- Course Info -->
                            <div class="mb-3">
                                <small class="text-muted d-block">
                                    <Icon Name="IconName.Calendar" Class="me-1" />
                                    Enrolled: @enrollment.EnrolledAt.ToString("MMM dd, yyyy")
                                </small>
                                @if (enrollment.LastAccessedAt.HasValue)
                                {
                                    <small class="text-muted d-block">
                                        <Icon Name="IconName.Clock" Class="me-1" />
                                        Last accessed: @enrollment.LastAccessedAt.Value.ToString("MMM dd, yyyy")
                                    </small>
                                }
                            </div>

                            <!-- Action Buttons -->
                            <div class="mt-auto">
                                @if (IsAdmin)
                                {
                                    <Button Color="ButtonColor.Info" Size="ButtonSize.Small"
                                        To="@($"/admin/courses/manage/{enrollment.CourseId}")" Class="me-2">
                                        <Icon Name="IconName.Gear" Class="me-1" />Manage
                                    </Button>
                                }
                                @if (enrollment.CompletedAt.HasValue)
                                {
                                    <Button Color="ButtonColor.Primary" Outline="true" Size="ButtonSize.Small"
                                        To="@($"/course/{enrollment.CourseId}")" Class="me-2">
                                        <Icon Name="IconName.Eye" Class="me-1" />Review
                                    </Button>
                                    <Button Color="ButtonColor.Success" Size="ButtonSize.Small"
                                        @onclick="() => DownloadCertificate(enrollment.CourseId)">
                                        <Icon Name="IconName.Download" Class="me-1" />Certificate
                                    </Button>
                                }
                                else
                                {
                                    <Button Color="ButtonColor.Primary" Size="ButtonSize.Small"
                                        To="@($"/course/{enrollment.CourseId}")" Class="me-2">
                                        <Icon Name="IconName.Play" Class="me-1" />Continue
                                    </Button>
                                    <Button Color="ButtonColor.Danger" Outline="true" Size="ButtonSize.Small"
                                        @onclick="() => ShowUnenrollModal(enrollment)">
                                        <Icon Name="IconName.X" Class="me-1" />Unenroll
                                    </Button>
                                }
                            </div>
                        </CardBody>
                    </Card>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <Icon Name="IconName.Book" Size="IconSize.x4" Class="text-muted mb-3" />
            <h4 class="text-muted">No courses found</h4>
            <p class="text-muted">@GetEmptyStateMessage()</p>
            <Button Color="ButtonColor.Primary" To="/courses">
                <Icon Name="IconName.Search" Class="me-1" />Browse Courses
            </Button>
        </div>
    }
</div>



<!-- Unenroll Confirmation Modal -->
<Modal @ref="unenrollModal" Title="Confirm Unenrollment">
    <BodyTemplate>
        @if (selectedEnrollment != null)
        {
            <p>Are you sure you want to unenroll from <strong>@selectedEnrollment.CourseTitle</strong>?</p>
            <Alert Color="AlertColor.Warning">
                <Icon Name="IconName.ExclamationTriangle" Class="me-2" />
                Your progress will be lost and cannot be recovered.
            </Alert>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideUnenrollModal">Cancel</Button>
        <Button Color="ButtonColor.Danger" @onclick="ConfirmUnenroll">
            Unenroll
        </Button>
    </FooterTemplate>
</Modal>

@code {
    private bool isLoading = true;
    private string currentFilter = "all";
    private string? currentUserId;

    private List<EnrollmentModel>? enrollments;
    private List<EnrollmentModel>? filteredEnrollments;
    private EnrollmentModel? selectedEnrollment;
    private Modal unenrollModal = default!;
    private bool IsAdmin = false; // Placeholder for admin role check

    protected override async Task OnInitializedAsync()
    {
        await LoadUserCourses();
    }

    private async Task LoadUserCourses()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                IsAdmin = authState.User.IsInRole("Admin"); // Check if the user is in the 'Admin' role
                currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(currentUserId))
                {
                    var response = await HttpClient.GetAsync($"/api/enrollments/user/{currentUserId}/enrollments");
                    if (response.IsSuccessStatusCode)
                    {
                        enrollments = await response.Content.ReadFromJsonAsync<List<EnrollmentModel>>();
                        FilterCourses(currentFilter);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error loading courses: {ex.Message}"));
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterCourses(string filter)
    {
        currentFilter = filter;
        if (enrollments == null) return;

        filteredEnrollments = filter switch
        {
            "active" => enrollments.Where(e => !e.CompletedAt.HasValue).ToList(),
            "completed" => enrollments.Where(e => e.CompletedAt.HasValue).ToList(),
            _ => enrollments.ToList()
        };
    }

    private string GetEmptyStateMessage()
    {
        return currentFilter switch
        {
            "active" => "You don't have any active courses.",
            "completed" => "You haven't completed any courses yet.",
            _ => "You haven't enrolled in any courses yet."
        };
    }

    private async Task ShowUnenrollModal(EnrollmentModel enrollment)
    {
        selectedEnrollment = enrollment;
        await unenrollModal.ShowAsync();
    }

    private async Task HideUnenrollModal()
    {
        await unenrollModal.HideAsync();
        selectedEnrollment = null;
    }

    private async Task ConfirmUnenroll()
    {
        if (selectedEnrollment == null || currentUserId == null) return;

        try
        {
            var response = await
            HttpClient.DeleteAsync($"/api/enrollments/user/{currentUserId}/course/{selectedEnrollment.CourseId}");

            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new ToastMessage(ToastType.Success, "Successfully unenrolled from course"));
                await LoadUserCourses();
                await HideUnenrollModal();
            }
            else
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, "Failed to unenroll from course"));
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error: {ex.Message}"));
        }
    }

    private void DownloadCertificate(int courseId)
    {
        ToastService.Notify(new ToastMessage(ToastType.Info, "Certificate download functionality will be implemented soon"));
    }

    // Enrollment Model
    public class EnrollmentModel
    {
        public int Id { get; set; }
        public int CourseId { get; set; }
        public string CourseTitle { get; set; } = string.Empty;
        public string CourseDescription { get; set; } = string.Empty;
        public string? CourseThumbnailUrl { get; set; }
        public double ProgressPercentage { get; set; }
        public DateTime EnrolledAt { get; set; }
        public DateTime? LastAccessedAt { get; set; }
        public DateTime? CompletedAt { get; set; }
    }
}
