@page "/home"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorBootstrap

<PageTitle>Home</PageTitle>

<div class="container-fluid px-0">
    <div class="row g-0 g-3">
        <!-- Left: Navigation Cards -->
        <div class="col-12 col-md-2 mb-4 mb-md-0 d-flex flex-column">
            <Card Class="shadow-sm mb-3">
                <CardBody Class="d-flex align-items-center" @onclick="@(() => NavigateToServer("/admin"))"
                    style="cursor:pointer;">
                    <Icon Name="IconName.Speedometer2" Class="me-2 fs-4 text-primary" />
                    <span>Admin</span>
                </CardBody>
            </Card>
            <Card Class="shadow-sm mb-3">
                <CardBody Class="d-flex align-items-center" @onclick="@(() => NavigateToServer("/reports"))"
                    style="cursor:pointer;">
                    <Icon Name="IconName.Speedometer2" Class="me-2 fs-4 text-primary" />
                    <span>Reports</span>
                </CardBody>
            </Card>
            <Card Class="shadow-sm mb-3">
                <CardBody Class="d-flex align-items-center" @onclick="@(() => NavigateTo("/user/lms/dashboard"))"
                    style="cursor:pointer;">
                    <Icon Name="IconName.Speedometer2" Class="me-2 fs-4 text-primary" />
                    <span>Dashboard</span>
                </CardBody>
            </Card>
            <Card Class="shadow-sm mb-3">
                <CardBody Class="d-flex align-items-center" @onclick="@(() => NavigateTo("/user/lms/forums"))"
                    style="cursor:pointer;">
                    <Icon Name="IconName.JournalBookmark" Class="me-2 fs-4 text-success" />
                    <span>Forums</span>
                </CardBody>
            </Card>
            <Card Class="shadow-sm mb-3">
                <CardBody Class="d-flex align-items-center" @onclick="@(() => NavigateTo("/user/lms/analytics"))"
                    style="cursor:pointer;">
                    <Icon Name="IconName.PersonCircle" Class="me-2 fs-4 text-info" />
                    <span>Analytics</span>
                </CardBody>
            </Card>
            <Card Class="shadow-sm mb-3">
                <CardBody Class="d-flex align-items-center" @onclick="@(() => NavigateTo("/user/lms/my-courses"))"
                    style="cursor:pointer;">
                    <Icon Name="IconName.Trophy" Class="me-2 fs-4 text-warning" />
                    <span>My Courses</span>
                </CardBody>
            </Card>
        </div>

        <!-- Middle: Announcements -->
        <div class="col-12 col-md-6 mb-4 mb-md-0 d-flex flex-column">
            <Card Class="border-0 mb-4 flex-grow-1 d-flex flex-column">
                <CardHeader Class="bg-primary bg-opacity-50 text-white">
                    <div class="d-flex justify-content-between align-items-center w-100">
                        <span>
                            <Icon Name="IconName.Megaphone" /> Announcements
                        </span>
                        <a href="/user/lms/announcement-list"
                            class="btn btn-link btn-sm text-white text-decoration-underline p-0"
                            style="font-size: 0.95em;">View All</a>
                    </div>
                </CardHeader>
                <CardBody Class="p-0 flex-grow-1 d-flex flex-column hide-scrollbar"
                    style="max-height: 80svh; overflow-y: auto;">
                    <Announcements />
                </CardBody>
            </Card>
        </div>
        <!-- Right: Course List Search -->
        <div class="col-12 col-md-4 mb-4 mb-md-0 d-flex flex-column">
            <CourseListSearch User="currentUser" />
        </div>
    </div>
</div>

<style>
    .hide-scrollbar {
        scrollbar-width: none;
        /* Firefox */
        -ms-overflow-style: none;
        /* IE and Edge */
    }

    .hide-scrollbar::-webkit-scrollbar {
        display: none;
        /* Chrome, Safari, Opera */
    }
</style>

@code {
    private UserModel? currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            currentUser = new UserModel
            {
                UserName = user.Identity.Name,
                Email = user.FindFirst(c => c.Type == "email")?.Value,
                Id = user.FindFirst(c => c.Type == "sub" || c.Type == "userid")?.Value,
            };
        }
        else
        {
            currentUser = null;
        }
    }

    private void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    private void NavigateToServer(string url)
    {
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
}
