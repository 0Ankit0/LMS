@using BlazorBootstrap;
@page "/user/lms/leaderboard"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><Icon Name="IconName.Trophy" Class="me-2" />Leaderboard</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2" role="group">
            <Button Color="ButtonColor.Primary" Outline="@(selectedPeriod != "all")" Size="ButtonSize.Small" @onclick='() => SelectPeriod("all")'>
                All Time
            </Button>
            <Button Color="ButtonColor.Primary" Outline="@(selectedPeriod != "month")" Size="ButtonSize.Small" @onclick='() => SelectPeriod("month")'>
                This Month
            </Button>
            <Button Color="ButtonColor.Primary" Outline="@(selectedPeriod != "week")" Size="ButtonSize.Small" @onclick='() => SelectPeriod("week")'>
                This Week
            </Button>
        </div>
        <Button Color="ButtonColor.Primary" Outline="true" Size="ButtonSize.Small" @onclick="RefreshLeaderboard">
            <Icon Name="IconName.ArrowClockwise" /> Refresh
        </Button>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <Spinner />
    </div>
}
else
{
    <!-- Current User Stats -->
    @if (currentUserRank != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <Card>
                    <CardBody>
                        <div class="row align-items-center">
                            <div class="col-md-3 text-center">
                                <div class="position-relative d-inline-block">
                                    <img src="@GetAvatarUrl(currentUserRank.UserId)"
                                         alt="@currentUserRank.UserName"
                                         class="rounded-circle border border-3 border-white"
                                         style="width: 80px; height: 80px; object-fit: cover;" />
                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-warning text-dark">
                                        #@currentUserRank.Rank
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-9">
                                <h4 class="mb-2">Your Ranking</h4>
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h5 class="mb-1">@currentUserRank.Rank</h5>
                                            <small>Rank</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h5 class="mb-1">@currentUserRank.Score</h5>
                                            <small>Points</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h5 class="mb-1">@currentUserRank.CompletedCourses</h5>
                                            <small>Courses</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h5 class="mb-1">@currentUserRank.Achievements</h5>
                                            <small>Achievements</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </CardBody>
                </Card>
            </div>
        </div>
    }

    <!-- Top 3 Podium -->
    @if (topRanks?.Count >= 3)
    {
        <div class="row mb-4">
            <div class="col-12">
                <Card>
                    <CardBody>
                        <h5 class="card-title text-center mb-4">
                            <Icon Name="IconName.Award" Class="text-warning" /> Top Performers
                        </h5>
                        <div class="row justify-content-center">
                            <!-- 2nd Place -->
                            <div class="col-md-3 text-center order-md-1">
                                <div class="position-relative mb-3">
                                    <img src="@GetAvatarUrl(topRanks[1].UserId)"
                                         alt="@topRanks[1].UserName"
                                         class="rounded-circle border border-3 border-secondary"
                                         style="width: 80px; height: 80px; object-fit: cover;" />
                                    <div class="position-absolute top-0 start-100 translate-middle">
                                        <Icon Name="IconName.AwardFill" Class="text-secondary" Size="IconSize.x2" />
                                        <span class="position-absolute top-50 start-50 translate-middle text-white fw-bold">2</span>
                                    </div>
                                </div>
                                <h6 class="fw-bold">@topRanks[1].UserName</h6>
                                <p class="text-secondary mb-1">@topRanks[1].Score pts</p>
                                <small class="text-muted">@topRanks[1].CompletedCourses courses</small>
                            </div>

                            <!-- 1st Place -->
                            <div class="col-md-3 text-center order-md-2">
                                <div class="position-relative mb-3">
                                    <img src="@GetAvatarUrl(topRanks[0].UserId)"
                                         alt="@topRanks[0].UserName"
                                         class="rounded-circle border border-3 border-warning"
                                         style="width: 100px; height: 100px; object-fit: cover;" />
                                    <div class="position-absolute top-0 start-100 translate-middle">
                                        <Icon Name="IconName.TrophyFill" Class="text-warning" Size="IconSize.x3" />
                                        <span class="position-absolute top-50 start-50 translate-middle text-white fw-bold">1</span>
                                    </div>
                                </div>
                                <h5 class="fw-bold text-warning">@topRanks[0].UserName</h5>
                                <p class="text-warning mb-1 fs-5">@topRanks[0].Score pts</p>
                                <small class="text-muted">@topRanks[0].CompletedCourses courses</small>
                            </div>

                            <!-- 3rd Place -->
                            <div class="col-md-3 text-center order-md-3">
                                <div class="position-relative mb-3">
                                    <img src="@GetAvatarUrl(topRanks[2].UserId)"
                                         alt="@topRanks[2].UserName"
                                         class="rounded-circle border border-3 border-danger"
                                         style="width: 80px; height: 80px; object-fit: cover;" />
                                    <div class="position-absolute top-0 start-100 translate-middle">
                                        <Icon Name="IconName.AwardFill" Class="text-danger" Size="IconSize.x2" />
                                        <span class="position-absolute top-50 start-50 translate-middle text-white fw-bold">3</span>
                                    </div>
                                </div>
                                <h6 class="fw-bold">@topRanks[2].UserName</h6>
                                <p class="text-danger mb-1">@topRanks[2].Score pts</p>
                                <small class="text-muted">@topRanks[2].CompletedCourses courses</small>
                            </div>
                        </div>
                    </CardBody>
                </Card>
            </div>
        </div>
    }

    <!-- Full Leaderboard Table -->
    @if (leaderboard?.Any() == true)
    {
        <div class="row">
            <div class="col-12">
                <Card>
                    <CardHeader>
                        <h5 class="mb-0">
                            <Icon Name="IconName.ListOl" /> Full Rankings
                        </h5>
                        <div class="d-flex gap-2">
                            <div class="input-group input-group-sm" style="width: 200px;">
                                <span class="input-group-text"><Icon Name="IconName.Search" /></span>
                                <InputText class="form-control" placeholder="Search users..."
                                           @bind-value="searchTerm" @oninput="OnSearchTermChanged" />
                            </div>
                        </div>
                    </CardHeader>
                    <CardBody>
                        <Grid TItem="LeaderboardEntryModel" Data="filteredLeaderboard" class="table table-hover">
                            <GridColumns>
                                <GridColumn TItem="LeaderboardEntryModel" HeaderText="Rank">
                                    <div class="d-flex align-items-center">
                                        @if (context.Rank <= 3)
                                        {
                                            <Icon Name="IconName.AwardFill" Class="@(GetRankColor(context.Rank) + " me-2")" />
                                        }
                                        <span class="fw-bold">@context.Rank</span>
                                        @if (context.UserId == currentUserId)
                                        {
                                            <Badge Color="BadgeColor.Primary" class="ms-2">You</Badge>
                                        }
                                    </div>
                                </GridColumn>
                                <GridColumn TItem="LeaderboardEntryModel" HeaderText="User">
                                    <div class="d-flex align-items-center">
                                        <img src="@GetAvatarUrl(context.UserId)"
                                             alt="@context.UserName"
                                             class="rounded-circle me-3"
                                             style="width: 40px; height: 40px; object-fit: cover;" />
                                        <div>
                                            <div class="fw-bold">@context.UserName</div>
                                            <small class="text-muted">@context.UserName</small>
                                        </div>
                                    </div>
                                </GridColumn>
                                <GridColumn TItem="LeaderboardEntryModel" HeaderText="Points" class="text-center">
                                    <Badge Color="BadgeColor.Primary" class="fs-6">@context.Score</Badge>
                                </GridColumn>
                                <GridColumn TItem="LeaderboardEntryModel" HeaderText="Courses" class="text-center">
                                    <Badge Color="BadgeColor.Success">@context.CompletedCourses</Badge>
                                </GridColumn>
                                <GridColumn TItem="LeaderboardEntryModel" HeaderText="Achievements" class="text-center">
                                    <Badge Color="BadgeColor.Warning">@context.Achievements</Badge>
                                </GridColumn>
                                <GridColumn TItem="LeaderboardEntryModel" HeaderText="Avg. Score" class="text-center">
                                    <Badge Color="@GetScoreBadgeColor(context.AverageScore)">
                                        @context.AverageScore.ToString("F1")%
                                    </Badge>
                                </GridColumn>
                                <GridColumn TItem="LeaderboardEntryModel" HeaderText="Streak" class="text-center">
                                    @if (context.CurrentStreak > 0)
                                    {
                                        <Badge Color="BadgeColor.Info">
                                            <Icon Name="IconName.Fire" /> @context.CurrentStreak
                                        </Badge>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </GridColumn>
                            </GridColumns>
                        </Grid>

                        @if (filteredLeaderboard.Count == 0 && !string.IsNullOrEmpty(searchTerm))
                        {
                            <div class="text-center py-4">
                                <p class="text-muted">No users found matching "@searchTerm"</p>
                            </div>
                        }
                    </CardBody>
                </Card>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <Card>
                <CardBody>
                    <Icon Name="IconName.Trophy" Size="IconSize.x3" Class="text-muted mb-3" />
                    <h4 class="text-muted">No Leaderboard Data</h4>
                    <p class="text-muted">Complete courses and earn points to appear on the leaderboard.</p>
                    <Button Color="ButtonColor.Primary" To="/user/lms/coursecatalog">
                        <Icon Name="IconName.Book" /> Start Learning
                    </Button>
                </CardBody>
            </Card>
        </div>
    }
}

@code {
    private List<LeaderboardEntryModel>? leaderboard;
    private List<LeaderboardEntryModel> filteredLeaderboard = new();
    private List<LeaderboardEntryModel>? topRanks;
    private LeaderboardEntryModel? currentUserRank;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedPeriod = "all";
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }

        await LoadLeaderboard();
    }

    private async Task LoadLeaderboard()
    {
        try
        {
            isLoading = true;

            // Load leaderboard data based on selected period via HTTP endpoints
            var endpoint = selectedPeriod switch
            {
                "week" => "/api/leaderboards/weekly",
                "month" => "/api/leaderboards/monthly",
                _ => "/api/leaderboards/overall"
            };

            var response = await HttpClient.GetAsync(endpoint);
            if (response.IsSuccessStatusCode)
            {
                leaderboard = await response.Content.ReadFromJsonAsync<List<LeaderboardEntryModel>>() ?? new List<LeaderboardEntryModel>();
            }

            topRanks = leaderboard?.Take(3).ToList() ?? new List<LeaderboardEntryModel>();
            currentUserRank = leaderboard?.FirstOrDefault(l => l.UserId == currentUserId);

            FilterLeaderboard();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading leaderboard: {ex.Message}");
            leaderboard = new List<LeaderboardEntryModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshLeaderboard()
    {
        await LoadLeaderboard();
    }

    private async Task SelectPeriod(string period)
    {
        selectedPeriod = period;
        await LoadLeaderboard();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterLeaderboard();
    }

    private void FilterLeaderboard()
    {
        if (leaderboard == null) return;

        var filtered = leaderboard.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(l =>
                l.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        filteredLeaderboard = filtered.ToList();
    }

    private string GetAvatarUrl(string userId)
    {
        // In a real implementation, this would return the actual user avatar URL
        return $"https://ui-avatars.com/api/?name={Uri.EscapeDataString(userId)}&background=007bff&color=fff&size=100";
    }

    private string GetRankColor(int rank) => rank switch
    {
        1 => "text-warning", // Gold
        2 => "text-secondary", // Silver
        3 => "text-danger", // Bronze
        _ => "text-muted"
    };

    private BadgeColor GetScoreBadgeColor(double score) => score switch
    {
        >= 90 => BadgeColor.Success,
        >= 80 => BadgeColor.Info,
        >= 70 => BadgeColor.Warning,
        _ => BadgeColor.Secondary
    };
}