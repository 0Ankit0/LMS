
@using BlazorBootstrap;
@page "/user/lms/achievements"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2"><Icon Name="IconName.Trophy" Class="me-2" />Achievements</h1>
        <Tabs>
            <Tab Title="Earned">
                <Content>
                    <div class="row">
                        @if (earnedAchievements?.Any() == true)
                        {
                            @foreach (var achievement in earnedAchievements)
                            {
                                <div class="col-md-6 col-lg-4 mb-4">
                                    <Card Class="h-100 border-success">
                                        <CardBody Class="text-center">
                                            <div class="achievement-icon mb-3" style="background-color: @achievement.BadgeColor">
                                                @if (!string.IsNullOrEmpty(achievement.AchievementIconUrl))
                                                {
                                                    <img src="@achievement.AchievementIconUrl" alt="@achievement.AchievementName" class="img-fluid">
                                                }
                                                else
                                                {
                                                    <Icon Name="IconName.Trophy" Size="IconSize.x2" TextColor="TextColor.White" />
                                                }
                                            </div>
                                            <h5 class="card-title">@achievement.AchievementName</h5>
                                            <p class="card-text text-muted">@achievement.AchievementDescription</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <Badge Color="BadgeColor.Success">@achievement.Points pts</Badge>
                                                <small class="text-muted">Earned @achievement.EarnedAt ?? @achievement.EarnedAt.ToString("MMM dd, yyyy") : "Not found"</small>
                                            </div>
                                        </CardBody>
                                    </Card>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12">
                                <div class="text-center py-5">
                                    <Icon Name="IconName.Award" Size="IconSize.x4" Class="text-muted mb-3" />
                                    <h4 class="text-muted">No achievements earned yet</h4>
                                    <p class="text-muted">Complete courses and activities to earn your first achievement!</p>
                                </div>
                            </div>
                        }
                    </div>
                </Content>
            </Tab>
            <Tab Title="Available">
                <Content>
                    <div class="row">
                        @if (availableAchievements?.Any() == true)
                        {
                            @foreach (var achievement in availableAchievements)
                            {
                                <div class="col-md-6 col-lg-4 mb-4">
                                    <Card Class="h-100">
                                        <CardBody Class="text-center">
                                            <div class="achievement-icon mb-3 opacity-50" style="background-color: @achievement.BadgeColor">
                                                @if (!string.IsNullOrEmpty(achievement.IconUrl))
                                                {
                                                    <img src="@achievement.IconUrl" alt="@achievement.Name" class="img-fluid">
                                                }
                                                else
                                                {
                                                    <Icon Name="IconName.Trophy" Size="IconSize.x2" TextColor="TextColor.White" />
                                                }
                                            </div>
                                            <h5 class="card-title">@achievement.Name</h5>
                                            <p class="card-text text-muted">@achievement.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <Badge Color="BadgeColor.Primary">@achievement.Points pts</Badge>
                                                <small class="text-muted">@achievement.Type</small>
                                            </div>
                                            @if (achievement.Criteria.Count > 0)
                                            {
                                                foreach (var criterion in achievement.Criteria)
                                                {
                                                    <div class="mt-2">
                                                        <small class="text-info">
                                                            <Icon Name="IconName.CheckCircle" Class="me-1" />@criterion
                                                        </small>
                                                    </div>
                                                }
                                            }
                                        </CardBody>
                                    </Card>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12">
                                <div class="text-center py-5">
                                    <div class="text-center py-5">
                                        <Icon Name="IconName.Bullseye" Size="IconSize.x4" Class="text-muted mb-3" />
                                        <h4 class="text-muted">No available achievements</h4>
                                        <p class="text-muted">All achievements have been earned! Great job!</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </Content>
            </Tab>
            <Tab Title="Leaderboard">
                <Content>
                    <Card>
                        <CardHeader>
                            <h5 class="mb-0"><Icon Name="IconName.BarChartLine" Class="me-2" />Achievement Leaderboard</h5>
                        </CardHeader>
                        <CardBody>
                            @if (leaderboardEntries?.Any() == true)
                            {
                                <div class="table-responsive">
                                    <Grid TItem="LeaderboardEntryModel" Data="leaderboardEntries" AllowPaging="false" AllowSorting="false">
                                        <GridColumns>
                                            <GridColumn TItem="LeaderboardEntryModel" HeaderText="Rank" Field="@(nameof(LeaderboardEntryModel.Rank))" Sortable="true">
                                                <ChildContent>
                                                    <span class="fw-bold">#@context.Rank</span>
                                                    @if (context.Rank <= 3)
                                                    {
                                                        <Icon Name="IconName.Award" Class="@GetRankIconClass(context.Rank)" />
                                                    }
                                                </ChildContent>
                                            </GridColumn>
                                            <GridColumn TItem="LeaderboardEntryModel" HeaderText="User" Field="@(nameof(LeaderboardEntryModel.UserName))" Sortable="true">
                                                <ChildContent>
                                                    <div class="d-flex align-items-center">
                                                        @if (!string.IsNullOrEmpty(context.ProfilePictureUrl))
                                                        {
                                                            <img src="@context.ProfilePictureUrl" alt="@context.UserName" class="rounded-circle me-2" style="width: 32px; height: 32px;">
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 32px; height: 32px;">
                                                                <Icon Name="IconName.Person" TextColor="TextColor.White" />
                                                            </div>
                                                        }
                                                        <span>@context.UserName</span>
                                                        @if (context.UserId == currentUserId)
                                                        {
                                                            <Badge Color="BadgeColor.Primary" Class="ms-2">You</Badge>
                                                        }
                                                    </div>
                                                </ChildContent>
                                            </GridColumn>
                                            <GridColumn TItem="LeaderboardEntryModel" HeaderText="Total Points" Field="@(nameof(LeaderboardEntryModel.TotalPoints))" Sortable="true" />
                                            <GridColumn TItem="LeaderboardEntryModel" HeaderText="Achievements" Field="@(nameof(LeaderboardEntryModel.AchievementCount))" Sortable="true" />
                                            <GridColumn TItem="LeaderboardEntryModel" HeaderText="Latest Achievement" Field="@(nameof(LeaderboardEntryModel.LastUpdated))" Sortable="true">
                                                <ChildContent>
                                                    @context.LastUpdated.ToString("MMM dd, yyyy")
                                                </ChildContent>
                                            </GridColumn>
                                        </GridColumns>
                                    </Grid>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <Icon Name="IconName.BarChartLine" Size="IconSize.x4" Class="text-muted mb-3" />
                                    <h4 class="text-muted">No leaderboard data available</h4>
                                    <p class="text-muted">Start earning achievements to appear on the leaderboard!</p>
                                </div>
                            }
                        </CardBody>
                    </Card>
                </Content>
            </Tab>
        </Tabs>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center py-5">
            <Spinner Color="SpinnerColor.Primary" />
            <span class="ms-2">Loading achievements...</span>
        </div>
    }
    else
    {
        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-3 mb-3">
                <Card Background="Background.Primary" TextColor="TextColor.White">
                    <CardBody Class="text-center">
                        <Icon Name="IconName.Trophy" Size="IconSize.x2" Class="mb-2" />
                        <h4>@earnedCount</h4>
                        <p class="mb-0">Earned</p>
                    </CardBody>
                </Card>
            </div>
            <div class="col-md-3 mb-3">
                <Card Background="Background.Success" TextColor="TextColor.White">
                    <CardBody Class="text-center">
                        <Icon Name="IconName.Star" Size="IconSize.x2" Class="mb-2" />
                        <h4>@totalPoints</h4>
                        <p class="mb-0">Total Points</p>
                    </CardBody>
                </Card>
            </div>
            <div class="col-md-3 mb-3">
                <Card Background="Background.Info" TextColor="TextColor.White">
                    <CardBody Class="text-center">
                        <Icon Name="IconName.Bullseye" Size="IconSize.x2" Class="mb-2" />
                        <h4>@availableCount</h4>
                        <p class="mb-0">Available</p>
                    </CardBody>
                </Card>
            </div>
            <div class="col-md-3 mb-3">
                <Card Background="Background.Warning" TextColor="TextColor.White">
                    <CardBody Class="text-center">
                        <Icon Name="IconName.BarChartLine" Size="IconSize.x2" Class="mb-2" />
                        <h4>#@userRank</h4>
                        <p class="mb-0">Rank</p>
                    </CardBody>
                </Card>
            </div>
        </div>

        @if (currentTab == "earned")
        {
            <div class="row">
                @if (earnedAchievements?.Any() == true)
                {
                    @foreach (var achievement in earnedAchievements)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <Card Class="h-100 border-success">
                                <CardBody Class="text-center">
                                    <div class="achievement-icon mb-3" style="background-color: @achievement.BadgeColor">
                                        @if (!string.IsNullOrEmpty(achievement.AchievementIconUrl))
                                        {
                                            <img src="@achievement.AchievementIconUrl" alt="@achievement.AchievementName" class="img-fluid">
                                        }
                                        else
                                        {
                                            <Icon Name="IconName.Trophy" Size="IconSize.x2" TextColor="TextColor.White" />
                                        }
                                    </div>
                                    <h5 class="card-title">@achievement.AchievementName</h5>
                                    <p class="card-text text-muted">@achievement.AchievementDescription</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <Badge Color="BadgeColor.Success">@achievement.Points pts</Badge>
                                        <small class="text-muted">Earned @achievement.EarnedAt ?? @achievement.EarnedAt.ToString("MMM dd, yyyy") : "Not found"</small>
                                    </div>
                                </CardBody>
                            </Card>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <div class="text-center py-5">
                            <Icon Name="IconName.Award" Size="IconSize.x4" Class="text-muted mb-3" />
                            <h4 class="text-muted">No achievements earned yet</h4>
                            <p class="text-muted">Complete courses and activities to earn your first achievement!</p>
                        </div>
                    </div>
                }
            </div>
        }
        else if (currentTab == "available")
        {
            <div class="row">
                @if (availableAchievements?.Any() == true)
                {
                    @foreach (var achievement in availableAchievements)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <Card Class="h-100">
                                <CardBody Class="text-center">
                                    <div class="achievement-icon mb-3 opacity-50" style="background-color: @achievement.BadgeColor">
                                        @if (!string.IsNullOrEmpty(achievement.IconUrl))
                                        {
                                            <img src="@achievement.IconUrl" alt="@achievement.Name" class="img-fluid">
                                        }
                                        else
                                        {
                                            <Icon Name="IconName.Trophy" Size="IconSize.x2" TextColor="TextColor.White" />
                                        }
                                    </div>
                                    <h5 class="card-title">@achievement.Name</h5>
                                    <p class="card-text text-muted">@achievement.Description</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <Badge Color="BadgeColor.Primary">@achievement.Points pts</Badge>
                                        <small class="text-muted">@achievement.Type</small>
                                    </div>
                                    @if (achievement.Criteria.Count > 0)
                                    {
                                        foreach (var criterion in achievement.Criteria)
                                        {
                                            <div class="mt-2">
                                                <small class="text-info">
                                                    <Icon Name="IconName.CheckCircle" Class="me-1" />@criterion
                                                </small>
                                            </div>
                                        }
                                    }
                                </CardBody>
                            </Card>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <div class="text-center py-5">
                            <div class="text-center py-5">
                                <Icon Name="IconName.Bullseye" Size="IconSize.x4" Class="text-muted mb-3" />
                                <h4 class="text-muted">No available achievements</h4>
                                <p class="text-muted">All achievements have been earned! Great job!</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (currentTab == "leaderboard")
        {
            <Card>
                <CardHeader>
                    <h5 class="mb-0"><Icon Name="IconName.BarChartLine" Class="me-2" />Achievement Leaderboard</h5>
                </CardHeader>
                <CardBody>
                    @if (leaderboardEntries?.Any() == true)
                    {
                        <div class="table-responsive">
                            <Grid TItem="LeaderboardEntryModel" Data="leaderboardEntries" AllowPaging="false" AllowSorting="false">
                                <GridColumns>
                                    <GridColumn TItem="LeaderboardEntryModel" HeaderText="Rank" Field="@(nameof(LeaderboardEntryModel.Rank))" Sortable="true">
                                        <ChildContent>
                                            <span class="fw-bold">#@context.Rank</span>
                                            @if (context.Rank <= 3)
                                            {
                                                <Icon Name="IconName.Award" Class="@GetRankIconClass(context.Rank)" />
                                            }
                                        </ChildContent>
                                    </GridColumn>
                                    <GridColumn TItem="LeaderboardEntryModel" HeaderText="User" Field="@(nameof(LeaderboardEntryModel.UserName))" Sortable="true">
                                        <ChildContent>
                                            <div class="d-flex align-items-center">
                                                @if (!string.IsNullOrEmpty(context.ProfilePictureUrl))
                                                {
                                                    <img src="@context.ProfilePictureUrl" alt="@context.UserName" class="rounded-circle me-2" style="width: 32px; height: 32px;">
                                                }
                                                else
                                                {
                                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 32px; height: 32px;">
                                                        <Icon Name="IconName.Person" TextColor="TextColor.White" />
                                                    </div>
                                                }
                                                <span>@context.UserName</span>
                                                @if (context.UserId == currentUserId)
                                                {
                                                    <Badge Color="BadgeColor.Primary" Class="ms-2">You</Badge>
                                                }
                                            </div>
                                        </ChildContent>
                                    </GridColumn>
                                    <GridColumn TItem="LeaderboardEntryModel" HeaderText="Total Points" Field="@(nameof(LeaderboardEntryModel.TotalPoints))" Sortable="true" />
                                    <GridColumn TItem="LeaderboardEntryModel" HeaderText="Achievements" Field="@(nameof(LeaderboardEntryModel.AchievementCount))" Sortable="true" />
                                    <GridColumn TItem="LeaderboardEntryModel" HeaderText="Latest Achievement" Field="@(nameof(LeaderboardEntryModel.LastUpdated))" Sortable="true">
                                        <ChildContent>
                                            @context.LastUpdated.ToString("MMM dd, yyyy")
                                        </ChildContent>
                                    </GridColumn>
                                </GridColumns>
                            </Grid>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <Icon Name="IconName.BarChartLine" Size="IconSize.x4" Class="text-muted mb-3" />
                            <h4 class="text-muted">No leaderboard data available</h4>
                            <p class="text-muted">Start earning achievements to appear on the leaderboard!</p>
                        </div>
                    }
                </CardBody>
            </Card>
        }
    }
</div>


@code {
    private bool isLoading = true;
    private string currentTab = "earned";
    private string? currentUserId;
    
    private List<UserAchievementModel>? earnedAchievements;
    private List<AchievementModel>? availableAchievements;
    private List<LeaderboardEntryModel>? leaderboardEntries;
    
    private int earnedCount = 0;
    private int availableCount = 0;
    private int totalPoints = 0;
    private int userRank = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadAchievementData();
    }

    private async Task LoadAchievementData()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(currentUserId))
                {
                    // Load user achievements via HTTP endpoint
                    var earnedResponse = await HttpClient.GetAsync($"/api/achievements/user/{currentUserId}");
                    if (earnedResponse.IsSuccessStatusCode)
                    {
                        earnedAchievements = await earnedResponse.Content.ReadFromJsonAsync<List<UserAchievementModel>>();
                        earnedCount = earnedAchievements?.Count ?? 0;
                        totalPoints = earnedAchievements?.Sum(a => a.Points) ?? 0;
                    }
                    
                    // Load all achievements to find available ones
                    var allResponse = await HttpClient.GetAsync("/api/achievements/all");
                    if (allResponse.IsSuccessStatusCode)
                    {
                        var allAchievements = await allResponse.Content.ReadFromJsonAsync<List<AchievementModel>>();
                        var earnedIds = earnedAchievements?.Select(a => a.AchievementId).ToHashSet() ?? new HashSet<int>();
                        availableAchievements = allAchievements?.Where(a => !earnedIds.Contains(a.Id)).ToList();
                        availableCount = availableAchievements?.Count ?? 0;
                    }
                    
                    // Load leaderboard data via HTTP endpoint
                    var leaderboardResponse = await HttpClient.GetAsync("/api/leaderboards/overall");
                    if (leaderboardResponse.IsSuccessStatusCode)
                    {
                        leaderboardEntries = await leaderboardResponse.Content.ReadFromJsonAsync<List<LeaderboardEntryModel>>();
                    }
                    
                    // Find user rank via HTTP endpoint
                    var rankResponse = await HttpClient.GetAsync($"/api/leaderboards/user/{currentUserId}/rank");
                    if (rankResponse.IsSuccessStatusCode)
                    {
                        var rankResult = await rankResponse.Content.ReadFromJsonAsync<int>();
                        userRank = rankResult;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading achievements:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    

    private string GetRankIconClass(int rank)
    {
        return rank switch
        {
            1 => "text-warning ms-1",
            2 => "text-secondary ms-1", 
            3 => "text-danger ms-1",
            _ => "ms-1"
        };
    }
}

<style>
    .achievement-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .achievement-icon img {
        width: 50px;
        height: 50px;
    }

    .card.border-success {
        border-width: 2px !important;
    }

    .table-primary {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }
</style>
