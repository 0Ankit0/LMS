@using BlazorBootstrap;
@page "/user/lms/settings"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject ToastService ToastService

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><Icon Name="IconName.Gear" Class="me-2" />Settings</h1>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <Spinner />
    </div>
}
else
{
    <div class="row">
        <!-- Settings Navigation -->
        <div class="col-md-3">
            <div class="list-group list-group-flush">
                <Button class="@(activeTab == "profile" ? "list-group-item list-group-item-action active" : "list-group-item list-group-item-action")"
                        @onclick='() => SetActiveTab("profile")'>
                    <Icon Name="IconName.Person" Class="me-2" /> Profile
                </Button>
                <Button class="@(activeTab == "preferences" ? "list-group-item list-group-item-action active" : "list-group-item list-group-item-action")"
                        @onclick='() => SetActiveTab("preferences")'>
                    <Icon Name="IconName.Sliders" Class="me-2" /> Learning Preferences
                </Button>
                <Button class="@(activeTab == "notifications" ? "list-group-item list-group-item-action active" : "list-group-item list-group-item-action")"
                        @onclick='() => SetActiveTab("notifications")'>
                    <Icon Name="IconName.Bell" Class="me-2" /> Notifications
                </Button>
                <Button class="@(activeTab == "privacy" ? "list-group-item list-group-item-action active" : "list-group-item list-group-item-action")"
                        @onclick='() => SetActiveTab("privacy")'>
                    <Icon Name="IconName.ShieldCheck" Class="me-2" /> Privacy & Security
                </Button>
                <Button class="@(activeTab == "account" ? "list-group-item list-group-item-action active" : "list-group-item list-group-item-action")"
                        @onclick='() => SetActiveTab("account")'>
                    <Icon Name="IconName.PersonGear" Class="me-2" /> Account Settings
                </Button>
            </div>
        </div>

        <!-- Settings Content -->
        <div class="col-md-9">
            @if (activeTab == "profile")
            {
                <Card>
                    <CardHeader>
                        <h5 class="mb-0"><Icon Name="IconName.Person" Class="me-2" />Profile Information</h5>
                    </CardHeader>
                    <CardBody>
                        <EditForm Model="@profileModel" OnValidSubmit="SaveProfile">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">First Name</label>
                                        <InputText @bind-Value="profileModel.FirstName" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Last Name</label>
                                        <InputText @bind-Value="profileModel.LastName" class="form-control" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <InputText @bind-Value="profileModel.Email" class="form-control" readonly />
                                <small class="text-muted">Email cannot be changed from this page.</small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Bio</label>
                                <InputTextArea @bind-Value="profileModel.Bio" class="form-control" rows="3"
                                               placeholder="Tell us about yourself..."></InputTextArea>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Phone Number</label>
                                        <InputText @bind-Value="profileModel.PhoneNumber" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Date of Birth</label>
                                        <InputDate @bind-Value="profileModel.DateOfBirth" class="form-control" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Country</label>
                                        <select @bind="profileModel.Country" class="form-select">
                                            <option value="">Select Country</option>
                                            <option value="US">United States</option>
                                            <option value="CA">Canada</option>
                                            <option value="UK">United Kingdom</option>
                                            <option value="AU">Australia</option>
                                            <option value="DE">Germany</option>
                                            <option value="FR">France</option>
                                            <option value="JP">Japan</option>
                                            <option value="IN">India</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Time Zone</label>
                                        <select @bind="profileModel.TimeZone" class="form-select">
                                            <option value="">Select Time Zone</option>
                                            <option value="UTC-8">Pacific Time (UTC-8)</option>
                                            <option value="UTC-7">Mountain Time (UTC-7)</option>
                                            <option value="UTC-6">Central Time (UTC-6)</option>
                                            <option value="UTC-5">Eastern Time (UTC-5)</option>
                                            <option value="UTC+0">GMT (UTC+0)</option>
                                            <option value="UTC+1">Central European Time (UTC+1)</option>
                                            <option value="UTC+9">Japan Standard Time (UTC+9)</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">
                                <Icon Name="IconName.Save" /> Save Profile
                            </Button>
                        </EditForm>
                    </CardBody>
                </Card>
            }
            else if (activeTab == "preferences")
            {
                <Card>
                    <CardHeader>
                        <h5 class="mb-0"><Icon Name="IconName.Sliders" Class="me-2" />Learning Preferences</h5>
                    </CardHeader>
                    <CardBody>
                        <EditForm Model="@preferencesModel" OnValidSubmit="SavePreferences">
                            <div class="mb-4">
                                <h6>Course Display</h6>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="courseView" id="grid-view"
                                           @onchange='() => preferencesModel.CourseDisplayMode = "grid"'
                                           checked="@(preferencesModel.CourseDisplayMode == "grid")" />
                                    <label class="form-check-label" for="grid-view">
                                        Grid View
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="courseView" id="list-view"
                                           @onchange='() => preferencesModel.CourseDisplayMode = "list"'
                                           checked="@(preferencesModel.CourseDisplayMode == "list")" />
                                    <label class="form-check-label" for="list-view">
                                        List View
                                    </label>
                                </div>
                            </div>

                            <div class="mb-4">
                                <h6>Default Language</h6>
                                <select @bind="preferencesModel.PreferredLanguage" class="form-select">
                                    <option value="en">English</option>
                                    <option value="es">Spanish</option>
                                    <option value="fr">French</option>
                                    <option value="de">German</option>
                                    <option value="ja">Japanese</option>
                                    <option value="zh">Chinese</option>
                                </select>
                            </div>

                            <div class="mb-4">
                                <h6>Learning Reminders</h6>
                                <Switch @bind="preferencesModel.DailyReminders" Label="Send daily learning reminders" />
                                <Switch @bind="preferencesModel.DeadlineReminders" Label="Remind me of upcoming deadlines" />
                            </div>

                            <div class="mb-4">
                                <h6>Accessibility</h6>
                                <Switch @bind="preferencesModel.HighContrastMode" Label="High contrast mode" />
                                <Switch @bind="preferencesModel.LargeTextMode" Label="Large text mode" />
                            </div>

                            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">
                                <Icon Name="IconName.Save" /> Save Preferences
                            </Button>
                        </EditForm>
                    </CardBody>
                </Card>
            }
            else if (activeTab == "notifications")
            {
                <Card>
                    <CardHeader>
                        <h5 class="mb-0"><Icon Name="IconName.Bell" Class="me-2" />Notification Settings</h5>
                    </CardHeader>
                    <CardBody>
                        <EditForm Model="@notificationModel" OnValidSubmit="SaveNotifications">
                            <div class="mb-4">
                                <h6>Email Notifications</h6>
                                <Switch @bind="notificationModel.CourseUpdates" Label="Course updates and announcements" />
                                <Switch @bind="notificationModel.AssignmentReminders" Label="Assignment and quiz reminders" />
                                <Switch @bind="notificationModel.ProgressReports" Label="Weekly progress reports" />
                                <Switch @bind="notificationModel.AchievementNotifications" Label="Achievement and certificate notifications" />
                            </div>

                            <div class="mb-4">
                                <h6>Push Notifications</h6>
                                <Switch @bind="notificationModel.BrowserNotifications" Label="Browser notifications" />
                                <Switch @bind="notificationModel.MobileNotifications" Label="Mobile app notifications" />
                            </div>

                            <div class="mb-4">
                                <h6>Notification Frequency</h6>
                                <select @bind="notificationModel.EmailFrequency" class="form-select">
                                    <option value="immediate">Immediate</option>
                                    <option value="daily">Daily digest</option>
                                    <option value="weekly">Weekly digest</option>
                                    <option value="never">Never</option>
                                </select>
                            </div>

                            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">
                                <Icon Name="IconName.Save" /> Save Notification Settings
                            </Button>
                        </EditForm>
                    </CardBody>
                </Card>
            }
            else if (activeTab == "privacy")
            {
                <Card>
                    <CardHeader>
                        <h5 class="mb-0"><Icon Name="IconName.ShieldCheck" Class="me-2" />Privacy & Security</h5>
                    </CardHeader>
                    <CardBody>
                        <EditForm Model="@privacyModel" OnValidSubmit="SavePrivacy">
                            <div class="mb-4">
                                <h6>Profile Visibility</h6>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="profileVisibility" id="public-profile"
                                           @onchange='() => privacyModel.ProfileVisibility = "public"'
                                           checked="@(privacyModel.ProfileVisibility == "public")" />
                                    <label class="form-check-label" for="public-profile">
                                        Public - Anyone can see my profile
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="profileVisibility" id="students-only"
                                           @onchange='() => privacyModel.ProfileVisibility = "students"'
                                           checked="@(privacyModel.ProfileVisibility == "students")" />
                                    <label class="form-check-label" for="students-only">
                                        Students only - Only other students can see my profile
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="profileVisibility" id="private-profile"
                                           @onchange='() => privacyModel.ProfileVisibility = "private"'
                                           checked="@(privacyModel.ProfileVisibility == "private")" />
                                    <label class="form-check-label" for="private-profile">
                                        Private - Only I can see my profile
                                    </label>
                                </div>
                            </div>

                            <div class="mb-4">
                                <h6>Data Sharing</h6>
                                <Switch @bind="privacyModel.ShareProgress" Label="Share my progress with instructors" />
                                <Switch @bind="privacyModel.AllowAnalytics" Label="Allow analytics data collection for course improvement" />
                                <Switch @bind-value="privacyModel.MarketingCommunications" Label="Receive marketing communications and course recommendations" />
                            </div>

                            <div class="mb-4">
                                <h6>Two-Factor Authentication</h6>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>Status: </strong>
                                        <Badge Color="@(privacyModel.TwoFactorEnabled? BadgeColor.Success: BadgeColor.Warning)">
                                            @(privacyModel.TwoFactorEnabled ? "Enabled" : "Disabled")
                                        </Badge>
                                    </div>
                                    <Button Color="@(privacyModel.TwoFactorEnabled? ButtonColor.Danger: ButtonColor.Primary)" Size="ButtonSize.Small"
                                            @onclick="ToggleTwoFactor">
                                        @(privacyModel.TwoFactorEnabled ? "Disable" : "Enable") 2FA
                                    </Button>
                                </div>
                                <small class="text-muted">
                                    Two-factor authentication adds an extra layer of security to your account.
                                </small>
                            </div>

                            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">
                                <Icon Name="IconName.Save" /> Save Privacy Settings
                            </Button>
                        </EditForm>
                    </CardBody>
                </Card>
            }
            else if (activeTab == "account")
            {
                <Card>
                    <CardHeader>
                        <h5 class="mb-0"><Icon Name="IconName.PersonGear" Class="me-2" />Account Settings</h5>
                    </CardHeader>
                    <CardBody>
                        <div class="mb-4">
                            <h6>Change Password</h6>
                            <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword">
                                <div class="mb-3">
                                    <label class="form-label">Current Password</label>
                                    <InputText @bind-value="passwordModel.CurrentPassword" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">New Password</label>
                                    <InputText @bind-value="passwordModel.NewPassword" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Confirm New Password</label>
                                    <InputText @bind-value="passwordModel.ConfirmPassword" class="form-control" />
                                </div>
                                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">
                                    <Icon Name="IconName.Key" /> Change Password
                                </Button>
                            </EditForm>
                        </div>

                        <hr />

                        <div class="mb-4">
                            <h6>Export Data</h6>
                            <p class="text-muted">Download a copy of your learning data and progress.</p>
                            <Button Color="ButtonColor.Secondary" Outline="true" @onclick="ExportData">
                                <Icon Name="IconName.Download" /> Export My Data
                            </Button>
                        </div>

                        <hr />

                        <div class="mb-4">
                            <h6 class="text-danger">Danger Zone</h6>
                            <p class="text-muted">Permanently delete your account and all associated data.</p>
                            <Button Color="ButtonColor.Danger" Outline="true" @onclick="ConfirmDeleteAccount">
                                <Icon Name="IconName.Trash" /> Delete Account
                            </Button>
                        </div>
                    </CardBody>
                </Card>
            }
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private string activeTab = "profile";

    private UserProfileModel profileModel = new();
    private PreferencesModel preferencesModel = new();
    private NotificationModel notificationModel = new();
    private PrivacyModel privacyModel = new();
    private PasswordChangeModel passwordModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUserSettings();
    }

    private async Task LoadUserSettings()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUserId = authState.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                var user = await HttpClient.GetFromJsonAsync<UserModel>($"/api/users/{currentUserId}");

                if (user != null)
                {
                    // Load profile data
                    profileModel.FirstName = user.FirstName ?? string.Empty;
                    profileModel.LastName = user.LastName ?? string.Empty;
                    profileModel.Email = user.Email ?? string.Empty;
                    profileModel.Bio = user.Bio ?? string.Empty;

                    // Load other settings (mock data for now)
                    LoadDefaultSettings();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user settings: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadDefaultSettings()
    {
        // Load default preferences
        preferencesModel.CourseDisplayMode = "grid";
        preferencesModel.PreferredLanguage = "en";
        preferencesModel.DailyReminders = true;
        preferencesModel.DeadlineReminders = true;

        // Load default notifications
        notificationModel.CourseUpdates = true;
        notificationModel.AssignmentReminders = true;
        notificationModel.ProgressReports = false;
        notificationModel.AchievementNotifications = true;
        notificationModel.EmailFrequency = "daily";

        // Load default privacy settings
        privacyModel.ProfileVisibility = "students";
        privacyModel.ShareProgress = true;
        privacyModel.AllowAnalytics = true;
        privacyModel.TwoFactorEnabled = false;
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private void SaveProfile()
    {
        try
        {
            // In real implementation, save to database via UserService
            ToastService.Notify(new ToastMessage(ToastType.Success, "Profile saved successfully!"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error saving profile: {ex.Message}"));
        }
    }

    private void SavePreferences()
    {
        try
        {
            // In real implementation, save to database
            ToastService.Notify(new ToastMessage(ToastType.Success, "Preferences saved successfully!"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error saving preferences: {ex.Message}"));
        }
    }

    private void SaveNotifications()
    {
        try
        {
            // In real implementation, save to database
            ToastService.Notify(new ToastMessage(ToastType.Success, "Notification settings saved successfully!"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error saving notification settings: {ex.Message}"));
        }
    }

    private void SavePrivacy()
    {
        try
        {
            // In real implementation, save to database
            ToastService.Notify(new ToastMessage(ToastType.Success, "Privacy settings saved successfully!"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error saving privacy settings: {ex.Message}"));
        }
    }

    private void ChangePassword()
    {
        try
        {
            if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
            {
                ToastService.Notify(new ToastMessage(ToastType.Warning, "New passwords do not match!"));
                return;
            }

            // In real implementation, change password via UserManager
            ToastService.Notify(new ToastMessage(ToastType.Success, "Password changed successfully!"));
            passwordModel = new PasswordChangeModel();
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error changing password: {ex.Message}"));
        }
    }

    private void ToggleTwoFactor()
    {
        try
        {
            privacyModel.TwoFactorEnabled = !privacyModel.TwoFactorEnabled;
            var status = privacyModel.TwoFactorEnabled ? "enabled" : "disabled";
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Two-factor authentication {status}!"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error toggling 2FA: {ex.Message}"));
        }
    }

    private void ExportData()
    {
        ToastService.Notify(new ToastMessage(ToastType.Info, "Data export initiated. You will receive an email when ready."));
    }

    private void ConfirmDeleteAccount()
    {
        // For now, we'll use a simple toast notification approach
        // In a real implementation, you would implement proper confirmation dialog
        ToastService.Notify(new ToastMessage(ToastType.Warning, "Account deletion functionality requires additional confirmation. Please contact support."));
    }

    // Settings Models
    public class UserProfileModel
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Bio { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public DateTime? DateOfBirth { get; set; }
        public string Country { get; set; } = string.Empty;
        public string TimeZone { get; set; } = string.Empty;
    }

    public class PreferencesModel
    {
        public string CourseDisplayMode { get; set; } = "grid";
        public string PreferredLanguage { get; set; } = "en";
        public bool DailyReminders { get; set; } = true;
        public bool DeadlineReminders { get; set; } = true;
        public bool HighContrastMode { get; set; } = false;
        public bool LargeTextMode { get; set; } = false;
    }

    public class NotificationModel
    {
        public bool CourseUpdates { get; set; } = true;
        public bool AssignmentReminders { get; set; } = true;
        public bool ProgressReports { get; set; } = false;
        public bool AchievementNotifications { get; set; } = true;
        public bool BrowserNotifications { get; set; } = false;
        public bool MobileNotifications { get; set; } = false;
        public string EmailFrequency { get; set; } = "daily";
    }

    public class PrivacyModel
    {
        public string ProfileVisibility { get; set; } = "students";
        public bool ShareProgress { get; set; } = true;
        public bool AllowAnalytics { get; set; } = true;
        public bool MarketingCommunications { get; set; } = false;
        public bool TwoFactorEnabled { get; set; } = false;
    }

    public class PasswordChangeModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}