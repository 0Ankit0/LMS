@using MudBlazor;
@page "/user/lms/settings"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject ToastService ToastService
@using LMS.Web.Client.Services

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-2" />Settings</h1>
</div>

@if (isLoading)
{
    <div class="row">
        <!-- Settings Navigation Skeleton -->
        <div class="col-md-3">
            @for (int i = 0; i < 5; i++)
            {
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="40px" Class="mb-2" />
            }
        </div>

        <!-- Settings Content Skeleton -->
        <div class="col-md-9">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="500px" />
        </div>
    </div>
}
else
{
    <div class="row">
        <!-- Settings Navigation -->
        <div class="col-md-3">
            <MudList T="string" Clickable="true">
                <MudListItem T="string" OnClick='() => SetActiveTab("profile")' Class="@(activeTab == "profile" ? "mud-selected" : "")">
                    <MudIcon Icon="@Icons.Material.Filled.Person" Class="me-2" /> Profile
                </MudListItem>
                <MudListItem T="string" OnClick='() => SetActiveTab("preferences")' Class="@(activeTab == "preferences" ? "mud-selected" : "")">
                    <MudIcon Icon="@Icons.Material.Filled.Tune" Class="me-2" /> Learning Preferences
                </MudListItem>
                <MudListItem T="string" OnClick='() => SetActiveTab("notifications")' Class="@(activeTab == "notifications" ? "mud-selected" : "")">
                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="me-2" /> Notifications
                </MudListItem>
                <MudListItem T="string" OnClick='() => SetActiveTab("privacy")' Class="@(activeTab == "privacy" ? "mud-selected" : "")">
                    <MudIcon Icon="@Icons.Material.Filled.Security" Class="me-2" /> Privacy & Security
                </MudListItem>
                <MudListItem T="string" OnClick='() => SetActiveTab("account")' Class="@(activeTab == "account" ? "mud-selected" : "")">
                    <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="me-2" /> Account Settings
                </MudListItem>
            </MudList>
        </div>

        <!-- Settings Content -->
        <div class="col-md-9">
            @if (activeTab == "profile")
            {
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Person" Class="me-2" />Profile Information</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm Model="@profileModel" OnValidSubmit="SaveProfile">
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="profileModel.FirstName" Label="First Name" Variant="Variant.Text" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="profileModel.LastName" Label="Last Name" Variant="Variant.Text" />
                                </MudItem>
                            </MudGrid>

                            <MudTextField @bind-Value="profileModel.Email" Label="Email" Variant="Variant.Text" ReadOnly="true" HelperText="Email cannot be changed from this page." />

                            <MudTextField @bind-Value="profileModel.Bio" Label="Bio" Variant="Variant.Text" Lines="3"
                                          Placeholder="Tell us about yourself..." />

                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="profileModel.PhoneNumber" Label="Phone Number" Variant="Variant.Text" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudDatePicker @bind-Date="@profileModel.DateOfBirth" Label="Date of Birth" Variant="Variant.Text" />
                                </MudItem>
                            </MudGrid>

                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudAutocomplete T="string" Label="Country" Variant="Variant.Text"
                                                     @bind-Value="profileModel.Country"
                                                     SearchFunc="@SearchCountries"
                                                     Clearable="true"
                                                     Placeholder="Select Country" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudAutocomplete T="string" Label="Time Zone" Variant="Variant.Text"
                                                     @bind-Value="profileModel.TimeZone"
                                                     SearchFunc="@SearchTimeZones"
                                                     Clearable="true"
                                                     Placeholder="Select Time Zone" />
                                </MudItem>
                            </MudGrid>

                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Material.Filled.Save" Class="me-2" /> Save Profile
                            </MudButton>
                        </MudForm>
                    </MudCardContent>
                </MudCard>
            }
            else if (activeTab == "preferences")
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Tune" Class="me-2" />Learning Preferences</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm Model="@preferencesModel" OnValidSubmit="SavePreferences">
                            <MudText Typo="Typo.h6" GutterBottom="true">Course Display</MudText>
                            <MudRadioGroup @bind-Value="preferencesModel.CourseDisplayMode">
                                <MudRadio Value="@("grid")" Color="Color.Primary">Grid View</MudRadio>
                                <MudRadio Value="@("list")" Color="Color.Primary">List View</MudRadio>
                            </MudRadioGroup>

                            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Default Language</MudText>
                            <MudSelect @bind-Value="preferencesModel.PreferredLanguage" Label="Select Language" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("en")">English</MudSelectItem>
                                <MudSelectItem Value="@("es")">Spanish</MudSelectItem>
                                <MudSelectItem Value="@("fr")">French</MudSelectItem>
                                <MudSelectItem Value="@("de")">German</MudSelectItem>
                                <MudSelectItem Value="@("ja")">Japanese</MudSelectItem>
                                <MudSelectItem Value="@("zh")">Chinese</MudSelectItem>
                            </MudSelect>

                            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Learning Reminders</MudText>
                            <MudSwitch T="bool" @bind-Checked="preferencesModel.DailyReminders" Color="Color.Primary" Label="Send daily learning reminders" />
                            <MudSwitch T="bool" @bind-Checked="preferencesModel.DeadlineReminders" Color="Color.Primary" Label="Remind me of upcoming deadlines" />

                            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Accessibility</MudText>
                            <MudSwitch T="bool" @bind-Checked="preferencesModel.HighContrastMode" Color="Color.Primary" Label="High contrast mode" />
                            <MudSwitch T="bool" @bind-Checked="preferencesModel.LargeTextMode" Color="Color.Primary" Label="Large text mode" />

                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                                <MudIcon Icon="@Icons.Material.Filled.Save" Class="me-2" /> Save Preferences
                            </MudButton>
                        </MudForm>
                    </MudCardContent>
                </MudCard>
            }
            else if (activeTab == "notifications")
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Notifications" Class="me-2" />Notification Settings</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm Model="@notificationModel" OnValidSubmit="SaveNotifications">
                            <MudText Typo="Typo.h6" GutterBottom="true">Email Notifications</MudText>
                            <MudSwitch T="bool" @bind-Checked="notificationModel.CourseUpdates" Color="Color.Primary" Label="Course updates and announcements" />
                            <MudSwitch T="bool" @bind-Checked="notificationModel.AssignmentReminders" Color="Color.Primary" Label="Assignment and quiz reminders" />
                            <MudSwitch T="bool" @bind-Checked="notificationModel.ProgressReports" Color="Color.Primary" Label="Weekly progress reports" />
                            <MudSwitch T="bool" @bind-Checked="notificationModel.AchievementNotifications" Color="Color.Primary" Label="Achievement and certificate notifications" />

                            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Push Notifications</MudText>
                            <MudSwitch T="bool" @bind-Checked="notificationModel.BrowserNotifications" Color="Color.Primary" Label="Browser notifications" />
                            <MudSwitch T="bool" @bind-Checked="notificationModel.MobileNotifications" Color="Color.Primary" Label="Mobile app notifications" />

                            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Notification Frequency</MudText>
                            <MudSelect @bind-Value="notificationModel.EmailFrequency" Label="Select Frequency" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("immediate")">Immediate</MudSelectItem>
                                <MudSelectItem Value="@("daily")">Daily digest</MudSelectItem>
                                <MudSelectItem Value="@("weekly")">Weekly digest</MudSelectItem>
                                <MudSelectItem Value="@("never")">Never</MudSelectItem>
                            </MudSelect>

                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                                <MudIcon Icon="@Icons.Material.Filled.Save" Class="me-2" /> Save Notification Settings
                            </MudButton>
                        </MudForm>
                    </MudCardContent>
                </MudCard>
            }
            else if (activeTab == "privacy")
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Security" Class="me-2" />Privacy & Security</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm Model="@privacyModel" OnValidSubmit="SavePrivacy">
                            <MudText Typo="Typo.h6" GutterBottom="true">Profile Visibility</MudText>
                            <MudRadioGroup @bind-Value="privacyModel.ProfileVisibility">
                                <MudRadio Value="@("public")" Color="Color.Primary">Public - Anyone can see my profile</MudRadio>
                                <MudRadio Value="@("students")" Color="Color.Primary">Students only - Only other students can see my profile</MudRadio>
                                <MudRadio Value="@("private")" Color="Color.Primary">Private - Only I can see my profile</MudRadio>
                            </MudRadioGroup>

                            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Data Sharing</MudText>
                            <MudSwitch T="bool" @bind-Checked="privacyModel.ShareProgress" Color="Color.Primary" Label="Share my progress with instructors" />
                            <MudSwitch T="bool" @bind-Checked="privacyModel.AllowAnalytics" Color="Color.Primary" Label="Allow analytics data collection for course improvement" />
                            <MudSwitch T="bool" @bind-Checked="privacyModel.MarketingCommunications" Color="Color.Primary" Label="Receive marketing communications and course recommendations" />

                            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Two-Factor Authentication</MudText>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <MudText>Status: </MudText>
                                    <MudChip T="string" Color="@(privacyModel.TwoFactorEnabled ? Color.Success : Color.Warning)">@(privacyModel.TwoFactorEnabled ? "Enabled" : "Disabled")</MudChip>
                                </div>
                                <MudButton Color="@(privacyModel.TwoFactorEnabled ? Color.Error : Color.Primary)" OnClick="ToggleTwoFactor">@(privacyModel.TwoFactorEnabled ? "Disable" : "Enable") 2FA</MudButton>
                            </div>
                            <MudText Typo="Typo.caption" Class="text-muted">Two-factor authentication adds an extra layer of security to your account.</MudText>

                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                                <MudIcon Icon="@Icons.Material.Filled.Save" Class="me-2" /> Save Privacy Settings
                            </MudButton>
                        </MudForm>
                    </MudCardContent>
                </MudCard>
            }
            else if (activeTab == "account")
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="me-2" />Account Settings</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h6" GutterBottom="true">Change Password</MudText>
                        <MudForm Model="@passwordModel" OnValidSubmit="ChangePassword">
                            <MudTextField @bind-Value="passwordModel.CurrentPassword" Label="Current Password" InputType="InputType.Password" />
                            <MudTextField @bind-Value="passwordModel.NewPassword" Label="New Password" InputType="InputType.Password" />
                            <MudTextField @bind-Value="passwordModel.ConfirmPassword" Label="Confirm New Password" InputType="InputType.Password" />
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                                <MudIcon Icon="@Icons.Material.Filled.Key" Class="me-2" /> Change Password
                            </MudButton>
                        </MudForm>

                        <MudDivider Class="my-4" />

                        <MudText Typo="Typo.h6" GutterBottom="true">Export Data</MudText>
                        <MudText Class="text-muted">Download a copy of your learning data and progress.</MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ExportData" StartIcon="@Icons.Material.Filled.Download" Class="mt-2">Export My Data</MudButton>

                        <MudDivider Class="my-4" />

                        <MudText Typo="Typo.h6" GutterBottom="true" Color="Color.Error">Danger Zone</MudText>
                        <MudText Class="text-muted">Permanently delete your account and all associated data.</MudText>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="ConfirmDeleteAccount" StartIcon="@Icons.Material.Filled.Delete" Class="mt-2">Delete Account</MudButton>
                    </MudCardContent>
                </MudCard>
            }
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private string activeTab = "profile";

    private UserProfileModel profileModel = new();
    private PreferencesModel preferencesModel = new();
    private NotificationModel notificationModel = new();
    private PrivacyModel privacyModel = new();
    private PasswordChangeModel passwordModel = new();

    private List<string> availableCountries = new() { "US", "CA", "UK", "AU", "DE", "FR", "JP", "IN" };
    private List<string> availableTimeZones = new() { "UTC-8", "UTC-7", "UTC-6", "UTC-5", "UTC+0", "UTC+1", "UTC+9" };

    private async Task<IEnumerable<string>> SearchCountries(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return availableCountries;
        return availableCountries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchTimeZones(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return availableTimeZones;
        return availableTimeZones.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserSettings();
    }

    private async Task LoadUserSettings()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUserId = authState.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(currentUserId))
            {
                var user = await HttpClient.GetFromJsonAsync<UserModel>($"/api/users/{currentUserId}");

                if (user != null)
                {
                    // Load profile data
                    profileModel.FirstName = user.FirstName ?? string.Empty;
                    profileModel.LastName = user.LastName ?? string.Empty;
                    profileModel.Email = user.Email ?? string.Empty;
                    profileModel.Bio = user.Bio ?? string.Empty;

                    // Load other settings (mock data for now)
                    LoadDefaultSettings();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user settings: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadDefaultSettings()
    {
        // Load default preferences
        preferencesModel.CourseDisplayMode = "grid";
        preferencesModel.PreferredLanguage = "en";
        preferencesModel.DailyReminders = true;
        preferencesModel.DeadlineReminders = true;

        // Load default notifications
        notificationModel.CourseUpdates = true;
        notificationModel.AssignmentReminders = true;
        notificationModel.ProgressReports = false;
        notificationModel.AchievementNotifications = true;
        notificationModel.EmailFrequency = "daily";

        // Load default privacy settings
        privacyModel.ProfileVisibility = "students";
        privacyModel.ShareProgress = true;
        privacyModel.AllowAnalytics = true;
        privacyModel.MarketingCommunications = false;
        privacyModel.TwoFactorEnabled = false;
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private void SaveProfile()
    {
        try
        {
            // In real implementation, save to database via UserService
            ToastService.ShowSuccess("Profile saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving profile: {ex.Message}");
        }
    }

    private void SavePreferences()
    {
        try
        {
            // In real implementation, save to database
            ToastService.ShowSuccess("Preferences saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving preferences: {ex.Message}");
        }
    }

    private void SaveNotifications()
    {
        try
        {
            // In real implementation, save to database
            ToastService.ShowSuccess("Notification settings saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving notification settings: {ex.Message}");
        }
    }

    private void SavePrivacy()
    {
        try
        {
            // In real implementation, save to database
            ToastService.ShowSuccess("Privacy settings saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving privacy settings: {ex.Message}");
        }
    }

    private void ChangePassword()
    {
        try
        {
            if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
            {
                ToastService.ShowWarning("New passwords do not match!");
                return;
            }

            // In real implementation, change password via UserManager
            ToastService.ShowSuccess("Password changed successfully!");
            passwordModel = new PasswordChangeModel();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error changing password: {ex.Message}");
        }
    }

    private void ToggleTwoFactor()
    {
        try
        {
            privacyModel.TwoFactorEnabled = !privacyModel.TwoFactorEnabled;
            var status = privacyModel.TwoFactorEnabled ? "enabled" : "disabled";
            ToastService.ShowSuccess($"Two-factor authentication {status}!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error toggling 2FA: {ex.Message}");
        }
    }

    private void ExportData()
    {
        ToastService.ShowInfo("Data export initiated. You will receive an email when ready.");
    }

    private void ConfirmDeleteAccount()
    {
        // For now, we'll use a simple toast notification approach
        // In a real implementation, you would implement proper confirmation dialog
        ToastService.ShowWarning("Account deletion functionality requires additional confirmation. Please contact support.");
    }

    // Settings Models
    public class UserProfileModel
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Bio { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public DateTime? DateOfBirth { get; set; }
        public string Country { get; set; } = string.Empty;
        public string TimeZone { get; set; } = string.Empty;
    }

    public class PreferencesModel
    {
        public string CourseDisplayMode { get; set; } = "grid";
        public string PreferredLanguage { get; set; } = "en";
        public bool DailyReminders { get; set; } = true;
        public bool DeadlineReminders { get; set; } = true;
        public bool HighContrastMode { get; set; } = false;
        public bool LargeTextMode { get; set; } = false;
    }

    public class NotificationModel
    {
        public bool CourseUpdates { get; set; } = true;
        public bool AssignmentReminders { get; set; } = true;
        public bool ProgressReports { get; set; } = false;
        public bool AchievementNotifications { get; set; } = true;
        public bool BrowserNotifications { get; set; } = false;
        public bool MobileNotifications { get; set; } = false;
        public string EmailFrequency { get; set; } = "daily";
    }

    public class PrivacyModel
    {
        public string ProfileVisibility { get; set; } = "students";
        public bool ShareProgress { get; set; } = true;
        public bool AllowAnalytics { get; set; } = true;
        public bool MarketingCommunications { get; set; } = false;
        public bool TwoFactorEnabled { get; set; } = false;
    }

    public class PasswordChangeModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}