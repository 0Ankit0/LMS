@using BlazorBootstrap;
@page "/user/lms/announcement-list"
@inject HttpClient HttpClient

<PageTitle>Announcements - LMS</PageTitle>

<div class="announcements-layout">
    <!-- Announcements Sidebar as Tabs -->
    <div class="announcements-sidebar">
        <Tabs NavStyle="NavStyle.VerticalUnderline">
            <Tab Title="All Announcements" Active="@(selectedFilter == "all")">
                <Content>
                    <div class="ms-3">
                        <Button Color="ButtonColor.Link" Class="@GetFilterClass("all")"
                            @onclick='() => SelectFilter("all")'>
                            <Icon Name="IconName.Megaphone" class="me-2" />
                            All Announcements
                        </Button>
                    </div>
                </Content>
            </Tab>
            <Tab Title="High Priority" Active="@(selectedFilter == "high")">
                <Content>
                    <div class="ms-3">
                        <Button Color="ButtonColor.Link" Class="@GetFilterClass("high")"
                            @onclick='() => SelectFilter("high")'>
                            <Icon Name="IconName.ExclamationTriangle" class="me-2" />
                            High Priority
                        </Button>
                    </div>
                </Content>
            </Tab>
            <Tab Title="Medium Priority" Active="@(selectedFilter == "medium")">
                <Content>
                    <div class="ms-3">
                        <Button Color="ButtonColor.Link" Class="@GetFilterClass("medium")"
                            @onclick='() => SelectFilter("medium")'>
                            <Icon Name="IconName.InfoCircle" class="me-2" />
                            Medium Priority
                        </Button>
                    </div>
                </Content>
            </Tab>
            <Tab Title="Low Priority" Active="@(selectedFilter == "low")">
                <Content>
                    <div class="ms-3">
                        <Button Color="ButtonColor.Link" Class="@GetFilterClass("low")"
                            @onclick='() => SelectFilter("low")'>
                            <Icon Name="IconName.Bell" class="me-2" />
                            Low Priority
                        </Button>
                    </div>
                </Content>
            </Tab>
            <Tab Title="Recent" Active="@(selectedFilter == "recent")">
                <Content>
                    <div class="ms-3">
                        <Button Color="ButtonColor.Link" Class="@GetFilterClass("recent")"
                            @onclick='() => SelectFilter("recent")'>
                            <Icon Name="IconName.ClockHistory" class="me-2" />
                            Recent
                        </Button>
                    </div>
                </Content>
            </Tab>
            <Tab Title="Date Range">
                <Content>
                    <div class="filters-section ms-3">
                        <h6 class="filter-title">Date Range</h6>
                        <div class="filter-group">
                            <div class="filter-options">
                                <Button Color="ButtonColor.Link" Class="@GetDateFilterClass("today")"
                                    @onclick='() => SelectDateFilter("today")'>
                                    <span>Today</span>
                                </Button>
                                <Button Color="ButtonColor.Link" Class="@GetDateFilterClass("week")"
                                    @onclick='() => SelectDateFilter("week")'>
                                    <span>This Week</span>
                                </Button>
                                <Button Color="ButtonColor.Link" Class="@GetDateFilterClass("month")"
                                    @onclick='() => SelectDateFilter("month")'>
                                    <span>This Month</span>
                                </Button>
                                <Button Color="ButtonColor.Link" Class="@GetDateFilterClass("all")"
                                    @onclick='() => SelectDateFilter("all")'>
                                    <span>All Time</span>
                                </Button>
                            </div>
                        </div>
                    </div>
                </Content>
            </Tab>
        </Tabs>
    </div>

    <!-- Main Announcements Area -->
    <div class="announcements-main">
        <!-- Header -->
        <div class="announcements-header">
            <div class="header-info">
                <h3 class="page-title">Announcements</h3>
                <p class="page-subtitle">Stay updated with the latest news and information</p>
            </div>
            <div class="header-actions">
                <div class="search-container">
                    <TextInput @bind-Value="searchQuery" Placeholder="Search announcements..." />
                </div>
                <Button Color="ButtonColor.Primary" @onclick="RefreshAnnouncements">
                    <Icon Name="IconName.ArrowClockwise" />
                    <span>Refresh</span>
                </Button>
            </div>
        </div>

        <!-- Announcements Content -->
        <div class="announcements-content">
            @if (isLoading)
            {
                <div class="loading-container">
                    <div class="spinner">
                        <Spinner Color="SpinnerColor.Primary" />
                    </div>
                    <p class="loading-text">Loading announcements...</p>
                </div>
            }
            else if (filteredAnnouncements?.Any() == true)
            {
                <div class="announcements-list">
                    @foreach (var announcement in filteredAnnouncements)
                    {
                        <Card Class="@GetAnnouncementCardClass(announcement.Priority)">
                            <div class="announcement-priority">
                                <Icon Name="@GetPriorityIconEnum(announcement.Priority)" />
                            </div>
                            <CardBody Class="announcement-content">
                                <div class="announcement-header">
                                    <h5 class="announcement-title">@announcement.Title</h5>
                                    <div class="announcement-meta">
                                        <span class="announcement-author">
                                            <Icon Name="IconName.PersonCircle" />
                                            @announcement.AuthorName
                                        </span>
                                        <span class="announcement-date">
                                            <Icon Name="IconName.Calendar" />
                                            @FormatDate(announcement.PublishedAt)
                                        </span>
                                        <Badge Color="@GetPriorityBadgeColor(announcement.Priority)">
                                            @announcement.Priority
                                        </Badge>
                                    </div>
                                </div>
                                <p class="announcement-excerpt">@GetExcerpt(announcement.Content)</p>
                            </CardBody>
                            <div class="announcement-actions">
                                <Button Color="ButtonColor.Primary" Size="ButtonSize.Small"
                                    @onclick="() => ShowAnnouncement(announcement)">
                                    <Icon Name="IconName.Eye" />
                                    View
                                </Button>
                            </div>
                        </Card>
                    }
                </div>
            }
            else
            {
                <Card Class="empty-state text-center py-5">
                    <CardBody>
                        <Icon Name="IconName.Megaphone" Size="IconSize.x4" Class="text-muted mb-3" />
                        <h5>No announcements found</h5>
                        <p>There are no announcements matching your current filters.</p>
                        <Button Color="ButtonColor.Primary" @onclick="ClearFilters">Clear Filters</Button>
                    </CardBody>
                </Card>
            }
        </div>
    </div>
</div>

<!-- Announcement Detail Modal using new format -->
<Modal @ref="announcementDetailModal" Title="Announcement Details" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        @if (selectedAnnouncement is not null)
        {
            <div class="announcement-detail-meta mb-3">
                <div class="meta-item">
                    <Icon Name="IconName.PersonCircle" TextColor="TextColor.Primary" />
                    <span>@selectedAnnouncement.AuthorName</span>
                </div>
                <div class="meta-item">
                    <Icon Name="IconName.CalendarEvent" TextColor="TextColor.Primary" />
                    <span>@selectedAnnouncement.PublishedAt.ToString("MMM dd, yyyy HH:mm")</span>
                </div>
                <div class="meta-item">
                    <Badge Color="@GetPriorityBadgeColor(selectedAnnouncement.Priority)">
                        <Icon Name="@GetPriorityIconEnum(selectedAnnouncement.Priority)" />
                        @selectedAnnouncement.Priority Priority
                    </Badge>
                </div>
            </div>
            <div class="announcement-detail-content">
                @((MarkupString)(selectedAnnouncement.Content ?? ""))
            </div>
        }
        else
        {
            <div>No announcement selected.</div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary">Understood</Button>
    </FooterTemplate>
</Modal>

<Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Launch static backdrop modal</Button>

@code {
    // Properties for filtering and search
    private string selectedFilter = "all";
    private string dateFilter = "all";
    private string searchQuery = "";
    private bool isLoading = true;

    // Collections and selected items
    private List<AnnouncementModel> announcements = new();
    private List<AnnouncementModel> filteredAnnouncements = new();
    private AnnouncementModel? selectedAnnouncement;

    // Modal reference
    private Modal? announcementDetailModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;

        try
        {
            // Load announcements from service
            announcements = await HttpClient.GetFromJsonAsync<List<AnnouncementModel>>("/api/announcements");
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Log error and use mock data
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            ApplyFilters();
        }
        finally
        {
            isLoading = false;
        }
    }
    private void SelectFilter(string filter)
    {
        selectedFilter = filter;
        ApplyFilters();
    }

    private void SelectDateFilter(string filter)
    {
        dateFilter = filter;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredAnnouncements = announcements.Where(a => a.IsActive).ToList();

        // Apply priority filter
        if (selectedFilter != "all")
        {
            if (selectedFilter == "recent")
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.PublishedAt >= DateTime.Now.AddDays(-7))
                .ToList();
            }
            else
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.Priority.Equals(selectedFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
            }
        }

        // Apply date filter
        if (dateFilter != "all")
        {
            var cutoffDate = dateFilter switch
            {
                "today" => DateTime.Today,
                "week" => DateTime.Now.AddDays(-7),
                "month" => DateTime.Now.AddDays(-30),
                _ => DateTime.MinValue
            };

            if (cutoffDate != DateTime.MinValue)
            {
                filteredAnnouncements = filteredAnnouncements
                .Where(a => a.PublishedAt >= cutoffDate)
                .ToList();
            }
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredAnnouncements = filteredAnnouncements
            .Where(a => a.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            a.Content.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            a.AuthorName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
        }

        // Sort by date (newest first)
        filteredAnnouncements = filteredAnnouncements
        .OrderByDescending(a => a.PublishedAt)
        .ToList();

        StateHasChanged();
    }

    private async void ShowAnnouncement(AnnouncementModel announcement)
    {
        selectedAnnouncement = announcement;
        if (announcementDetailModal != null)
        {
            await announcementDetailModal.ShowAsync();
        }
    }

    private async void CloseModal()
    {
        if (announcementDetailModal != null)
        {
            await announcementDetailModal.HideAsync();
        }
        selectedAnnouncement = null;
    }

    private async Task RefreshAnnouncements()
    {
        await LoadAnnouncements();
    }

    private void ClearFilters()
    {
        selectedFilter = "all";
        dateFilter = "all";
        searchQuery = "";
        ApplyFilters();
    }

    private string GetPriorityClass(string priority)
    {
        return priority.ToLower();
    }

    // Returns the correct BlazorBootstrap.IconName enum for the given priority
    private IconName GetPriorityIconEnum(string? priority)
    {
        return (priority ?? "").ToLower() switch
        {
            "high" => IconName.ExclamationTriangle,
            "medium" => IconName.InfoCircle,
            "low" => IconName.Bell,
            _ => IconName.InfoCircle
        };
    }

    // Returns the correct BlazorBootstrap.BadgeColor enum for the given priority
    private BadgeColor GetPriorityBadgeColor(string? priority)
    {
        return (priority ?? "").ToLower() switch
        {
            "high" => BadgeColor.Danger,
            "medium" => BadgeColor.Warning,
            "low" => BadgeColor.Info,
            _ => BadgeColor.Secondary
        };
    }

    private string FormatDate(DateTime date)
    {
        var timeSpan = DateTime.Now - date;

        if (timeSpan.Days > 0)
        {
            return $"{timeSpan.Days} day{(timeSpan.Days > 1 ? "s" : "")} ago";
        }
        else if (timeSpan.Hours > 0)
        {
            return $"{timeSpan.Hours} hour{(timeSpan.Hours > 1 ? "s" : "")} ago";
        }
        else if (timeSpan.Minutes > 0)
        {
            return $"{timeSpan.Minutes} minute{(timeSpan.Minutes > 1 ? "s" : "")} ago";
        }
        else
        {
            return "Just now";
        }
    }

    private string GetExcerpt(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "";

        const int maxLength = 150;
        if (content.Length <= maxLength)
            return content;

        return content.Substring(0, maxLength) + "...";
    }

    // Helper methods for CSS classes
    private string GetFilterClass(string filter) => selectedFilter == filter ? "nav-item active" : "nav-item";
    private string GetDateFilterClass(string filter) => dateFilter == filter ? "filter-option active" : "filter-option";
    private string GetAnnouncementCardClass(string priority) => $"announcement-card {GetPriorityClass(priority)}";

    private async Task OnShowModalClick()
    {
        if (announcementDetailModal != null)
            await announcementDetailModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        if (announcementDetailModal != null)
            await announcementDetailModal.HideAsync();
        selectedAnnouncement = null;
    }
}
