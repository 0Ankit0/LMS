@using BlazorBootstrap;
@page "/user/lms/messages"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject ToastService ToastService

<PageTitle>Messages - LMS</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2"><Icon Name="IconName.Envelope" Class="me-2" />Messages</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <Button Color="ButtonColor.Primary" @onclick="ShowComposeModal">
                <Icon Name="IconName.Plus" Class="me-1" />Compose
            </Button>
        </div>
    </div>

    <div class="row">
        <!-- Message List -->
        <div class="col-md-4 border-end">
            <div class="mb-3">
                <div class="btn-group w-100" role="group">
                    <Button Color="ButtonColor.Primary" Outline="@(currentFolder != "inbox")"
                            @onclick='() => SwitchFolder("inbox")'>
                        <Icon Name="IconName.Inbox" Class="me-1" />Inbox (@unreadCount)
                    </Button>

                    <Button Color="ButtonColor.Primary" Outline="@(currentFolder != "sent")"
                            @onclick='() => SwitchFolder("sent")'>
                        <Icon Name="IconName.Send" Class="me-1" />Sent
                    </Button>
                </div>
            </div>

            @if (isLoadingMessages)
            {
                <div class="text-center py-3">
                    <Spinner />
                </div>
            }
            else if (filteredMessages?.Any() == true)
            {
                <div class="list-group">
                    @foreach (var message in filteredMessages)
                    {
                        <a href="#" class="list-group-item list-group-item-action @(selectedMessage?.Id == message.Id ? "active" : "") @(!message.IsRead && currentFolder == "inbox" ? "border-primary" : "")"
                           @onclick="() => SelectMessage(message)" @onclick:preventDefault="true">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1 @(!message.IsRead && currentFolder == "inbox" ? "fw-bold" : "")">
                                    @if (currentFolder == "inbox")
                                    {
                                        @message.FromUserName
                                    }
                                    else
                                    {
                                        @message.ToUserName
                                    }
                                </h6>
                                <small class="@(!message.IsRead && currentFolder == "inbox" ? "fw-bold" : "")">
                                    @message.SentAt.ToString("MMM dd")
                                </small>
                            </div>
                            <p class="mb-1 @(!message.IsRead && currentFolder == "inbox" ? "fw-bold" : "")">@message.Subject</p>
                            <small class="text-muted">
                                @if (message.Content.Length > 60)
                                {
                                    @(message.Content.Substring(0, 60) + "...")
                                }
                                else
                                {
                                    @message.Content
                                }
                            </small>
                            @if (!message.IsRead && currentFolder == "inbox")
                            {
                                <Badge Color="BadgeColor.Primary" class="rounded-pill ms-2">New</Badge>
                            }
                            @if (GetMessagePriorityIconName(message.Priority) is IconName iconName)
                            {
                                <Icon Name="@iconName" class="ms-2" />
                            }
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <Icon Name="IconName.Inbox" Size="IconSize.x3" Class="text-muted mb-3" />
                    <p class="text-muted">No messages in @currentFolder</p>
                </div>
            }
        </div>

        <!-- Message Content -->
        <div class="col-md-8">
            @if (selectedMessage != null)
            {
                <Card>
                    <CardHeader>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-0">@selectedMessage.Subject</h5>
                                <small class="text-muted">
                                    From: @selectedMessage.FromUserName â€¢
                                    @selectedMessage.SentAt.ToString("MMMM dd, yyyy 'at' h:mm tt")
                                </small>
                            </div>
                            <div class="btn-group">
                                <Button Color="ButtonColor.Primary" Outline="true" Size="ButtonSize.Small" @onclick="ReplyToMessage">
                                    <Icon Name="IconName.Reply" Class="me-1" />Reply
                                </Button>
                                <Button Color="ButtonColor.Danger" Outline="true" Size="ButtonSize.Small" @onclick="DeleteMessage">
                                    <Icon Name="IconName.Trash" Class="me-1" />Delete
                                </Button>
                            </div>
                        </div>
                    </CardHeader>
                    <CardBody>
                        <div class="message-content">
                            @((MarkupString)selectedMessage.Content.Replace("\n", "<br>"))
                        </div>

                        @if (selectedMessage.Attachments?.Any() == true)
                        {
                            <div class="mt-3">
                                <h6>Attachments:</h6>
                                @foreach (var attachment in selectedMessage.Attachments)
                                {
                                    <div class="d-flex align-items-center mb-2">
                                        <Icon Name="IconName.Paperclip" Class="me-2" />
                                        <a href="#" class="text-decoration-none">@attachment.FileName</a>
                                        <small class="text-muted ms-2">(@FormatFileSize(attachment.FileSize))</small>
                                    </div>
                                }
                            </div>
                        }
                    </CardBody>
                </Card>

                <!-- Replies -->
                @if (selectedMessage.Replies?.Any() == true)
                {
                    <div class="mt-3">
                        <h6>Replies:</h6>
                        @foreach (var reply in selectedMessage.Replies)
                        {
                            <Card class="mb-2">
                                <CardBody class="py-2">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <small class="fw-bold">@reply.FromUserName</small>
                                        <small class="text-muted">@reply.SentAt.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                                    </div>
                                    <div>@((MarkupString)reply.Content.Replace("\n", "<br>"))</div>
                                </CardBody>
                            </Card>
                        }
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <Icon Name="IconName.EnvelopeOpen" Size="IconSize.x4" Class="text-muted mb-3" />
                    <h4 class="text-muted">Select a message</h4>
                    <p class="text-muted">Choose a message from the list to read its content</p>
                </div>
            }
        </div>
    </div>
</div>



<!-- Compose Message Modal -->
<Modal @ref="composeModal" Title="@(replyToMessage != null ? "Reply to: " + replyToMessage.Subject : "Compose Message")">
    <BodyTemplate>
        <EditForm Model="@newMessage" OnValidSubmit="@SendMessage">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            @if (replyToMessage == null)
            {
                <div class="mb-3">
                    <label for="toUser" class="form-label">To</label>
                    <InputText id="toUser" class="form-control" @bind-value="toUserSearch" placeholder="Search for a user..." />
                    @if (searchedUsers?.Any() == true)
                    {
                        <div class="dropdown-menu show">
                            @foreach (var user in searchedUsers.Take(5))
                            {
                                <a class="dropdown-item" href="#" @onclick="() => SelectRecipient(user)" @onclick:preventDefault="true">
                                    @user.UserName (@user.Email)
                                </a>
                            }
                        </div>
                    }
                </div>
            }

            <div class="mb-3">
                <label for="subject" class="form-label">Subject</label>
                <InputText id="subject" class="form-control" @bind-value="newMessage.Subject" />
                <ValidationMessage For="@(() => newMessage.Subject)" />
            </div>

            <div class="mb-3">
                <label for="priority" class="form-label">Priority</label>
                <select id="priority" class="form-select" @bind="newMessage.Priority">
                    <option value="1">Low</option>
                    <option value="2">Normal</option>
                    <option value="3">High</option>
                    <option value="4">Urgent</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="content" class="form-label">Message</label>
                <InputTextArea id="content" class="form-control" rows="6" @bind-value="newMessage.Content" />
                <ValidationMessage For="@(() => newMessage.Content)" />
            </div>

        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideComposeModal">Cancel</Button>
        <Button Color="ButtonColor.Primary" IsLoading="isSending" @onclick="SendMessage">
            Send Message
        </Button>
    </FooterTemplate>
</Modal>

@code {
    private bool isLoadingMessages = true;
    private bool isSending = false;
    private string currentFolder = "inbox";
    private string? currentUserId;
    private string toUserSearch = "";

    private List<MessageModel>? inboxMessages;
    private List<MessageModel>? sentMessages;
    private List<MessageModel>? filteredMessages;
    private List<UserModel>? searchedUsers;
    private MessageModel? selectedMessage;
    private MessageModel? replyToMessage;

    private CreateMessageRequest newMessage = new();
    private int unreadCount = 0;

    private Modal? composeModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        try
        {
            isLoadingMessages = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(currentUserId))
                {
                    // Load inbox and sent messages via HTTP endpoints
                    var inboxResponse = await HttpClient.GetAsync($"/api/messages/user/{currentUserId}/inbox");
                    if (inboxResponse.IsSuccessStatusCode)
                    {
                        inboxMessages = await inboxResponse.Content.ReadFromJsonAsync<List<MessageModel>>() ?? new List<MessageModel>();
                    }

                    var sentResponse = await HttpClient.GetAsync($"/api/messages/user/{currentUserId}/sent");
                    if (sentResponse.IsSuccessStatusCode)
                    {
                        sentMessages = await sentResponse.Content.ReadFromJsonAsync<List<MessageModel>>() ?? new List<MessageModel>();
                    }

                    unreadCount = inboxMessages?.Count(m => !m.IsRead) ?? 0;

                    FilterMessages();
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error loading messages: {ex.Message}"));
        }
        finally
        {
            isLoadingMessages = false;
        }
    }

    private void FilterMessages()
    {
        filteredMessages = currentFolder switch
        {
            "sent" => sentMessages,
            _ => inboxMessages
        };
    }

    private void SwitchFolder(string folder)
    {
        currentFolder = folder;
        FilterMessages();
        selectedMessage = null;
    }

    private async Task SelectMessage(MessageModel message)
    {
        selectedMessage = message;

        // Mark as read if it's an inbox message and not already read
        if (currentFolder == "inbox" && !message.IsRead && currentUserId != null)
        {
            try
            {
                var response = await HttpClient.PutAsync($"/api/messages/{message.Id}/read?userId={currentUserId}", null);
                if (response.IsSuccessStatusCode)
                {
                    message.ReadAt = DateTime.UtcNow;
                    unreadCount = Math.Max(0, unreadCount - 1);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error marking message as read: {ex.Message}"));
            }
        }
    }

    private async void ShowComposeModal()
    {
        replyToMessage = null;
        newMessage = new CreateMessageRequest();
        toUserSearch = "";
        searchedUsers = null;
        if (composeModal != null)
            await composeModal.ShowAsync();
    }

    private async void ReplyToMessage()
    {
        if (selectedMessage == null) return;

        replyToMessage = selectedMessage;
        newMessage = new CreateMessageRequest
        {
            Subject = selectedMessage.Subject.StartsWith("Re: ") ? selectedMessage.Subject : $"Re: {selectedMessage.Subject}",
            ToUserId = selectedMessage.FromUserId,
            ParentMessageId = selectedMessage.Id,
            Priority = 2
        };
        toUserSearch = "";
        searchedUsers = null;
        if (composeModal != null)
            await composeModal.ShowAsync();
    }

    private async void HideComposeModal()
    {
        if (composeModal != null)
            await composeModal.HideAsync();
        replyToMessage = null;
        newMessage = new CreateMessageRequest();
        toUserSearch = "";
        searchedUsers = null;
    }

    private async Task SendMessage()
    {
        if (currentUserId == null) return;

        try
        {
            isSending = true;
            var response = await HttpClient.PostAsJsonAsync($"/api/messages?senderId={currentUserId}", newMessage);

            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new ToastMessage(ToastType.Success, "Message sent successfully!"));
                HideComposeModal();
                await LoadMessages();
            }
            else
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, "Failed to send message"));
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error sending message: {ex.Message}"));
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task DeleteMessage()
    {
        if (selectedMessage == null || currentUserId == null) return;

        try
        {
            var response = await HttpClient.DeleteAsync($"/api/messages/{selectedMessage.Id}?userId={currentUserId}");
            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new ToastMessage(ToastType.Success, "Message deleted successfully!"));
                selectedMessage = null;
                await LoadMessages();
            }
            else
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, "Failed to delete message"));
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error deleting message: {ex.Message}"));
        }
    }

    private void SelectRecipient(UserModel user)
    {
        newMessage.ToUserId = user.Id;
        toUserSearch = user.UserName;
        searchedUsers = null;
    }

    // Returns a BlazorBootstrap IconName? for the given priority string
    private IconName? GetMessagePriorityIconName(string priority)
    {
        return priority switch
        {
            "High" => IconName.ExclamationLg,
            "Urgent" => IconName.ExclamationTriangle,
            _ => null
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}