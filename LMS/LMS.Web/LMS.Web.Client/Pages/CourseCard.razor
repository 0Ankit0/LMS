@using LMS.Data.DTOs
@using MudBlazor

<MudCard>
    <MudCardMedia Image="@Course.ThumbnailUrl" Height="150" />
    <MudCardContent>
        <MudGrid Justify="Justify.SpaceBetween">
            <MudItem>
                <MudChip T="string" Color="Color.Secondary">@Course.Level</MudChip>
            </MudItem>
            <MudItem>
                <MudText Typo="Typo.body2">@FormatDuration(Course.EstimatedDuration)</MudText>
            </MudItem>
        </MudGrid>
        <MudText Typo="Typo.h6" Class="mt-2">@Course.Title</MudText>
        <MudText Typo="Typo.body2" Class="mt-2">@Course.Description</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="w-100">
            <MudItem>
                <MudAvatar Image="/favicon.png" Size="Size.Small" />
                <MudText Typo="Typo.body2" Class="d-inline-block ms-2">@Course.InstructorName</MudText>
            </MudItem>
            <MudItem>
                <MudIconButton Icon="@(IsBookmarked ? Icons.Material.Filled.Bookmark : Icons.Material.Filled.BookmarkBorder)" Color="Color.Primary" OnClick="() => OnBookmark.InvokeAsync(Course.Id)" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Href="@($"/user/lms/course/{Course.Id}")">View</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public CourseModel Course { get; set; }
    [Parameter] public bool IsBookmarked { get; set; }
    [Parameter] public EventCallback<int> OnBookmark { get; set; }

    private string FormatDuration(TimeSpan duration)
    {
        var hours = (int)duration.TotalHours;
        var minutes = duration.Minutes;

        if (hours > 0)
        {
            return minutes > 0 ? $"{hours}h {minutes}m" : $"{hours}h";
        }
        return $"{minutes}m";
    }
}